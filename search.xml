<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Elasticsearch中ignore_above的作用</title>
      <link href="/2019/02/13/ignore_above-in-elasticsearch/"/>
      <url>/2019/02/13/ignore_above-in-elasticsearch/</url>
      
        <content type="html"><![CDATA[<p>ignore_above一般配合keyword类型使用，指示该字段的最大索引长度（即超过该长度的内容将不会被索引），对于超过ignore_above长度的字符串，analyzer不会进行索引分析，所以超过该长度的内容将不会被搜索到。这个选项主要对not_analyzed字段有用，这些字段通常用来进行过滤、聚合和排序。而且这些字段都是整体存在的，不需要进行索引分析处理，所以一般不会允许在这些字段中索引过长的项。</p><p>当在设置索引的mapping设置后，如果keyword字段没有显式设置ignore_above的值，则ES会默认设置该长度为256，当然你可以在后续的操作中修改这个值，但是修改后需要重建索引才能让以前不满足的值重新变得满足而被索引。</p><ol><li>不满足该设置的文档会被保存，但是该字段值不会被索引</li><li>通过查询该字段的值时该文档不会被索引到，并被输出</li><li>通过其它字段的查询时，如果该文档满足条件会被索引到，并被输出</li><li>该设置选项并不影响文档的保存，只影响文档的字段是否被索引和搜索</li></ol><p>注：keyword类型的字段的最大长度限制为32766个UTF-8字符，text类型的字段对字符长度没有限制</p><p>所以在设置keyword类型的ignore_above值时应该先遵守keyword本身的值最大长度限制。</p><blockquote><p>ignore_above 值表示字符个数，但是 Lucene 计算的是字节数。如果你使用包含很多非 ASCII 字符的 UTF-8 文本，你应该将这个限制设置成 32766 / 3 = 10922 因为 UTF-8 字符可能最多占用 3 个字节。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
            <tag> lucene </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java并发之Striped64解析</title>
      <link href="/2019/02/02/java-concurrent-striped64/"/>
      <url>/2019/02/02/java-concurrent-striped64/</url>
      
        <content type="html"><![CDATA[<p>注：本文基于JDK1.8进行解析，其它JDK版本可能有所不同。</p><p>早在JDK1.5的时候就已经引入了大神Doug Lea的并发包体系，其中包括各种显式锁及实现，原子类，原子引用等，极大的丰富了JDK的并发生态。让我们实现数据同步从“原始社会”的synchroinzed阶段一下子过度到了基于CAS的“现代社会”，JDK1.5的AQS堪称当代并发的一个神器级的工具，然而追求永远是无穷尽的，当人们在享受到原子类带来的性能提升的时候，大神Doug Lea又一次为原子操作的Long和Double带来新的成员：Striped64及它的子类。它的原理相对来说比较简单，也是JDK常用的方式，就是通过CAS以及“分段技术”努力地减少争用，尽最大可能提高并发度。</p><p>Striped64该类维护了一个惰性初始化的列表和一个基础(base)的数值，列表的大小是2的次方，索引这个列表是通过基于每个线程的内部Probe算出一个Hashcode来确定。这个类的几乎所有的方法都是protected的，所以只有它的子类可以使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Striped64</span> <span class="keyword">extends</span> <span class="title">Number</span> </span>&#123;</span><br><span class="line">  <span class="meta">@sun</span>.misc.Contended <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> </span>&#123;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">        Cell(<span class="keyword">long</span> x) &#123; value = x; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">cas</span><span class="params">(<span class="keyword">long</span> cmp, <span class="keyword">long</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> UNSAFE.compareAndSwapLong(<span class="keyword">this</span>, valueOffset, cmp, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Unsafe mechanics</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">                Class&lt;?&gt; ak = Cell.class;</span><br><span class="line">                valueOffset = UNSAFE.objectFieldOffset</span><br><span class="line">                    (ak.getDeclaredField(<span class="string">"value"</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Number of CPUS, to place bound on table size */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NCPU = Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table of cells. When non-null, size is a power of 2.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> Cell[] cells;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base value, used mainly when there is no contention, but also as</span></span><br><span class="line"><span class="comment">     * a fallback during table initialization races. Updated via CAS.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">long</span> base;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spinlock (locked via CAS) used when resizing and/or creating Cells.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line">    .... 相关方法省略</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unsafe mechanics</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> BASE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> CELLSBUSY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> PROBE;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            Class&lt;?&gt; sk = Striped64.class;</span><br><span class="line">            BASE = UNSAFE.objectFieldOffset</span><br><span class="line">                (sk.getDeclaredField(<span class="string">"base"</span>));</span><br><span class="line">            CELLSBUSY = UNSAFE.objectFieldOffset</span><br><span class="line">                (sk.getDeclaredField(<span class="string">"cellsBusy"</span>));</span><br><span class="line">            Class&lt;?&gt; tk = Thread.class;</span><br><span class="line">            PROBE = UNSAFE.objectFieldOffset</span><br><span class="line">                (tk.getDeclaredField(<span class="string">"threadLocalRandomProbe"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类一个包本地类，只能在包范围内引用，包含支持64位值动态分段的类的通用表示和机制。该类同时继承至Number，因此具体的子类必须实现其接口方法。</p><p>在Striped64内部，持有数据的是一个由叫做Cell的数据结构的一个列表实现，这个Cell数据结构通过使用@sun.misc.Contented这个注解来减少缓存行冲突，关于缓存冲突，缓存行，伪共享的描述可以参看相关资料。通常情况下，缓存行填充(Padding)对于大多数原子操作来说都是不必要的，因为它们散落在不规则的内存中。但是对于存在于一个数组内的原子对象来说，这样的情况会发生变化，它们会产生相互影响，原因是因为它们在内存中的布局会相互紧挨着，并存在大量的共享相同的缓存行，而共享缓存行对于性能的影响将是非常巨大的。</p><p>相对来说Cell这个结构还是比较大的，所以我们尽量避免提前创建它们，除非在真正用到它们的时候。当没有竞争时，所有的更新操作都会应用到base字段上。当第一次产生争用时（在base字段上发生CAS失败），这个列表会被初始化，初始化大小为2。当后续仍然产生争用时，这个列表会被进一步扩展（除非到达了它的终极大小限制：列表大小的扩展到和CPU数量相当），列表中的Slot是空的，只有在使用它的时候才进行初始化。</p><p>一个自旋锁cellsBusy被用于列表的初始化和扩容，以及Slot的填充。在这里没有必要使用阻塞，当锁不可用时，线程会尝试获取其它Slot的锁（或者尝试base字段）。在这些重试期间，争用是增加了但局部性争用是降低了，这仍然比替代方案更好。</p><p>通过ThreadLocalRandom维护的Thread probe字段用作每线程哈希码。在未产生争用时，我们让它保持未初始化的值为0。当初始化时尽量保证这个值不与其它线程的值相冲突。执行更新操作时，失败的CAS会指示争用或列表冲突。当发生冲突时，如果此时列表的大小还没有达到极限大小限制，列表会进行扩容除非有其它的线程持有这把锁。如果被hashcode指定索引到的slot为空，并且锁是可用的，那么这个slot会被初始化为一个新的Cell。其它情况下，如果slot中存在Cell，那么就执行一次CAS操作来更新Cell中的值。重试通过“双重散列”进行，使用辅助散列（Marsaglia XorShift）尝试查找空闲插槽。</p><p>列表大小是有限的，因为当线程多于CPU时，假设每个线程都绑定到CPU，就会存在一个完美的哈希函数，将线程映射到槽以消除冲突。 当我们达到容量时，我们通过随机改变冲突线程的哈希码来搜索此映射。 因为搜索是随机的，并且冲突仅通过CAS失败而变得已知，所以收敛可能很慢，并且因为线程通常不会永远地绑定到CPUS，所以可能根本不会发生。 然而，尽管存在这些限制，但在这些情况下观察到的争用率通常较低。</p><p>当曾经散列到它的线程终止时，以及在列表扩容导致没有线程在扩展掩码下散列到它的情况下，Cell可能会被释放。我们不会尝试检测或删除此类Cell，假设对于长期运行的实例，观察到的争用情况可能会再次出现，因此最终将再次需要Cell; 对于短命的实例来说，没关系，GC帮我们清理这整个实例。</p><p>在整个实现过程中大量使用CAS无锁操作，并运用Padding技术（缓存行填充）将一个原子化的Long操作性能发挥到极致，在普通无争用或者争用较少的情况下，可以用base以及少量的Cell就可以动态减少争用，并在争用激烈时通过扩容Cell列表的方式来分散争用。这种模式有点类似分段锁的方式，不同的是这种实现更高效，全程无锁无阻塞。</p><p>Striped64类使用一个base和一个分散的Cell列表来实现对于Long型数值的操作，其核心的方法为longAccumulate和doubleAccumulate，其中这两个方法思路和模式均相同，只是一个针对于long类型，一个针对double类型。</p><p>关于对longAccumulate方法的解析如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">longAccumulate</span><span class="params">(<span class="keyword">long</span> x, LongBinaryOperator fn,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">boolean</span> wasUncontended)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">if</span> ((h = getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">            ThreadLocalRandom.current(); <span class="comment">// force initialization</span></span><br><span class="line">            h = getProbe();</span><br><span class="line">            wasUncontended = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> collide = <span class="keyword">false</span>;                <span class="comment">// True if last slot nonempty</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Cell[] as; Cell a; <span class="keyword">int</span> n; <span class="keyword">long</span> v;</span><br><span class="line">            <span class="keyword">if</span> ((as = cells) != <span class="keyword">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="keyword">null</span>) &#123; </span><br><span class="line">                    <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) &#123;       </span><br><span class="line">                        Cell r = <span class="keyword">new</span> Cell(x);   <span class="comment">// Optimistically create</span></span><br><span class="line">                        <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                            <span class="keyword">boolean</span> created = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">try</span> &#123;               <span class="comment">// Recheck under lock</span></span><br><span class="line">                                Cell[] rs; <span class="keyword">int</span> m, j;</span><br><span class="line">                                <span class="keyword">if</span> ((rs = cells) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                    (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                    rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    rs[j] = r;</span><br><span class="line">                                    created = <span class="keyword">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                cellsBusy = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (created)</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;           <span class="comment">// Slot is now non-empty</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    collide = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)       <span class="comment">// CAS already known to fail</span></span><br><span class="line">                    wasUncontended = <span class="keyword">true</span>;      <span class="comment">// Continue after rehash</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (a.cas(v = a.value, ((fn == <span class="keyword">null</span>) ? v + x :</span><br><span class="line">                                             fn.applyAsLong(v, x))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= NCPU || cells != as)</span><br><span class="line">                    collide = <span class="keyword">false</span>;            <span class="comment">// At max size or stale</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!collide)</span><br><span class="line">                    collide = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cells == as) &#123;      <span class="comment">// Expand table unless stale</span></span><br><span class="line">                            Cell[] rs = <span class="keyword">new</span> Cell[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                                rs[i] = as[i];</span><br><span class="line">                            cells = rs;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        cellsBusy = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    collide = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;                   <span class="comment">// Retry with expanded table</span></span><br><span class="line">                &#125;</span><br><span class="line">                h = advanceProbe(h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; cells == as &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> init = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;                           <span class="comment">// Initialize table</span></span><br><span class="line">                    <span class="keyword">if</span> (cells == as) &#123;</span><br><span class="line">                        Cell[] rs = <span class="keyword">new</span> Cell[<span class="number">2</span>];</span><br><span class="line">                        rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> Cell(x);</span><br><span class="line">                        cells = rs;</span><br><span class="line">                        init = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    cellsBusy = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (init)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (casBase(v = base, ((fn == <span class="keyword">null</span>) ? v + x :</span><br><span class="line">                                        fn.applyAsLong(v, x))))</span><br><span class="line">                <span class="keyword">break</span>;                          <span class="comment">// Fall back on using base</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该类还有几个子类，通常我们在使用的时候一般会使用到的就是它的子类，包括：LongAdder，LongAccumulator，DoubleAdder，DoubleAccumulator，其中LongAdder和LongAccumulator只存在细微差异，Adder故名思意是求和的意思，LongAdder是指多次调用累加求和。而LongAccumulator是累积计算的意思，累积计算就不一定是求和了，也有可能是其它操作，这里它提供了一个二元操作接口了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LongBinaryOperator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this operator to the given operands.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left the first operand</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right the second operand</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the operator result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">applyAsLong</span><span class="params">(<span class="keyword">long</span> left, <span class="keyword">long</span> right)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用于控制在这个累积器中应该如何对long类数据进行操作。在Striped64的longAccumulate方法中我们也看到了LongBinaryOperator作为了参数传入，并在更新值时进行了计算，只是默认在传null的情况下，默认为累加，这也是LongAdder实现累加的原理：</p><p>LongAdder类累加方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds the given value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x the value to add</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">        Cell[] as; <span class="keyword">long</span> b, v; <span class="keyword">int</span> m; Cell a;</span><br><span class="line">        <span class="keyword">if</span> ((as = cells) != <span class="keyword">null</span> || !casBase(b = base, b + x)) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">                (a = as[getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">                !(uncontended = a.cas(v = a.value, v + x)))</span><br><span class="line">                longAccumulate(x, <span class="keyword">null</span>, uncontended);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>DoubleAdder和DoubleAccumuator同LongAdder和LongAccumulator，这里不再累述。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次Skywalking内存泄露的原因分析</title>
      <link href="/2019/01/31/memory-leak-analysis-for-skywalking/"/>
      <url>/2019/01/31/memory-leak-analysis-for-skywalking/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是skywalking"><a href="#什么是skywalking" class="headerlink" title="什么是skywalking"></a>什么是skywalking</h1><p>Skywalking 是一款分布式系统的应用程序性能监视工具(APM)，专为微服务、云本机架构和基于容器（Docker、K8s、Mesos）架构而设计。</p><p>详细的Skywalking介绍见：<a href="http://skywalkking.apache.org" target="_blank" rel="noopener">Skywalking官网</a></p><h1 id="遇到的问题场景"><a href="#遇到的问题场景" class="headerlink" title="遇到的问题场景"></a>遇到的问题场景</h1><ol><li>公司Dev/Test环境</li><li>Collector因故宕机很长时间，约两周（无人维护监控）</li><li>应用接入端agent内存暴涨导致大量应用内存溢出或告警</li><li>Skywalking版本：5.0.0-GA<a id="more"></a></li></ol><h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">2018</span>-<span class="number">12</span>-<span class="number">03</span> <span class="number">09</span>:<span class="number">50</span>:<span class="number">47</span>:<span class="number">931</span> AppAndServiceRegisterClient :  AppAndServiceRegisterClient execute fail.</span><br><span class="line">org.apache.skywalking.apm.dependencies.io.grpc.StatusRuntimeException: UNAVAILABLE: io exception</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.grpc.stub.ClientCalls.toStatusRuntimeException(ClientCalls.java:<span class="number">222</span>)</span><br></pre></td></tr></table></figure><p>另一些应用报错：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: GC overhead limit exceeded</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">2019</span>-<span class="number">01</span>-<span class="number">20</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">21</span>:<span class="number">024</span> JVMService :  send JVM metrics to Collector fail. </span><br><span class="line">org.apache.skywalking.apm.dependencies.io.grpc.StatusRuntimeException: UNAVAILABLE: io exception</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.grpc.stub.ClientCalls.toStatusRuntimeException(ClientCalls.java:<span class="number">222</span>)</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.grpc.stub.ClientCalls.getUnchecked(ClientCalls.java:<span class="number">203</span>)</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:<span class="number">132</span>)</span><br><span class="line">        at org.apache.skywalking.apm.network.proto.JVMMetricsServiceGrpc$JVMMetricsServiceBlockingStub.collect(JVMMetricsServiceGrpc.java:<span class="number">158</span>)</span><br><span class="line">        at org.apache.skywalking.apm.agent.core.jvm.JVMService$Sender.run(JVMService.java:<span class="number">143</span>)</span><br><span class="line">        at org.apache.skywalking.apm.util.RunnableWithExceptionProtection.run(RunnableWithExceptionProtection.java:<span class="number">36</span>)</span><br><span class="line">        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<span class="number">511</span>)</span><br><span class="line">        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:<span class="number">308</span>)</span><br><span class="line">        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$<span class="number">301</span>(ScheduledThreadPoolExecutor.java:<span class="number">180</span>)</span><br><span class="line">        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:<span class="number">294</span>)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: org.apache.skywalking.apm.dependencies.io.netty.channel.AbstractChannel$AnnotatedConnectException: 拒绝连接: /<span class="number">172.21</span>.16.175:<span class="number">11800</span></span><br><span class="line">        at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)</span><br><span class="line">        at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:<span class="number">717</span>)</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:<span class="number">325</span>)</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:<span class="number">340</span>)</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:<span class="number">634</span>)</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:<span class="number">581</span>)</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:<span class="number">498</span>)</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:<span class="number">460</span>)</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.netty.util.concurrent.SingleThreadEventExecutor$<span class="number">5</span>.run(SingleThreadEventExecutor.java:<span class="number">884</span>)</span><br><span class="line">        at org.apache.skywalking.apm.dependencies.io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:<span class="number">30</span>)</span><br><span class="line">        ... <span class="number">1</span> more</span><br><span class="line">Caused by: java.net.ConnectException: 拒绝连接</span><br><span class="line">        ... <span class="number">11</span> more</span><br></pre></td></tr></table></figure><p>这些日志大量出现在应用日志中，从发生内存溢出以前很久时间一直持续。</p><p>通过jmap将java内存对象状态dump出来分析：</p><p><img src="https://i.loli.net/2019/01/31/5c52660b1228b.png" alt="image.png"></p><p>发现存在大量skywalking对象占据内存，具体对象为：HpackHeaderField和ManagedChannelImpl。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>HpackHeaderField和ManagedChannelImpl均为处理gRPC的处理类，并根据内存泄露时报的错误来看，Collector挂掉了很久，一直在重试连接。查看skywalking的源码分析重连过程：</p><p>GRPCChannelManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"Selected collector grpc service running, reconnect:&#123;&#125;."</span>, reconnect);</span><br><span class="line">        <span class="keyword">if</span> (reconnect) &#123;</span><br><span class="line">            <span class="keyword">if</span> (RemoteDownstreamConfig.Collector.GRPC_SERVERS.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String server = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> index = Math.abs(random.nextInt()) % RemoteDownstreamConfig.Collector.GRPC_SERVERS.size();</span><br><span class="line">                    server = RemoteDownstreamConfig.Collector.GRPC_SERVERS.get(index);</span><br><span class="line">                    String[] ipAndPort = server.split(<span class="string">":"</span>);</span><br><span class="line">                    managedChannel = GRPCChannel.newBuilder(ipAndPort[<span class="number">0</span>], Integer.parseInt(ipAndPort[<span class="number">1</span>]))</span><br><span class="line">                        .addManagedChannelBuilder(<span class="keyword">new</span> StandardChannelBuilder())</span><br><span class="line">                        .addManagedChannelBuilder(<span class="keyword">new</span> TLSChannelBuilder())</span><br><span class="line">                        .addChannelDecorator(<span class="keyword">new</span> AuthenticationDecorator())</span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!managedChannel.isShutdown() &amp;&amp; !managedChannel.isTerminated()) &#123;</span><br><span class="line">                        reconnect = <span class="keyword">false</span>;</span><br><span class="line">                        notify(GRPCChannelStatus.CONNECTED);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        notify(GRPCChannelStatus.DISCONNECT);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    logger.error(t, <span class="string">"Create channel to &#123;&#125; fail."</span>, server);</span><br><span class="line">                    notify(GRPCChannelStatus.DISCONNECT);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            logger.debug(<span class="string">"Selected collector grpc service is not available. Wait &#123;&#125; seconds to retry"</span>, Config.Collector.GRPC_CHANNEL_CHECK_INTERVAL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可知，当collector挂掉后，agent在尝试重连而一直连接不上时，会不断的创建ManagedChannel对象，查看gRPC的ManagedChannelOrphanWrapper源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagedChannelOrphanWrapper</span> <span class="keyword">extends</span> <span class="title">ForwardingManagedChannel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReferenceQueue&lt;ManagedChannelOrphanWrapper&gt; refqueue =</span><br><span class="line">      <span class="keyword">new</span> ReferenceQueue&lt;ManagedChannelOrphanWrapper&gt;();</span><br><span class="line">  <span class="comment">// Retain the References so they don't get GC'd</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;ManagedChannelReference, ManagedChannelReference&gt; refs =</span><br><span class="line">      <span class="keyword">new</span> ConcurrentHashMap&lt;ManagedChannelReference, ManagedChannelReference&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger =</span><br><span class="line">      Logger.getLogger(ManagedChannelOrphanWrapper.class.getName());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ManagedChannelReference phantom;</span><br><span class="line"></span><br><span class="line">  ManagedChannelOrphanWrapper(ManagedChannel delegate) &#123;</span><br><span class="line">    <span class="keyword">this</span>(delegate, refqueue, refs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">... 此后代码省略</span><br></pre></td></tr></table></figure><p>上面有一句话明确提示：Retain the References so they don’t get GC’d<br>同时也初始化了一些Netty相关的处理类，并且没有释放。</p><p>翻看了一些gRPC的文档，也是建议一定要显式的关闭channel。</p><p>修改了agent部分的源码，处理为在重连时关闭旧的Channel对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"Selected collector grpc service running, reconnect:&#123;&#125;."</span>, reconnect);</span><br><span class="line">        <span class="keyword">if</span> (reconnect) &#123;</span><br><span class="line">            <span class="keyword">if</span> (RemoteDownstreamConfig.Collector.GRPC_SERVERS.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String server = <span class="string">""</span>;</span><br><span class="line">                GRPCChannel oldChannel = managedChannel;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> index = Math.abs(random.nextInt()) % RemoteDownstreamConfig.Collector.GRPC_SERVERS.size();</span><br><span class="line">                    server = RemoteDownstreamConfig.Collector.GRPC_SERVERS.get(index);</span><br><span class="line">                    String[] ipAndPort = server.split(<span class="string">":"</span>);</span><br><span class="line">                    managedChannel = GRPCChannel.newBuilder(ipAndPort[<span class="number">0</span>], Integer.parseInt(ipAndPort[<span class="number">1</span>]))</span><br><span class="line">                        .addManagedChannelBuilder(<span class="keyword">new</span> StandardChannelBuilder())</span><br><span class="line">                        .addManagedChannelBuilder(<span class="keyword">new</span> TLSChannelBuilder())</span><br><span class="line">                        .addChannelDecorator(<span class="keyword">new</span> AuthenticationDecorator())</span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!managedChannel.isShutdown() &amp;&amp; !managedChannel.isTerminated()) &#123;</span><br><span class="line">                        reconnect = <span class="keyword">false</span>;</span><br><span class="line">                        notify(GRPCChannelStatus.CONNECTED);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        notify(GRPCChannelStatus.DISCONNECT);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    logger.error(t, <span class="string">"Create channel to &#123;&#125; fail."</span>, server);</span><br><span class="line">                    notify(GRPCChannelStatus.DISCONNECT);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (oldChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        oldChannel.shutdownNow();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            logger.debug(<span class="string">"Selected collector grpc service is not available. Wait &#123;&#125; seconds to retry"</span>, Config.Collector.GRPC_CHANNEL_CHECK_INTERVAL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>打包推送至Dev环境进行观察，同时也模拟Collector的情况将Collector杀死。经过一段时间的观察，内存平稳无异常。</p><p>到此skywalking的特定情况下的内存泄漏问题得到解决，相关issue已由同事提交到skywalking官方。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解析 </tag>
            
            <tag> 参与开源 </tag>
            
            <tag> skywalking </tag>
            
            <tag> apm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并写(write combining)</title>
      <link href="/2019/01/31/write-combining/"/>
      <url>/2019/01/31/write-combining/</url>
      
        <content type="html"><![CDATA[<p><strong>转载自并发编程网 – ifeve.com 本文链接地址: <a href="http://ifeve.com/writecombining/" target="_blank" rel="noopener">合并写(write combining)</a> 译者：无叶 校对：丁一</strong></p><p>现代CPU采用了大量的技术来抵消内存访问带来的延迟。读写内存数据期间，CPU能执行成百上千条指令。</p><p>多级SRAM缓存是减小这种延迟带来的影响的主要手段。此外，SMP系统采用消息传递协议来实现缓存之间的一致性。遗憾的是，现代的CPU实在是太快了，即使是使用了缓存，有时也无法跟上CPU的速度。因此，为了进一步减小延迟的影响，一些鲜为人知的缓冲区派上了用场。</p><p>本文将探讨“合并写存储缓冲区（write combining store buffers）”，以及如何写出有效利用它们的代码。</p><p>CPU缓存是一种高效的非链式结构的hash map，每个桶（bucket）通常是64个字节。这就是一个“缓存行（cache line）”。缓存行是内存交换的实际单位。例如，主存中地址A会映射到一个给定的缓存行C。</p><p>如果CPU需要访问的地址hash后的行尚不在缓存中，那么缓存中对应位置的缓存行会被清除，以便载入新的行。例如，如果我们有两个地址，通过hash算法hash到同一缓存行，那么新的值会覆盖老的值。</p><p>当CPU执行存储指令（store）时，它会尝试将数据写到离CPU最近的L1缓存。如果此时出现缓存未命中，CPU会访问下一级缓存。此时，无论是英特尔还是许多其它厂商的CPU都会使用一种称为“合并写（write combining）”的技术。</p><p>在请求L2缓存行的所有权尚未完成时，待存储的数据被写到处理器自身的众多跟缓存行一样大小的存储缓冲区之一。这些芯片上的缓冲区允许CPU在缓存子系统未准备好接收和处理数据时继续执行指令。当数据不在任何其它级别的缓存中时，将获得最大的优势。</p><p>当后续的写操作需要修改相同的缓存行时，这些缓冲区变得非常有趣。在将后续的写操作提交到L2缓存之前，可以进行缓冲区写合并。 这些64字节的缓冲区维护了一个64位的字段，每更新一个字节就会设置对应的位，来表示将缓冲区交换到外部缓存时哪些数据是有效的。</p><p>也许你要问，如果程序要读取已被写入缓冲区的某些数据，会怎么样？我们的硬件工程师已经考虑到了这点，在读取缓存之前会先去读取缓冲区的。</p><p>这一切对我们的程序意味着什么？</p><p>如果我们能在缓冲区被传输到外部缓存之前将其填满，那么将大大提高各级传输总线的效率。如何才能做到这一点呢？好的程序将大部分时间花在循环处理任务上。</p><p>这些缓冲区的数量是有限的，且随CPU模型而异。例如在Intel CPU中，同一时刻只能拿到4个。这意味着，在一个循环中，你不应该同时写超过4个不同的内存位置，否则你将不能享受到合并写（write combining）的好处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteCombining</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>    ITERATIONS = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>    ITEMS      = <span class="number">1</span> &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>    MASK       = ITEMS - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayA     = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayB     = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayC     = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayD     = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayE     = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayF     = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            out.println(i + <span class="string">" SingleLoop duration (ns) = "</span> + runCaseOne());</span><br><span class="line">            out.println(i + <span class="string">" SplitLoop duration (ns) = "</span> + runCaseTwo());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = arrayA[<span class="number">1</span>] + arrayB[<span class="number">2</span>] + arrayC[<span class="number">3</span>] + arrayD[<span class="number">4</span>] + arrayE[<span class="number">5</span>] + arrayF[<span class="number">6</span>];</span><br><span class="line">        out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">runCaseOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        <span class="keyword">int</span> i = ITERATIONS;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (--i != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> slot = i &amp; MASK;</span><br><span class="line">            <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i;</span><br><span class="line">            arrayA[slot] = b;</span><br><span class="line">            arrayB[slot] = b;</span><br><span class="line">            arrayC[slot] = b;</span><br><span class="line">            arrayD[slot] = b;</span><br><span class="line">            arrayE[slot] = b;</span><br><span class="line">            arrayF[slot] = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> System.nanoTime() - start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">runCaseTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        <span class="keyword">int</span> i = ITERATIONS;</span><br><span class="line">        <span class="keyword">while</span> (--i != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> slot = i &amp; MASK;</span><br><span class="line">            <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i;</span><br><span class="line">            arrayA[slot] = b;</span><br><span class="line">            arrayB[slot] = b;</span><br><span class="line">            arrayC[slot] = b;</span><br><span class="line">        &#125;</span><br><span class="line">        i = ITERATIONS;</span><br><span class="line">        <span class="keyword">while</span> (--i != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> slot = i &amp; MASK;</span><br><span class="line">            <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i;</span><br><span class="line">            arrayD[slot] = b;</span><br><span class="line">            arrayE[slot] = b;</span><br><span class="line">            arrayF[slot] = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> System.nanoTime() - start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序在我的Windows 7 64位英特尔酷睿<a href="mailto:i7860@2.8" target="_blank" rel="noopener">i7860@2.8</a> GHz系统上产生的输出如下：</p><blockquote><p>1 SingleLoop duration (ns) = 14019753545<br> 1 SplitLoop  duration (ns) = 8972368661<br> 2 SingleLoop duration (ns) = 14162455066<br> 2 SplitLoop  duration (ns) = 8887610558<br> 3 SingleLoop duration (ns) = 13800914725<br> 3 SplitLoop  duration (ns) = 7271752889</p></blockquote><p>上面的例子说明：如果在一个循环中修改6个数组位置（内存地址），程序的运行时间明显长于将任务拆分的方式，即，先写前3个位置，再修改后3个位置。</p><p>通过拆分循环，我们做了更多的工作，但程序花费的时间更少！欢迎利用神奇的“合并写（write combining）”。通过使用CPU架构的知识，正确的填充这些缓冲区，我们可以利用底层硬件加速我们的程序。</p><p>不要忘了超线程（hyper-threading），可能会有2个线程竞争同一个核的缓冲区。</p><p>转载自并发编程网 – ifeve.com 本文链接地址: <a href="http://ifeve.com/writecombining/" target="_blank" rel="noopener">合并写(write combining)</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪共享(False Sharing)</title>
      <link href="/2019/01/31/false-sharing/"/>
      <url>/2019/01/31/false-sharing/</url>
      
        <content type="html"><![CDATA[<p>转载自并发编程网 – ifeve.com 本文链接地址: <a href="伪共享(False Sharing">伪共享</a>)</p><p><strong>原文地址：<a href="http://ifeve.com/false-sharing/" target="_blank" rel="noopener">http://ifeve.com/false-sharing/</a></strong></p><p><strong>作者：Martin Thompson  译者：丁一</strong></p><p>缓存系统中是以缓存行（cache line）为单位存储的。缓存行是2的整数幂个连续字节，一般为32-256个字节。最常见的缓存行大小是64个字节。当多线程修改互相独立的变量时，如果这些变量共享同一个缓存行，就会无意中影响彼此的性能，这就是伪共享。缓存行上的写竞争是运行在SMP系统中并行线程实现可伸缩性最重要的限制因素。有人将伪共享描述成无声的性能杀手，因为从代码中很难看清楚是否会出现伪共享。</p><p>为了让可伸缩性与线程数呈线性关系，就必须确保不会有两个线程往同一个变量或缓存行中写。两个线程写同一个变量可以在代码中发现。为了确定互相独立的变量是否共享了同一个缓存行，就需要了解内存布局，或找个工具告诉我们。Intel VTune就是这样一个分析工具。本文中我将解释Java对象的内存布局以及我们该如何填充缓存行以避免伪共享。</p><a id="more"></a><p><img src="https://i.loli.net/2019/01/31/5c525b69739f4.png" alt="image.png"></p><p>图1说明了伪共享的问题。在核心1上运行的线程想更新变量X，同时核心2上的线程想要更新变量Y。不幸的是，这两个变量在同一个缓存行中。每个线程都要去竞争缓存行的所有权来更新变量。如果核心1获得了所有权，缓存子系统将会使核心2中对应的缓存行失效。当核心2获得了所有权然后执行更新操作，核心1就要使自己对应的缓存行失效。这会来来回回的经过L3缓存，大大影响了性能。如果互相竞争的核心位于不同的插槽，就要额外横跨插槽连接，问题可能更加严重。</p><h2 id="Java内存布局-Java-Memory-Layout"><a href="#Java内存布局-Java-Memory-Layout" class="headerlink" title="Java内存布局(Java Memory Layout)"></a>Java内存布局(Java Memory Layout)</h2><p>对于HotSpot JVM，所有对象都有两个字长的对象头。第一个字是由24位哈希码和8位标志位（如锁的状态或作为锁对象）组成的Mark Word。第二个字是对象所属类的引用。如果是数组对象还需要一个额外的字来存储数组的长度。每个对象的起始地址都对齐于8字节以提高性能。因此当封装对象的时候为了高效率，对象字段声明的顺序会被重排序成下列基于字节大小的顺序：</p><ol><li>doubles (8) 和 longs (8)</li><li>ints (4) 和 floats (4)</li><li>shorts (2) 和 chars (2)</li><li>booleans (1) 和 bytes (1)</li><li>references (4/8)</li><li>&lt;子类字段重复上述顺序&gt;<br>（译注：更多HotSpot虚拟机对象结构相关内容:<a href="http://www.infoq.com/cn/articles/jvm-hotspot）" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/jvm-hotspot）</a></li></ol><p>了解这些之后就可以在任意字段间用7个long来填充缓存行。在Disruptor里我们对RingBuffer的cursor和BatchEventProcessor的序列进行了缓存行填充。</p><p>为了展示其性能影响，我们启动几个线程，每个都更新它自己独立的计数器。计数器是volatile long类型的，所以其它线程能看到它们的进展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FalseSharing</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_THREADS = <span class="number">4</span>; <span class="comment">// change</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> ITERATIONS = <span class="number">500L</span> * <span class="number">1000L</span> * <span class="number">1000L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> arrayIndex;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> VolatileLong[] longs = <span class="keyword">new</span> VolatileLong[NUM_THREADS];</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; longs.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            longs[i] = <span class="keyword">new</span> VolatileLong();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FalseSharing</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> arrayIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arrayIndex = arrayIndex;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        runTest();</span><br><span class="line">        System.out.println(<span class="string">"duration = "</span> + (System.nanoTime() - start));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[NUM_THREADS];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> FalseSharing(i));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads)</span><br><span class="line">        &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads)</span><br><span class="line">        &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> i = ITERATIONS + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">0</span> != --i)</span><br><span class="line">        &#123;</span><br><span class="line">            longs[arrayIndex].value = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileLong</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">long</span> p1, p2, p3, p4, p5, p6; <span class="comment">// comment out</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果-Results"><a href="#结果-Results" class="headerlink" title="结果(Results)"></a>结果(Results)</h2><p>运行上面的代码，增加线程数以及添加/移除缓存行的填充，下面的图2描述了我得到的结果。这是在我4核Nehalem上测得的运行时间。</p><p><img src="https://i.loli.net/2019/01/31/5c525ca7d0a59.png" alt="image.png"></p><p>从不断上升的测试所需时间中能够明显看出伪共享的影响。没有缓存行竞争时，我们几近达到了随着线程数的线性扩展。</p><p>这并不是个完美的测试，因为我们不能确定这些VolatileLong会布局在内存的什么位置。它们是独立的对象。但是经验告诉我们同一时间分配的对象趋向集中于一块。</p><p>所以你也看到了，伪共享可能是无声的性能杀手。</p><p>转载自并发编程网 – ifeve.com 本文链接地址: <a href="伪共享(False Sharing">伪共享</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>groovy-expr-usage</title>
      <link href="/2019/01/08/groovy-expr-usage/"/>
      <url>/2019/01/08/groovy-expr-usage/</url>
      
        <content type="html"><![CDATA[<p>在开发单据规则计算引擎的时候引入了groovy脚本计算引擎，其中有一个规则函数：正则函数需要使用正则表达式计算，顺便找了一下groovy里的正则表达式：</p><p>groovy中对于正则表达式的书写进行了简化，同时它仍然是引用的java核心的正则表达式引擎，并没有自己实现一套正则引擎，更多的是从语法糖的形式上进行优化，让人使用起来格外的舒服。</p><ul><li>查找（find）操作符：=~  返回Matcher类型</li><li>匹配（match）操作符：==~  返回boolean类型</li><li>模式(pattern)操作符：~String  返回Pattern类型</li></ul><a id="more"></a><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExprCheck</span> <span class="keyword">implements</span> <span class="title">FunctionInvoke</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> EXPR_PARAM = <span class="string">"expr"</span>;</span><br><span class="line"></span><br><span class="line">    FunctionResult invoke(FunctionContext ctx) &#123;</span><br><span class="line">        <span class="keyword">def</span> currentVal = ctx.currentVal;</span><br><span class="line">        <span class="keyword">def</span> exprStr = ctx.systemParams.get(EXPR_PARAM);</span><br><span class="line">        <span class="keyword">def</span> expr = ~exprStr;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FunctionResult(currentVal ==~ expr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExprCheckTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test1() &#123;</span><br><span class="line">        FunctionContext ctx = <span class="keyword">new</span> FunctionContext();</span><br><span class="line">        ctx.currentVal = <span class="string">"hello"</span></span><br><span class="line">        ctx.systemParams = [<span class="string">"expr"</span>:<span class="string">"hello"</span>]</span><br><span class="line"></span><br><span class="line">        ExprCheck check = <span class="keyword">new</span> ExprCheck();</span><br><span class="line">        FunctionResult result = check.invoke(ctx);</span><br><span class="line">        assertTrue(result.valid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test2() &#123;</span><br><span class="line">        FunctionContext ctx = <span class="keyword">new</span> FunctionContext();</span><br><span class="line">        ctx.currentVal = <span class="string">"hello1"</span></span><br><span class="line">        ctx.systemParams = [<span class="string">"expr"</span>:<span class="string">"hellod+"</span>]</span><br><span class="line"></span><br><span class="line">        ExprCheck check = <span class="keyword">new</span> ExprCheck();</span><br><span class="line">        FunctionResult result = check.invoke(ctx);</span><br><span class="line">        assertTrue(!result.valid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test3() &#123;</span><br><span class="line">        FunctionContext ctx = <span class="keyword">new</span> FunctionContext();</span><br><span class="line">        ctx.currentVal = <span class="string">"hello1"</span></span><br><span class="line">        ctx.systemParams = [<span class="string">"expr"</span>:<span class="string">"hello\\d+"</span>]</span><br><span class="line"></span><br><span class="line">        ExprCheck check = <span class="keyword">new</span> ExprCheck();</span><br><span class="line">        FunctionResult result = check.invoke(ctx);</span><br><span class="line">        assertTrue(result.valid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> groovy </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jackson-ctrl-char-problem-resovle</title>
      <link href="/2019/01/08/jackson-ctrl-char-problem-resovle/"/>
      <url>/2019/01/08/jackson-ctrl-char-problem-resovle/</url>
      
        <content type="html"><![CDATA[<p>在使用swagger传递json数据的时候，突然报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.codehaus.jackson.JsonParseException: Illegal unquoted character ((CTRL-CHAR, code 10))</span><br></pre></td></tr></table></figure></p><p>意思是说使用了在json内容中使用了控制字符。而这个code 10是说使用了换行字符。</p><p>解决方法:</p><p>方式1. 使用显式转义方式</p><p>使用\n代替控制性转行（不可打印）字符</p><p>方式2. 配置Jackson<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper mapp = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> json </tag>
            
            <tag> jackson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solve-a-disk-warning-illusion-caused-by-rocketmq</title>
      <link href="/2019/01/04/solve-a-disk-warning-illusion-caused-by-rocketmq/"/>
      <url>/2019/01/04/solve-a-disk-warning-illusion-caused-by-rocketmq/</url>
      
        <content type="html"><![CDATA[<p>最近一段时间在运维部署rocketmq的过程中，启动时频繁报一个奇怪的错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2018-12-19 22:20:58 INFO StoreScheduledThread1 - begin to delete before 336 hours file. timeup: false spacefull: true manualDeleteFileSeveralTimes: 0 cleanAtOnce: false</span><br><span class="line">2018-12-19 22:20:58 WARN StoreScheduledThread1 - disk space will be full soon, but delete file failed.</span><br><span class="line">2018-12-19 22:21:08 INFO StoreScheduledThread1 - physic disk maybe full soon, so reclaim space, -1.0</span><br><span class="line">2018-12-19 22:21:08 INFO StoreScheduledThread1 - begin to delete before 336 hours file. timeup: false spacefull: true manualDeleteFileSeveralTimes: 0 cleanAtOnce: false</span><br><span class="line">2018-12-19 22:21:08 WARN StoreScheduledThread1 - disk space will be full soon, but delete file failed.</span><br><span class="line">2018-12-19 22:21:15 INFO StoreStatsService - [STORETPS] put_tps 0.0 get_found_tps 0.0 get_miss_tps 1.799730040493926 get_transfered_tps 0.0</span><br><span class="line">2018-12-19 22:21:15 INFO StoreStatsService - [PAGECACHERT] TotalPut 0, PutMessageDistributeTime [&lt;=0ms]:0 [0~10ms]:0 [10~50ms]:0 [50~100ms]:0 [100~200ms]:0 [200~500ms]:0 [500ms~1s]:0 [1~2s]:0 [2~3s]:0 [3~4s]:0 [4~5s]:0 [5~10s]:0 [10s~]:0 </span><br><span class="line">2018-12-19 22:21:18 INFO StoreScheduledThread1 - physic disk maybe full soon, so reclaim space, -1.0</span><br><span class="line">2018-12-19 22:21:18 INFO StoreScheduledThread1 - begin to delete before 336 hours file. timeup: false spacefull: true manualDeleteFileSeveralTimes: 0 cleanAtOnce: false</span><br><span class="line">2018-12-19 22:21:18 WARN StoreScheduledThread1 - disk space will be full soon, but delete file failed.</span><br><span class="line">2018-12-19 22:21:28 INFO StoreScheduledThread1 - physic disk maybe full soon, so reclaim space, -1.0</span><br><span class="line">2018-12-19 22:21:28 INFO StoreScheduledThread1 - begin to delete before 336 hours file. timeup: false spacefull: true manualDeleteFileSeveralTimes: 0 cleanAtOnce: false</span><br><span class="line">2018-12-19 22:21:28 WARN StoreScheduledThread1 - disk space will be full soon, but delete file failed.</span><br><span class="line">2018-12-19 22:21:38 INFO StoreScheduledThread1 - physic disk maybe full soon, so reclaim space, -1.0</span><br><span class="line">2018-12-19 22:21:38 INFO StoreScheduledThread1 - begin to delete before 336 hours file. timeup: false spacefull: true manualDeleteFileSeveralTimes: 0 cleanAtOnce: false</span><br><span class="line">2018-12-19 22:21:38 WARN StoreScheduledThread1 - disk space will be full soon, but delete file failed.</span><br><span class="line">2018-12-19 22:21:48 INFO StoreScheduledThread1 - physic disk maybe full soon, so reclaim space, -1.0</span><br><span class="line">2018-12-19 22:21:48 INFO StoreScheduledThread1 - begin to delete before 336 hours file. timeup: false spacefull: true manualDeleteFileSeveralTimes: 0 cleanAtOnce: false</span><br><span class="line">2018-12-19 22:21:48 WARN StoreScheduledThread1 - disk space will be full soon, but delete file failed.</span><br><span class="line">2018-12-19 22:21:58 INFO StoreScheduledThread1 - physic disk maybe full soon, so reclaim space, -1.0</span><br></pre></td></tr></table></figure><p>而当时查看了磁盘的容量，远远没有达到rocketmq的磁盘容量警告阀值。剩余的磁盘空间还非常多，一开始是怀疑运维人员没有将rocketmq的存储目录挂载到数据盘，但是经过沟通后发现已经挂载了。</p><p>最后没办法只能是通过阅读rocketmq源代码找原因：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSpaceToDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">double</span> ratio = DefaultMessageStore.<span class="keyword">this</span>.getMessageStoreConfig().getDiskMaxUsedSpaceRatio() / <span class="number">100.0</span>;</span><br><span class="line"></span><br><span class="line">            cleanImmediately = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                String storePathPhysic = DefaultMessageStore.<span class="keyword">this</span>.getMessageStoreConfig().getStorePathCommitLog();</span><br><span class="line">                <span class="keyword">double</span> physicRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathPhysic);</span><br><span class="line">                <span class="keyword">if</span> (physicRatio &gt; diskSpaceWarningLevelRatio) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> diskok = DefaultMessageStore.<span class="keyword">this</span>.runningFlags.getAndMakeDiskFull();</span><br><span class="line">                    <span class="keyword">if</span> (diskok) &#123;</span><br><span class="line">                        DefaultMessageStore.log.error(<span class="string">"physic disk maybe full soon "</span> + physicRatio + <span class="string">", so mark disk full"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    cleanImmediately = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (physicRatio &gt; diskSpaceCleanForciblyRatio) &#123;</span><br><span class="line">                    cleanImmediately = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> diskok = DefaultMessageStore.<span class="keyword">this</span>.runningFlags.getAndMakeDiskOK();</span><br><span class="line">                    <span class="keyword">if</span> (!diskok) &#123;</span><br><span class="line">                        DefaultMessageStore.log.info(<span class="string">"physic disk space OK "</span> + physicRatio + <span class="string">", so mark disk ok"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (physicRatio &lt; <span class="number">0</span> || physicRatio &gt; ratio) &#123;</span><br><span class="line">                    DefaultMessageStore.log.info(<span class="string">"physic disk maybe full soon, so reclaim space, "</span> + physicRatio);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                String storePathLogics = StorePathConfigHelper</span><br><span class="line">                    .getStorePathConsumeQueue(DefaultMessageStore.<span class="keyword">this</span>.getMessageStoreConfig().getStorePathRootDir());</span><br><span class="line">                <span class="keyword">double</span> logicsRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathLogics);</span><br><span class="line">                <span class="keyword">if</span> (logicsRatio &gt; diskSpaceWarningLevelRatio) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> diskok = DefaultMessageStore.<span class="keyword">this</span>.runningFlags.getAndMakeDiskFull();</span><br><span class="line">                    <span class="keyword">if</span> (diskok) &#123;</span><br><span class="line">                        DefaultMessageStore.log.error(<span class="string">"logics disk maybe full soon "</span> + logicsRatio + <span class="string">", so mark disk full"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    cleanImmediately = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (logicsRatio &gt; diskSpaceCleanForciblyRatio) &#123;</span><br><span class="line">                    cleanImmediately = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> diskok = DefaultMessageStore.<span class="keyword">this</span>.runningFlags.getAndMakeDiskOK();</span><br><span class="line">                    <span class="keyword">if</span> (!diskok) &#123;</span><br><span class="line">                        DefaultMessageStore.log.info(<span class="string">"logics disk space OK "</span> + logicsRatio + <span class="string">", so mark disk ok"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (logicsRatio &lt; <span class="number">0</span> || logicsRatio &gt; ratio) &#123;</span><br><span class="line">                    DefaultMessageStore.log.info(<span class="string">"logics disk maybe full soon, so reclaim space, "</span> + logicsRatio);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>关键错误出现在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> physicRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathPhysic);</span><br></pre></td></tr></table></figure><p>这里出现返回-1的情况，仔细捋了一把这个工具类的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getDiskPartitionSpaceUsedPercent</span><span class="params">(<span class="keyword">final</span> String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == path || path.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!file.exists())</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> totalSpace = file.getTotalSpace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (totalSpace &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> freeSpace = file.getFreeSpace();</span><br><span class="line">                <span class="keyword">long</span> usedSpace = totalSpace - freeSpace;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> usedSpace / (<span class="keyword">double</span>) totalSpace;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>综合以上的现象发现只能是发生了异常，而在异常这里，rocketmq自己吃掉了异常，并返回了-1。</p><p>这里个人感觉rocketmq团队在这里处理的方式非常不友好，不仅吃掉了异常而且还返回了一个没意义的值！</p><p>而为什么在计算磁盘空间的时候会出现异常呢，目前能想到的一个原因可能是因为安全原因，导致问题出现，而在linux下selinux是产生文件方面安全问题的重要原因。</p><p>解决方案：叫运维关闭selinux后，情况恢复正常。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rocketmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexoclient-usage</title>
      <link href="/2018/12/30/hexoclient-usage/"/>
      <url>/2018/12/30/hexoclient-usage/</url>
      
        <content type="html"><![CDATA[<p>HexoClient使用帮助</p><p>使用方法链接见：<a href="https://www.mspring.org/2018/11/29/HexoClient%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/" target="_blank" rel="noopener">HexoClient使用帮助</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制springcloud服务注册到consul中的instanceId</title>
      <link href="/2018/12/23/customize-instance-id-with-consul-service-registry/"/>
      <url>/2018/12/23/customize-instance-id-with-consul-service-registry/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在使用SpringCloud构建微服务过程中，我们使用Consul作为服务的注册中心，中间过程也踩了不少的坑，今天又踩了一个：我们根据官方的建议，在注册springcloud服务的时候，instanceId使用的是以下的配置：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    consul:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        health-check-path:</span> <span class="string">/management/health</span></span><br><span class="line"><span class="attr">        service-name:</span> <span class="string">mq-gateway</span></span><br><span class="line"><span class="attr">        health-check-interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">        prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        instance-id:</span> <span class="string">$&#123;spring.cloud.consul.discovery.service-name&#125;:$&#123;server.port&#125;:$&#123;random.value&#125;</span></span><br></pre></td></tr></table></figure></p><p>重点就在于这个instance-id的配置，它由服务名+服务端口+随机值组成。这种看起来唯一且没有什么问题的配置，却是接下来坑的开始。</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在微服务的开发过程中，不断有开发人员抱怨在开发过程中一些不正常的停止微服务会导致consul上的服务注册实例越来越多，而且IP和端口都一模一样，究其原因是因为不正常的停止导致consul无法正常反注册服务，导致服务注册驻留在consul上，并变为critical状态，而当程序重启时，重新注册的instance-id又会随着${random.value}的配置而与之前的配置不同，这就导致了不断有不同instance-id的实例注册到consul上，而且他们的健康检测url都一样，这个时候当新服务启动后，所有的原有的critical状态的服务的健康检测都能通过，这时候看到的现象就是consul上这个服务挂了很多个实例（其实这些实例都是同一个服务实例）。</p><p>而且出于安全的原因，有个非常蛋疼的地方在于consul的服务实例反注册还只能由服务注册所在的机器发起才能反注册。</p><p>关于实例重复被注册，在SpringCloud的Github上也有讨论，<a href="https://github.com/spring-cloud/spring-cloud-consul/issues/318" target="_blank" rel="noopener">链接在这里</a>。不过从维护者的回答看出来，好像官方并没有打算做这方面的改进措施。</p><p>求人不如求己，自己也试着来看看有没有解决方案吧。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="一、通过注册修改微服务健康检测的url来规避"><a href="#一、通过注册修改微服务健康检测的url来规避" class="headerlink" title="一、通过注册修改微服务健康检测的url来规避"></a>一、通过注册修改微服务健康检测的url来规避</h2><p>因为多个实例中健康检测的url相同，所以没法区分哪个是正常的实例，所以我们只需要将健康检测的url变成不相同即可，简单的实现如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    consul:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        health-check-path:</span> <span class="string">/$&#123;spring.cloud.consul.discovery.instance-id&#125;/management/health</span></span><br><span class="line"><span class="attr">        service-name:</span> <span class="string">mq-gateway</span></span><br><span class="line"><span class="attr">        health-check-interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">        prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        instance-id:</span> <span class="string">$&#123;spring.cloud.consul.discovery.service-name&#125;:$&#123;server.port&#125;:$&#123;random.value&#125;</span></span><br></pre></td></tr></table></figure><p>但是这种方案有一个很大的弊端在于：健康检测的url对于每个服务来说变得不可得，都是一些随机的url，会导致外部的一些监控程序无法通过某种规则构造服务的健康检测url，从而掌握服务的健康状况，这是一种对于监控系统来说非常不友好的方式。</p><h2 id="二、通过IP和端口确定instance-id的唯一性"><a href="#二、通过IP和端口确定instance-id的唯一性" class="headerlink" title="二、通过IP和端口确定instance-id的唯一性"></a>二、通过IP和端口确定instance-id的唯一性</h2><p>同一个程序，多次启动导致instance-id不相同的原因在于${random.value}，我们尝试去掉它，而${spring.cloud.consul.discovery.service-name}:${server.port}并不能保证唯一性，我们需要加上一个特征使它变得唯一，很好想到的就是用IP来限制：服务名+IP+PORT，这样基本就限制住了唯一性。</p><p>但是有一个问题是SpringBoot或者SpringCloud并没有提供一个获取本地IP的配置项。这里我们需要仿造${random.value}的配置原理，构造一个我们自己的IP配置获取方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomValuePropertySource</span> <span class="keyword">extends</span> <span class="title">PropertySource</span>&lt;<span class="title">Random</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Name of the random &#123;<span class="doctag">@link</span> PropertySource&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RANDOM_PROPERTY_SOURCE_NAME = <span class="string">"random"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">"random."</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(RandomValuePropertySource.class);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RandomValuePropertySource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name, <span class="keyword">new</span> Random());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RandomValuePropertySource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(RANDOM_PROPERTY_SOURCE_NAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!name.startsWith(PREFIX)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Generating random property for '"</span> + name + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getRandomValue(name.substring(PREFIX.length()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getRandomValue</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (type.equals(<span class="string">"int"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> getSource().nextInt();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (type.equals(<span class="string">"long"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> getSource().nextLong();</span><br><span class="line">&#125;</span><br><span class="line">String range = getRange(type, <span class="string">"int"</span>);</span><br><span class="line"><span class="keyword">if</span> (range != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> getNextIntInRange(range);</span><br><span class="line">&#125;</span><br><span class="line">range = getRange(type, <span class="string">"long"</span>);</span><br><span class="line"><span class="keyword">if</span> (range != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> getNextLongInRange(range);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (type.equals(<span class="string">"uuid"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> UUID.randomUUID().toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getRandomBytes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getRange</span><span class="params">(String type, String prefix)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (type.startsWith(prefix)) &#123;</span><br><span class="line"><span class="keyword">int</span> startIndex = prefix.length() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (type.length() &gt; startIndex) &#123;</span><br><span class="line"><span class="keyword">return</span> type.substring(startIndex, type.length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNextIntInRange</span><span class="params">(String range)</span> </span>&#123;</span><br><span class="line">String[] tokens = StringUtils.commaDelimitedListToStringArray(range);</span><br><span class="line"><span class="keyword">int</span> start = Integer.parseInt(tokens[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (tokens.length == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> getSource().nextInt(start);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> start + getSource().nextInt(Integer.parseInt(tokens[<span class="number">1</span>]) - start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getNextLongInRange</span><span class="params">(String range)</span> </span>&#123;</span><br><span class="line">String[] tokens = StringUtils.commaDelimitedListToStringArray(range);</span><br><span class="line"><span class="keyword">if</span> (tokens.length == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Math.abs(getSource().nextLong() % Long.parseLong(tokens[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> lowerBound = Long.parseLong(tokens[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">long</span> upperBound = Long.parseLong(tokens[<span class="number">1</span>]) - lowerBound;</span><br><span class="line"><span class="keyword">return</span> lowerBound + Math.abs(getSource().nextLong() % upperBound);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getRandomBytes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>];</span><br><span class="line">getSource().nextBytes(bytes);</span><br><span class="line"><span class="keyword">return</span> DigestUtils.md5DigestAsHex(bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addToEnvironment</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">environment.getPropertySources().addAfter(</span><br><span class="line">StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,</span><br><span class="line"><span class="keyword">new</span> RandomValuePropertySource(RANDOM_PROPERTY_SOURCE_NAME));</span><br><span class="line">logger.trace(<span class="string">"RandomValuePropertySource add to Environment"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个给了我们很大的提示，我们自己也可以在SpringBoot程序启动的时候注入一个我们自己的ProperySource将机器的IP作为配置项作为其它其它配置项的引用。并结合我们自己的配置中心客户端，可以在开发人员不感知的情况下就把这个事情给做掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class CustomizeApplication extends SpringApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static ConfigurableApplicationContext run(Object source, String... args) &#123;</span><br><span class="line">        return run(new Object[] &#123; source &#125;, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static ConfigurableApplicationContext run(Object[] sources, String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        advanceFetchApolloConfig(sources);</span><br><span class="line"></span><br><span class="line">        return new CustomizeApplication(sources).run(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...//此处省略</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configurePropertySources(ConfigurableEnvironment environment, String[] args) &#123;</span><br><span class="line">        super.configurePropertySources(environment, args);</span><br><span class="line"></span><br><span class="line">        //add local overwrite config file</span><br><span class="line">        if(localOverwriteConfig != null)&#123;</span><br><span class="line">            environment.getPropertySources().addFirst(localOverwriteConfig);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        environment.getPropertySources().addAfter(ConfigConsts.PREDECESSOR_OF_APOLLO, bootstrapConfig);</span><br><span class="line"></span><br><span class="line">        //注入Server相关属性及配置</span><br><span class="line">        environment.getPropertySources().addAfter(bootstrapConfig.getName(), new ServerPropertiesSource(environment));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...//此处省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的PropertySource:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerPropertiesSource</span> <span class="keyword">extends</span> <span class="title">PropertySource</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(ServerPropertiesSource.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_PROPERTIES_NAME = <span class="string">"xxx.server"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_ADDR_PATTERN = SERVER_PROPERTIES_NAME + <span class="string">".addr.pattern"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LoadingCache&lt;String, Object&gt; loadingCache = CacheBuilder.newBuilder()</span><br><span class="line">            .expireAfterAccess(<span class="number">60</span>, TimeUnit.SECONDS)</span><br><span class="line">            .maximumSize(<span class="number">1000</span>).build(<span class="keyword">new</span> CacheLoader&lt;String, Object&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">load</span><span class="params">(String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> _getProperty(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerPropertiesSource</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(SERVER_PROPERTIES_NAME, environment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerPropertiesSource</span><span class="params">(String name, Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, <span class="keyword">new</span> Object());</span><br><span class="line">        <span class="keyword">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> loadingCache.get(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">_getProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.startsWithIgnoreCase(name, SERVER_PROPERTIES_NAME)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"get server property for '"</span> + name + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getServerProperty(name.substring(SERVER_ADDR_PATTERN.length()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">getServerProperty</span><span class="params">(String subName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.startsWithIgnoreCase(subName, <span class="string">".addr"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getServerIp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">getServerIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String serverAddrPattern = <span class="keyword">this</span>.environment.getProperty(SERVER_ADDR_PATTERN);</span><br><span class="line">            <span class="keyword">if</span> (serverAddrPattern != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Pattern pattern = Pattern.compile(serverAddrPattern);</span><br><span class="line">                <span class="keyword">return</span> InetAddressUtils.getLocalAddress(pattern);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> InetAddressUtils.getLocalAddress();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(),e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">应用配置：</span><br><span class="line">```yaml</span><br><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    consul:</span><br><span class="line">      host: <span class="number">127.0</span>.0.1</span><br><span class="line">      port: <span class="number">8500</span></span><br><span class="line">      discovery:</span><br><span class="line">        health-check-path: /management/$&#123;instance-id&#125;/health</span><br><span class="line">        service-name: mq-gateway</span><br><span class="line">        health-check-interval: <span class="number">10</span>s</span><br><span class="line">        prefer-ip-address: <span class="keyword">true</span></span><br><span class="line">        instance-id: $&#123;spring.cloud.consul.discovery.service-name&#125;:$&#123;xxx.server.addr&#125;:$&#123;server.port&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SpringBoot启动：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableApolloConfig(&#123; &quot;application&quot;, &quot;common.consul&quot;&#125;)</span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">CustomizeApplication.run(DemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册到Consul中的服务：<br><img src="/2018/12/23/customize-instance-id-with-consul-service-registry/consul.png"></p><p>至此，大功告成！</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java DNS缓存</title>
      <link href="/2018/11/23/java-dns-cache/"/>
      <url>/2018/11/23/java-dns-cache/</url>
      
        <content type="html"><![CDATA[<h1 id="jdk1-5和1-5之前版本"><a href="#jdk1-5和1-5之前版本" class="headerlink" title="jdk1.5和1.5之前版本"></a>jdk1.5和1.5之前版本</h1><p>默认DNS缓存时间是永久缓存</p><h1 id="jdk-1-6以后"><a href="#jdk-1-6以后" class="headerlink" title="jdk 1.6以后"></a>jdk 1.6以后</h1><p>与security manager策略有关。</p><p>如果没有启用security manager，默认解析成功的DNS缓存时间为30秒，解析失败的DNS缓存时间为10秒。</p><p>策略配置文件：JAVA_HOME/jre/lib/security/java.policy</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>对于多条A记录DNS，在缓存有效期内，取到的IP永远是缓存中全部A记录的第一条，并没有轮循之类的策略。<br>缓存失效之后重新进行DNS解析，如果每次域名解析返回的A记录顺序会发生变化，缓存中的数据顺序也会发生变化，取到的IP也变化。</p><h1 id="缓存修改方法"><a href="#缓存修改方法" class="headerlink" title="缓存修改方法"></a>缓存修改方法</h1><ol><li>jvm启动参数里面配置-Dsun.net.inetaddr.ttl=value</li><li>修改配置文件$JDK_HOME/lib/security/java.security相应的参数networkaddress.cache.ttl=value</li><li>代码里直接设置：java.security.Security.setProperty(”networkaddress.cache.ttl” , “value”);</li></ol>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>delete-git-submodule</title>
      <link href="/2018/10/23/delete-git-submodule/"/>
      <url>/2018/10/23/delete-git-submodule/</url>
      
        <content type="html"><![CDATA[<p>删除一个submodule</p><ol><li><p>删除 .gitsubmodule中对应submodule的条目</p></li><li><p>删除 .git/config 中对应submodule的条目</p></li><li><p>执行 git rm –cached {submodule_path}。注意，路径不要加后面的“/”。例如：你的submodule保存在 theme/maupassant/ 目录。执行命令为： git rm –cached theme/maupassant </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
          <category> 问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决前端JS与后端数据交互长整型精度失真的问题</title>
      <link href="/2017/12/06/accuracy-problems-between-java-and-javascript/"/>
      <url>/2017/12/06/accuracy-problems-between-java-and-javascript/</url>
      
        <content type="html"><![CDATA[<p>在项目中采用了twitter开源的snowflake算法的id生成器，生成的id是一个long型的大数，因数值太大，通过json形式传输到前端后，在js解析时，会丢失精度。</p><a id="more"></a><p>解决办法：</p><p>将长整型的数字转为String类型传输到前端，由前端自己负责类型解析。</p><ul><li>如果使用的是Jackson工具包：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize</span>(using= ToStringSerializer.class)</span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><ul><li>如果使用Fastjson工具包：</li></ul><p>局部配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> SerializeConfig serializeConfig = <span class="keyword">new</span> SerializeConfig();</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    serializeConfig.put(Long.class, <span class="keyword">new</span> ObjectSerializer() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span></span></span><br><span class="line"><span class="function">              <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">          SerializeWriter out = serializer.getWriter();</span><br><span class="line">          out.writeString(Objects.toString(object, <span class="keyword">null</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">String <span class="title">getResult</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    json.put(<span class="string">"state"</span>, state.getState());</span><br><span class="line">    json.put(<span class="string">"desc"</span>, state.getDesc());</span><br><span class="line">    json.put(<span class="string">"value"</span>, value);</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(json, serializeConfig, SerializerFeature.DisableCircularReferenceDetect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>全局配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SerializeConfig.getGlobalInstance().put(Long.class, <span class="keyword">new</span> ObjectSerializer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                SerializeWriter out = serializer.getWriter();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (fieldType == <span class="keyword">long</span>.class || fieldType == Long.class) &#123;</span><br><span class="line">                    out.writeString(Objects.toString(object, <span class="keyword">null</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>另一个方式是自己编写JSONSerializer和JSONDeserializer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongJsonSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Long value, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        String text = (value == <span class="keyword">null</span> ? <span class="keyword">null</span> : String.valueOf(value));</span><br><span class="line">        <span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</span><br><span class="line">            jsonGenerator.writeString(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongJsonDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(LongJsonDeserializer.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        String value = jsonParser.getText();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value == <span class="keyword">null</span> ? <span class="keyword">null</span> : Long.parseLong(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize</span>(using = LongJsonSerializer.class)</span><br><span class="line"><span class="meta">@JsonDeserialize</span>(using = LongJsonDeserializer.class)</span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解析 </tag>
            
            <tag> java </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Kafka,Purgatory以及多级时间轮</title>
      <link href="/2017/11/15/apache-kafka-purgatory-hierarchical-timing-wheels/"/>
      <url>/2017/11/15/apache-kafka-purgatory-hierarchical-timing-wheels/</url>
      
        <content type="html"><![CDATA[<p>原文地址：<a href="https://www.confluent.io/blog/apache-kafka-purgatory-hierarchical-timing-wheels/" target="_blank" rel="noopener">Apache Kafka, Purgatory, and Hierarchical Timing Wheels</a></p><p><img src="https://www.confluent.io/wp-content/uploads/2016/08/TimingWheels1.png" alt="Time Wheels"></p><p>Apache Kafka有一个称为“请求Purgatory”的数据结构。 这个数据结构会hold住任何尚未达到标准的成功，但又尚未造成错误的请求。 问题是：我们如何有效地跟踪群集中数以万计的的满足要求的异步请求？</p><p>Kafka实现了几个不能立即回应的延时请求类型。 例子：</p><ul><li><p>只有在所有同步副本已经确认写入之后，acks = all的产生请求才能被认为是完整的，并且如果领导失败，我们可以保证它不会丢失。</p></li><li><p>对于min.bytes = 1的提取请求只有在至少有1个byte的数据能够被消费者消费时才会被回答。 这允许“长时间轮询”，使得消费者不必忙于等待检查新数据到达。</p></li></ul><p>这些请求被认为是完成的：</p><p>（a）他们所要求的标准完成<br>（b）或者发生一些超时</p><p>时刻增长这些异步操作的数量与连接的数量成比例，对于Kafka来说，这往往是成千上万的连接数量。</p><p>请求Purgatory被设计用于如此大规模的请求处理，但是旧的实现有一些缺陷。</p><p>在这个博客中，我想解释一下旧执行的问题以及新实现如何解决这个问题。 我也将呈现基准测试结果。</p><a id="more"></a><h1 id="旧的Purgatory的设计"><a href="#旧的Purgatory的设计" class="headerlink" title="旧的Purgatory的设计"></a>旧的Purgatory的设计</h1><p>请求purgatory包括一个超时计时器和事件驱动处理的观察者列表哈希映射。 如果一个请求的条件得不到满足而不能马上满足，就需要把它放入Purgatory中。 当条件满足时，Purgatory中的请求会被完成，或者当超过请求的超时参数指定的时间时被强制完成（超时）。 在旧的设计中，它使用Java DelayQueue来实现定时器。</p><p>当请求完成时，请求不会立即从定时器或观察者列表中删除。 相反，完成的请求会在条件检查期间被删除。 当删除不跟上时，服务器可能会耗尽JVM堆并导致OutOfMemoryError。</p><p>为了缓解这种情况，一个单独的线程（称为收割者线程）在Purgatory中的请求数量（挂起或已完成）超过配置的数量时，清除Purgatory中完成的请求。 清除操作扫描定时器队列和所有观察者列表以找到完成的请求并删除它们。</p><p>通过将此配置参数设置为较低值，服务器可以表面上避免内存问题。 但是，如果服务器太频繁地扫描所有列表，则会付出比较大的性能损失。</p><h1 id="新Purgatory的设计"><a href="#新Purgatory的设计" class="headerlink" title="新Purgatory的设计"></a>新Purgatory的设计</h1><p>新设计的目标是允许立即删除已完成的请求，并显着减少昂贵的清除过程的负担。 它需要交叉引用定时器和请求中的条目。 此外，强烈希望具有O(1)插入/删除成本，因为每个请求/完成都会发生插入/删除操作。</p><p>为了满足这些要求，我们设计了一个基于分级时间轮的新的Purgatory实现[1]。</p><h2 id="分级时间轮"><a href="#分级时间轮" class="headerlink" title="分级时间轮"></a>分级时间轮</h2><p>大小为n的定时轮具有n个时段，并且可以在n <em> u个时间间隔内保持定时器任务。每个桶包含落在相应时间范围内的定时器任务。首先，第一个桶保存[0，u]的任务，第二个桶保存[u </em>（n-1），u <em> n）中的[u，2u），…，第n个桶的任务。每一个时间间隔单位u，计时器滴答并移动到下一个桶，然后终止所有计时器任务。所以，定时器从不在当前时间插入任务，因为它已经过期了。计时器立即运行过期的任务。因此，如果当前时间段为时间t，则在空闲时间之后，空的时间段将成为[t + u </em> n，t +（n + 1）* u）的时间段。定时轮具有O（1）插入/删除（启动定时器/停止定时器）的开销，而基于优先级队列的定时器（例如java.util.concurrent.DelayQueue和java.util.Timer）具有O（log n）插入/删除成本。请注意，DelayQueue或Timer都不支持随机删除。</p><img src="/2017/11/15/apache-kafka-purgatory-hierarchical-timing-wheels/TimingWheels1.png"><p>一个简单的时间轮的一个主要缺点是它假定一个定时器请求在距当前时间n <em> u的时间间隔内。如果一个定时器请求超出这个时间间隔，这是一个溢出。分层的时间轮处理这种溢出。这是一个分层组织的时间轮代表溢出到上层轮子。最底层有最好的时间分辨率。时间分辨率越来越粗糙，如果某一级的轮子的分辨率为u，大小为n，则分辨率应该是第二级的n </em> u，第三级的n2 * u，依此类推。在每个级别，溢出都被委托给高一级的车轮。当较高级别的轮子时间到达时，它将计时器任务重新插入较低级别。高一级的时间轮可以按需创建。当溢出存储桶中的存储桶到期时，其中的所有任务将被递归地重新插入定时器。然后任务被移动到更精细的轮子或被执行。插入（启动定时器）的开销是O（m），其中m是车轮的数量，通常与系统中的请求数量相比非常小，并且删除（停止计时）的开销仍然是O（1 ）。</p><img src="/2017/11/15/apache-kafka-purgatory-hierarchical-timing-wheels/TimingWheels2.png"><h2 id="双向链轮列表中的时间轮桶"><a href="#双向链轮列表中的时间轮桶" class="headerlink" title="双向链轮列表中的时间轮桶"></a>双向链轮列表中的时间轮桶</h2><p>在新的设计中，我们使用自己的双向链表来实现时序轮中的桶。 双向链表的优点是它允许O（1）插入/删除一个列表项，如果我们有访问链表单元的话。</p><p>计时器任务实例在排队到计时器队列时将链接单元保存在自身中。 任务完成或取消时，使用保存在任务本身中的链接单元更新列表。</p><h2 id="使用DelayQueue驱动时钟"><a href="#使用DelayQueue驱动时钟" class="headerlink" title="使用DelayQueue驱动时钟"></a>使用DelayQueue驱动时钟</h2><p>一个简单的实现可以使用一个线程，唤醒每个单位时间，并做滴答，检查是否有任何任务在桶中。 Purgatory的单位时间是1ms（u = 1ms）。 如果最低级别的请求稀疏，这可能是浪费的。 通常情况下是这样的，因为大多数请求在插入最低级别的车轮之前是满足的。 如果一个线程只有在非空的存储桶过期才会唤醒，那将会很好。 新的Purgatory通过使用java.util.concurrent.DelayQueue类似于旧的实现，但是我们排队任务桶而不是单独的任务。 这种设计具有性能优势。 DelayQueue中的项目数量以桶的数量为上限，通常远小于任务数量，因此DelayQueue内的优先级队列的offer/poll操作的数量将显着减少。</p><h2 id="清除watch列表"><a href="#清除watch列表" class="headerlink" title="清除watch列表"></a>清除watch列表</h2><p>在旧的实现中，观察者列表的清除操作由总大小触发。问题是，即使没有太多请求清除，观察者列表也可能会超出阈值。发生这种情况时，会增加很多CPU负载。理想情况下，清除操作应该由观察者列出的已完成请求的数量触发。</p><p>在新设计中，已经完成的请求立即以O（1）成本从定时器队列中移除。这意味着任何时候定时器队列中的请求数量是待处理请求数量。因此，如果我们知道Purgatory中不同请求的总数，包括未决请求数量和已完成但仍然监视的数量的总和，我们可以避免不必要的清除操作。跟踪Purgatory中不同请求的确切数量是不太现实的，因为一个请求可能被监视，也可能不被监视，状态可能只在一瞬间变换。在新设计中，我们只粗略预估Purgatory中的请求总数，而不是试图维持正确的数量统计。</p><p>估计的请求数量按以下保持：</p><ul><li>估计的请求总数E会随着新的请求被监视而增加。</li><li>在开始清除操作之前，我们将估计的总请求数重置为定时器队列的大小。这是当前的待处理请求的数量。如果在清除期间没有任何请求被添加到Purgatory，则E是清除后正确的请求数量。</li><li>如果清除过程中某些请求被添加到Purgatory，则E增加到E+新观察请求的数量。这可能被高估，因为有可能在清除操作期间完成一些新的请求并从观察者列表中删除。我们预计高估和高估的可能性很小。</li></ul><h1 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h1><p>我们比较了两个Purgatory实施的入队表现，旧的实施和新的实施。这是一个微观基准。它只是衡量Purgatory入队的表现。Purgatory与系统的其他部分分离，并使用一个没有用处的测试要求。因此，真实系统中Purgatory的吞吐量可能会低于测试所显示的数量。</p><p>在测试中，请求的间隔假定遵循指数分布。每个请求都需要从对数正态分布中抽取一段时间。通过调整对数正态分布的形状，我们可以测试不同的超时率。</p><p>刻度大小为1ms，轮子大小为20.超时设置为200ms。请求的数据大小是100字节。对于较低的超时率情况，我们选择75%均线 = 60ms和50%均线 = 20。对于高超时率情况，我们选择75%均线 = 400ms和50%均线 = 200ms。总共有100万个请求在每次运行中排队。</p><p>请求由一个单独的线程主动完成。应该在超时之前完成的请求被排队到另一个DelayQueue。而一个单独的线程保持轮询并完成它们。实际完成时间无法保证准确性。</p><p>JVM堆大小设置为200M来重现内存紧张的情况。</p><p>结果表明，高排队率区域有显着差异。随着目标机率的提高，两种实施方式都能满足要求。然而，在低超时的情况下，旧的实现极限大约40000 RPS（请求每秒），而新的实现并没有显示任何显着的性能下降，在高超时的情况下，旧的实现极限大约25000 RPS，而新的实现在这个基准测试中达到了105000 RPS。</p><img src="/2017/11/15/apache-kafka-purgatory-hierarchical-timing-wheels/enq_rate.png"><p>另外，在新的实现中CPU的使用情况要好得多。 请注意，由于可伸缩性的限制，旧的实现没有高于〜40000 RPS的数据点。 同时也注意到它的CPU时间在1.2左右饱和，而在新的实现中稳步上升。 这表明旧的实现可能由于同步而遇到并发问题。</p><img src="/2017/11/15/apache-kafka-purgatory-hierarchical-timing-wheels/cms_time.png"><p>最后，我们测量了ParNew收集和CMS收集的总GC时间（毫秒）。 旧的设计和新的设计在维持的入队率没有太大差别。 再次注意，由于可伸缩性限制，旧的实现没有高于〜40000 RPS的数据点。</p><img src="/2017/11/15/apache-kafka-purgatory-hierarchical-timing-wheels/parnew_time.png"><img src="/2017/11/15/apache-kafka-purgatory-hierarchical-timing-wheels/cms_time.png"><h1 id="概要总结"><a href="#概要总结" class="headerlink" title="概要总结"></a>概要总结</h1><p>在新设计中，我们使用多级时间轮作为定时器桶的超时定时器和DelayQueue按需提前时钟。 O（1）成本立即从计时器队列中删除已完成的请求。 桶仍然在延迟队列中，但桶的数量是有限的。 而且，在一个健康的系统中，大多数请求应该在超时之前完成，并且在离开延迟队列之前许多桶变空了。 因此，计时器应该很少有较低间隔的桶。 这种设计的优点是，定时器队列中的请求数量是任何时候的待处理请求数量。 这使我们能够估计需要清除的请求数量。 我们可以避免观察者列表的不必要的清除操作。 因此，我们在请求速率方面实现了更高的可扩展性，CPU使用率更高。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[1] <a href="http://www.cs.columbia.edu/~nahum/w6998/papers/ton97-timing-wheels.pdf" target="_blank" rel="noopener">George Varghese , Anthony Lauck, Hashed and hierarchical timing wheels: efficient data structures for implementing a timer facility, IEEE/ACM Transactions on Networking (TON), v.5 n.6, p.824-834, Dec. 1997</a></p>]]></content>
      
      
      <categories>
          
          <category> 翻译文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> timewheels </tag>
            
            <tag> timer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hash和多级时间轮：实现定时器的高效数据结构</title>
      <link href="/2017/11/15/hashed-and-hierarchical-timing-wheels/"/>
      <url>/2017/11/15/hashed-and-hierarchical-timing-wheels/</url>
      
        <content type="html"><![CDATA[<p>原文地址：<a href="https://blog.acolyer.org/2015/11/23/hashed-and-hierarchical-timing-wheels/" target="_blank" rel="noopener">Hashed and Hierarchical Timing Wheels: Data Structures for the Efficient Implementation of a Timer Facility</a></p><p>Yashiro Matsuda最近写了一篇博文<a href="http://www.confluent.io/blog/apache-kafka-purgatory-hierarchical-timing-wheels" target="_blank" rel="noopener">Apache Kafka’s use of Hierarchical Timing Wheels</a> 用于监控大量的延时操作。 在Kafka用例中，每个请求都处于“Purgatory”数据结构中，并且与事件驱动处理的超时计时器和观察者列表图相关联。 有效跟踪到期定时器是一个常见问题。 这个原则可以适用于任何跟踪未完成的请求或延时消息系统。</p><p>今天的选择是Varghese和Lauck在1987年发表的一篇论文，他们在这篇论文中研究了一些有效管理定时器的方法，并介绍了Kafka所使用的分层定时轮的概念。 他们将定时器建模为两个面向用户的操作，即启动和停止，以及两个内部操作：每个滴答步进和过期处理。</p><ul><li><p>启动计时器由客户端调用，指定一个计时器持续时间和一个回调。在作者的模型中，客户端还传入一个请求ID来区分计时器，但是现在我们更倾向于返回一个计时器ID来响应启动计时器的请求。</p></li><li><p>停止定时器接收一个请求（定时器）ID，并找到并停止（删除）相关的定时器。</p></li><li><p>在计时器时钟的每个“滴答声”上都会发生清算。如果设置定时器的粒度单位是T个单位时间（例如1秒），则每T个单位时间将发生一个清算。它检查是否有任何未完成的定时器已经过期，如果是则删除它们并调用过期处理。</p></li><li><p>到期处理负责调用用户提供的回调（或其他用户请求的操作，具体取决于您的模型）。</p></li></ul><p>不同的数据结构和算法在执行这些操作的成本方面有不同的复杂性（例如，启动一个定时器是一个恒定的时间操作，取决于现有定时器的数量，或者甚至是一些其他变量？）。 我们有七种不同的计时器管理方案，指导方针是“对于一个普通的定时器模块，这个模块预计在各种环境下都能正常工作，我们推荐方案6或7”。方案6是“散列定时轮”和方案7是“分层定时轮”。</p><a id="more"></a><p>让我们来看看这些方案：</p><h1 id="1-无序列表的定时器"><a href="#1-无序列表的定时器" class="headerlink" title="1.无序列表的定时器"></a>1.无序列表的定时器</h1><p>保留一个无序的列表定时器，并跟踪每个定时器的剩余时间。开始时，只需将新的计时器添加到列表中。每个“嘀嗒”周期必须遍历完整列表，并在每笔记帐中减少每个计时器的剩余时间。如果一个定时器到达零，它将从列表中删除，并调用过期处理。<br>因此启动一个定时器是O（1），停止一个定时器是O（1），并且每个滴答处理是O（n），其中n是未完成定时器的数量。</p><h1 id="2-有序列表计时器"><a href="#2-有序列表计时器" class="headerlink" title="2.有序列表计时器"></a>2.有序列表计时器</h1><p>保留方案1中的列表定时器，但记录绝对到期时间（不是剩余时间），并保持定时器列表的排序时间（定时器最接近于列表头部的到期时间）。在每个时钟周期比较列表头部的定时器的到期时间和当前的时钟，并且如果定时器的到期时间是小于当前时间，则删除到期定时器;  继续这样做这样的比较，直到列表的头部包含一个过期时间大于当前时间的计时器。由于在列表中搜索正确的位置来插入它，所以现在启动一个计时器为O（n），但是每个嘀嗒处理是O（1）。</p><h1 id="3-定时器树"><a href="#3-定时器树" class="headerlink" title="3.定时器树"></a>3.定时器树</h1><p>对于比较大的n，我们可以通过在基于tree的数据结构中保留定时器来改进方案2。 这意味着我们可以在O(log(n))内为有序列表插入（启动）定时器。</p><h1 id="4-简单的时间轮"><a href="#4-简单的时间轮" class="headerlink" title="4.简单的时间轮"></a>4.简单的时间轮</h1><p>当所有定时器的最大周期不超过MaxInterval时，简单的定时轮的方法是适用的，我们可以用MaxInterval槽（每个代表一个滴答）构造一个循环缓冲区。当前时间由缓冲区中的索引表示。插入一个计时器，过期时间j(小于MaxInterval）; 在未来的MaxInterval时间单位中，我们移动环上的j个时隙，并将定时器添加到该时隙中的定时器列表中。 每次“嘀嗒”（模拟时钟，非常形象的描述了时间轮的走动），当前时间索引移动环中的一个槽，并在新槽中的所有定时器上执行到期处理。</p><p>开始，停止和每个“嘀嗒”操作都是O(1)。</p><h1 id="5-带有序定时器列表的散列轮"><a href="#5-带有序定时器列表的散列轮" class="headerlink" title="5.带有序定时器列表的散列轮"></a>5.带有序定时器列表的散列轮</h1><p>如果MaxInterval比较大（例如32位定时器），简单的定时轮就可能会使用大量的内存。 我们可以使用散列的形式而不是每时间单位使用一个插槽。 构建一个具有固定数量的槽的循环缓冲区(2的指数会比较有效率)，并且当前时间索引像以前一样在环上前进一个位置。 要插入将来会过期j个时间单位的计时器，计算一个增量时隙 s = j％num-buckets。 将定时器插入环中，并等待其到期。 由于在任何给定的时隙中可能有多个定时器，因此我们为每个时隙维护一个有序的定时器列表。每次处理时移动当前时间索引并处理在方案2中找到的定时器列表。插入定时器的最坏情况延迟是O（n），但是平均值是O（1）。 每次处理“嘀嗒”是O（1）。</p><h1 id="6-无序定时器列表的哈希轮"><a href="#6-无序定时器列表的哈希轮" class="headerlink" title="6.无序定时器列表的哈希轮"></a>6.无序定时器列表的哈希轮</h1><p>这是方案5中的一个变体，其中不是存储绝对的到期时间，而是存储每个计时器将来在遍历环的次数。 为了插入一个计时器，将来会计算一个时间单位，计算一个计数器值c = j / num-buckets和一个时隙delta s = j％num-bucket。 用计数器值c将定时器的槽插入环中。保持定时器在每个槽中的无序列表中。</p><p>现在启动一个计时器是O（1），而每个滴答簿记是最坏的情况O（n），但是O（1）是平均的。</p><h1 id="7-分级时间轮"><a href="#7-分级时间轮" class="headerlink" title="7.分级时间轮"></a>7.分级时间轮</h1><p>处理由简单的定时轮方法引起的存储器问题的另一种方式是在层次结构中使用多个定时轮。假设我们要存储第二个粒度的定时器，将来可以设置长达100天。我们可以建造四个轮子：</p><ul><li>一个“天”轮有100个插槽</li><li>一个“小时”轮有24插槽</li><li>一个“分钟”轮有60个插槽</li><li>一个“秒钟”轮有60个插槽</li></ul><p>这总共有244个插槽，总计864万个可能的计时器值。每当我们在一个轮子上完成一次完整的转动，我们就把下一个较大的轮子向前推进一个槽位（本文用分钟，小时和星期计时钟来描述一个微小的变化，但效果是一样的）。例如，当秒轮转回到索引“0”时，我们将分针轮中的索引指针移动一个位置。然后，我们把时间轮上的所有定时器（将在接下来的60秒内到期），并将它们插入到秒针轮中正确的位置。秒轮中的过期时间处理完全按照方案4中所述的方式工作（这只是一个简单的计时轮，恰好在每次旋转时得到补充）。</p><p>要插入一个计时器，找到计时器应该到期的一个或多个车轮单元的第一个车轮（从最大单位到最小）。例如，一个计时器将会在未来11小时15分15秒的时间内插入小时轮的current-index + 11时隙，用计时器存储剩余的15分15秒。在小时轮前进11个位置后，该计时器将从该轮上移除，并在分针轮中的当前索引+ 15个插槽中插入，存储剩余的15秒。当分钟轮随后前进15个位置时，该计时器将从轮中移出，并放置在秒针轮中的“当前索引+15”轮槽中。 15秒后，计时器将过期！</p><p>插入为O（n），而每个滴答簿记是最坏的情况O（n），但是O（1）是平均的。</p><p>注意：本文使用秒，分，小时，天的例子，这当然使得它很容易遵循及更容易理解和记忆，但如果你只是给定时器，例如，在未来的t秒内达到32位计时器值，那么简单地将其分成四个轮子，每个轮子有28个槽或类似的轮子（这使得确定进入哪个轮子是非常有效的）。</p><p>在方案6和7之间选择</p><p>在任何给定的情况下，方案6或7是否更好取决于许多参数：</p><ul><li>n，定时器的数量</li><li>M，可用插槽的总数</li><li>m，级别的数量（用于分级方法）</li><li>T，平均时间间隔</li></ul><p>根据方案6计算一个条目的散列和索引成本在方案7（将计时器条目移动到下一个轮子的成本）之下。</p><p>对于方案6，成本大约是n’s indexcost / M，方案7是nm’s migratecost / T。</p><p>由于costindex和costmigrate不会有很大的不同，对于较小的T值和较大的M值，方案6对于START-TIMER和PER-TICK-BOOKKEEPING都可能比方案7更好。然而，对于大的T值和小的M值，方案7对于PER-TICK-BOOKKEEPING将具有更好的平均成本（等待时间），但对于START-TIMER来说成本更高。</p>]]></content>
      
      
      <categories>
          
          <category> 翻译文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> timer </tag>
            
            <tag> timewheel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx_Session_Sticky踩坑记录</title>
      <link href="/2017/09/11/problem-analysis-of-nginx-session-sticky/"/>
      <url>/2017/09/11/problem-analysis-of-nginx-session-sticky/</url>
      
        <content type="html"><![CDATA[<h1 id="常见Session方案"><a href="#常见Session方案" class="headerlink" title="常见Session方案"></a>常见Session方案</h1><p>一个多用户的WEB系统一定离不开多用户的登录和会话保持的问题，用户登录可以通过SSO单点登录解决，但是用户的SESSION会话保持是需要一个基础设施来支撑的。对于传统的单机部署的WEB应用，SESSION会话由本机的应用服务器（tomcat/jetty/jboss）负责应用SESSION会话的保持。但是对于分布式部署的WEB应用来说，单机的会话保持显然并不能适用在这种场景下面，下面是分布式WEB应用场景时一般采取的策略：</p><ul><li>方案一：通过前端负载均衡进行SESSION_STICKY</li><li>方案二：应用服务器层SESSION同步</li><li>方案三：应用SESSION层统一管理</li></ul><a id="more"></a><p>1、对于方案一，操作简单，应用不需要进行任何设置，同一用户首次访问应用提供服务的某台服务器后，后续的访问请求会一直发往该台服务器进行处理，这里解决的就是SESSION本机存储的问题，如果采用的是SESSION本地存储，然后请求又是在多台机器之间分发，那么会造成用户不断的登录和退出，无法正常使用应用。这种方案一般在负载均衡服务器(Nginx/Apache等）上进行配置即可。</p><p>2、对于方案二，操作方式稍微比方案一要复杂，但是仍然向使用者屏蔽了使用细节。对于该方案要求后端的真实应用服务器之间要建立同步通道进行SESSION会话数据的同步，这种方案在后端真实服务器相对较少时可以采用没有太多问题，但是一旦服务器数量以及用户数量并发超过一定数量会造成网络风暴的问题。试想，一个用户的SESSION在某台服务器进行修改后要同步到所有其它服务器的SESSION管理存储上，这是一个1+N的过程，性能和网络都会无法承担这样的开销。</p><p>3、对于方案三，这是目前大型互联网公司采用的方案,如淘宝，同样对使用用户屏蔽实现细节，用户使用过程中就好像使用原生的SESSION一样。方案三采用集中式SESSION存放，应用服务器并不负责用户SESSION的管理，SESSION管理交由统一封装的SESSION框架层负责处理，SESSION框架层拦截应用服务器的SESSION存取并与SESSION存储交互获取和设置数据，这里的SESESSION的存储又分为多种方式，常见的有：缓存服务，Cookie等。一些不重要的，非关键性的用户数据可以通过SESSION框架存入Cookie中，而重要的用户数据存入远程的缓存服务中。</p><h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>我们这里有一个应用，线上会部署多台服务器，当时为了方便快速上线就采用了上面方案一的方式，在线上Nginx上配置了session_sticky，然而这正是问题的始源：</p><p>通过我们自己的APM监控系统发现在最初后端的两台服务器正常的各自分担了50%的网络流量，但是在后面的一段时间里流量会慢慢的向基中一台机器聚集，而另一台机器流量几乎降低到微乎其微。这个问题困扰了好几天，前面几天一直发现了该问题，但是一直忙于处理其它事务，今天终于有时间慢慢来分析这方面的问题。</p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>1、首先查看的Nginx的配置是否正确</p><img src="/2017/09/11/problem-analysis-of-nginx-session-sticky/FD684B9B-728E-45AA-9566-598BE2487350.png"><p>采用了SESSION_STICKY，并且两台服务器间采用一样的权重比率。没问题。</p><p>2、排查用户访问IP的问题</p><p>最开始一直认为Nginx的SESSION_STICKY是通过用户的IP进行的分流（其实后面证明我的想法是错的），所以想到的是查找用户访问的IP，通过询问运维，得到的结论是用户都是通过内网统一一个IP访问，这里有一个误导，导致我认为这就是导致该问题的原因。如果真是按IP对用户进行分流切分的话，那如何解释之前可以平均分配流量的问题呢？我一直在不停的反问我自己。</p><p>3、在多个不同用户的机器上重现问题</p><p>我使用了多个同事的电脑进行操作以及查看资料，发现Nginx的SESSION_STICKY是通过Nginx反写cookie实现的，通过查看多个同事的浏览器cookie，我发现了这个cookie：route=739d4e2d09f01c606bc43936e6e743e3; 基本上是所有的同事浏览器cookie都是一样的，这也应验了为什么基本上的流量都会往一台机器上发送了。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>既然有了上面的问题排查，那么最重要的一个问题就落在了为什么不同的用户会产生同样的cookie呢，我试着将我自己的电脑上的cookie清空，然后再重新登录，再查看该cookie值。重复这样几次后，我发现均衡正常了，可以按一定的比率会话分别粘滞在两台机器上。同时我也仔细翻看了Nginx的SESSION_STICKY说明，其中有一条也让我恍然大悟：Nginx SESSION_STICKY产生的cookie是根据配置按后端可用的upstream服务器中的一台的IP通过MD5加密（或明文，可配置）后得到的一串数字，而并非是由前端的IP决定。</p><p>NGINX SESSION_STICKY 原理：</p><img src="/2017/09/11/problem-analysis-of-nginx-session-sticky/sticky0.jpg"><img src="/2017/09/11/problem-analysis-of-nginx-session-sticky/sticky1.png"><p>这里导致上面的问题的原因慢慢的开始浮出水面：</p><p>1、为什么Cookie是一直不变的？</p><p>原因是大部分的同事都是使用笔记本，特别是大部分人都是MacPro控，所以对于他们来说，工作或者下班时是重来不需要关闭电脑的，电脑一合就走人，所以浏览器是一直打开的未关闭过，这种情况也在部分使用台式机的同事存在，也是下班电脑睡眠就走人，并未关闭浏览器。对于route这个cookie是浏览器关闭才会失效，所以一直开启的浏览器时该cookie会一直有效。</p><p>2、为什么基本上的同事的Cookie都是一样的？</p><p>这个问题就要从应用的发布说起了。我们的发布流程是灰度发布过程，在应用发布时是一台一台的发布的，总共两台机器，其中第一台的发布的过程中大量的请求被定向到另一台机器，而第一台发布完成时流量并不会切换回来，因为新产生的cookie已经是第二台机器的cookie，并且该cookie是一直有效的，除非有人为的手动关闭整个浏览器。这就解释了为什么应用在第一次上线时是流量均衡的，但是一旦后面上线过后流量变成只向其中一台聚集的情况，这也是使用Nginx Session_Sticky的一个问题。</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>问题解决方案其实已经在上面第一段内容提及了，实现会话保持的三个方案中，选择其中一个，对于我们之前使用的第一种方案，其实有相应的缓解方式，就是增开几台机器，让流量在发布的时候也分布到其它机器，只是在我们的场景下，只有两台机器，当发布进行时，所有的流量都汇聚到其中一台上，以后也固化到这台访问了。如果将机器扩充多一些，那么在一台机器发布时，流量会分担到其它机器，整个集群相对来说还是比较均衡的（其中只有一台没啥流量，相当于是浪费一台机器），能保证整体流量在N-1台机器上均衡（N为应用机器总量）。</p><p>我们解决的方式是使用方案三，使用外置的Session会话存储的方案。这里我们可以自己写一套Session管理的框架，但是介于开源世界已经有实现方案了，比如Spring的session方案。于是我们的方案就是基于此来做改造。我们使用spring session框架，基于redis集群的会话保持方案改造了自己的应用，非常简单快速的实现了session的外置存储支持，以及应用的无状态化。基于此，nginx的session_sticky配置也可以去掉了，应用也可以很好的扩容了。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode算法3_最长无重复子串长度</title>
      <link href="/2017/09/07/leetcode-3-longest-substring-without-repeating-characters/"/>
      <url>/2017/09/07/leetcode-3-longest-substring-without-repeating-characters/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>给定一个字符串，找到最长子串的长度，而不重复字符。</p></blockquote><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>给定“abcabcbb”，答案是“abc”，长度为3。</p><p>给定“bbbbb”，答案是“b”，长度为1。</p><p>给定“pwwkew”，答案是“wke”，长度为3.请注意，答案必须是子字符串，“pwke”是子序列而不是子字符串。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>利用滑动窗口思想，滑动窗口内的字符将不会重复，滑动窗口利用两个索引i,j分别指向窗口的前后界限，通过分别移动i，j指针来寻求最大子串长度。</p><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><h2 id="方法＃1-暴力方式-超时"><a href="#方法＃1-暴力方式-超时" class="headerlink" title="方法＃1 暴力方式[超时]"></a>方法＃1 暴力方式[超时]</h2><ul><li>思路</li></ul><p>检查所有子字符串逐个查看是否没有重复的字符。</p><ul><li>算法</li></ul><p>假设我们有一个函数boolean allUnique（String substring），如果子字符串中的字符都是唯一的，否则返回true，否则为false。我们可以遍历给定字符串s的所有可能的子字符串，并调用allUnique函数。如果事实证明是正确的，那么我们更新我们的子字符串的最大长度的答案，而不会有重复的字符。</p><p>现在我们填写缺失的部分：</p><p>要枚举给定字符串的所有子字符串，我们枚举它们的开始和结束索引。假设开始和结束指数分别为i和j。那么我们有0 &lt;= i &lt; j &lt;=n（这里的结束索引j按照惯例排除）。因此，使用从0到n-1的i的两个嵌套循环和从i + 1到n的j，我们可以枚举s的所有子串。</p><p>要检查一个字符串是否有重复的字符，我们可以使用一个字符串。我们遍历字符串中的所有字符，并将它们逐个放入。在放置一个字符之前，我们检查该集合是否已经包含它。如果是这样，我们返回false。循环后，我们返回true。</p><ul><li>Javaw代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> lengthOfLongestSubstring（String s）&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length（）;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>（<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n; i ++）</span><br><span class="line">            <span class="keyword">for</span>（<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++）</span><br><span class="line">                <span class="keyword">if</span>（allUnique（s，i，j））ans = Math.max（ans，j-i）;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> allUnique（String s，<span class="keyword">int</span> start，<span class="keyword">int</span> end）&#123;</span><br><span class="line">        set &lt;Character&gt; set = <span class="keyword">new</span> HashSet &lt;&gt;（）;</span><br><span class="line">        <span class="keyword">for</span>（<span class="keyword">int</span> i = start; i &lt;end; i ++）&#123;</span><br><span class="line">            Character ch = s.charAt（i）;</span><br><span class="line">            <span class="keyword">if</span>（set.contains（ch））<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            set.add（ch）;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>复杂性分析</li></ul><p>时间复杂度：O（n ^ 3）</p><p>空间复杂度：O（min（n，m））O（min（n，m））。我们需要O（k）空格用于检查子串没有重复字符，其中k是Set的大小。集合的大小由字符串n的大小和字符集/字母表m的大小限定。</p><h2 id="方法＃2滑动窗口-已接受"><a href="#方法＃2滑动窗口-已接受" class="headerlink" title="方法＃2滑动窗口[已接受]"></a>方法＃2滑动窗口[已接受]</h2><ul><li>算法</li></ul><p>上面算法一方法非常简单。但是太慢了那么我们如何才能优化呢？</p><p>在上面的方法中，我们反复检查一个子字符串，看看它是否具有重复的字符。但这是没有必要的。如果一个子字符串s[i,j）是从索引i到j-1已经被检查为没有重复的字符。我们只需要检查s[j]是否已经在子串s[i,j)中。要检查字符是否已经在子字符串中，我们可以扫描子字符串，导致O（n ^ 2）算法。但我们可以做得更好。</p><p>通过使用HashSet作为滑动窗口，检查当前的字符是否可以在O（1）中完成。</p><p>滑动窗口是数组/字符串问题中常用的抽象概念。窗口是数组/字符串中通常由开始和结束索引定义的元素范围，即[i，j)（左闭合，右开）。滑动窗口是一个窗口，将其两个边界滑动到某个方向。例如，如果我们通过一个元素将[i，j）向右滑动，则它变为[i + 1，j + 1）（左闭右开）。</p><p>回到我们的问题。我们使用HashSet将字符存储在当前窗口[i，j）（j = i）。然后我们将索引j向右滑动。如果不在HashSet中，我们会进一步滑动j。这样做直到s[j]已经在HashSet中。在这一点上，我们发现没有重复字符的子字符串的最大大小从索引i开始。重复上面的步骤，我们就能得到我们的答案。</p><ul><li><p>Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">            <span class="keyword">if</span> (!set.contains(s.charAt(j)))&#123;</span><br><span class="line">                set.add(s.charAt(j++));</span><br><span class="line">                ans = Math.max(ans, j - i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                set.remove(s.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复杂性分析</p></li></ul><p>时间复杂度： O(2n) = O(n)。最糟糕的情况是每个字符都需要被i,j指针访问两次。<br>空间复杂度： O(min(m,n))。 和上面的方案一样，我们同样需要一个O(k)的空间用于滑动窗口，k表示滑动窗口大小。这个大小取决于字符串n的大小以及字符集的大小m</p><h2 id="方法＃3滑动窗优化-已接受"><a href="#方法＃3滑动窗优化-已接受" class="headerlink" title="方法＃3滑动窗优化[已接受]"></a>方法＃3滑动窗优化[已接受]</h2><p>上述方法2中解决方案最多需要2n步。 事实上，它可以被优化，只需要n个步骤。 我们可以定义一个字符与其索引的映射，而不是使用一个字符来判断一个字符是否存在。 然后，当我们发现重复的字符时，我们可以立即跳过这些字符。</p><p>原因是如果s[j]在索引j的范围[i，j）中具有重复，重复的这个索引为j’，我们不需要一点一点地增加i。 我们可以跳过[i，j’]范围内的所有元素,直接令i=j’+ 1。</p><ul><li>Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// current index of character</span></span><br><span class="line">        <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s.charAt(j))) &#123;</span><br><span class="line">                i = Math.max(map.get(s.charAt(j)), i);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">            map.put(s.charAt(j), j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更优代码</li></ul><p>假设字符集为ASCII 128</p><p>以前的实现都没有对字符串的字符集的假设。</p><p>如果我们知道字符集相当小，我们可以将整数数组替换为直接访问表。</p><p>常用的表格有：</p><ul><li>int[26] 用于’a’-‘z’以及’A’-‘Z’</li><li>int[128] 用于ASCII集</li><li>int[256] 用于ASCII扩展集</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>]; <span class="comment">// current index of character</span></span><br><span class="line">        <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            i = Math.max(index[s.charAt(j)], i);</span><br><span class="line">            ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">            index[s.charAt(j)] = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>复杂度分析</li></ul><p>时间复杂度：O(n)<br>Hashmap空间复杂度：O(min(m,n))<br>Table方式空间复杂度：O(m) m表示字符集的大小</p><p>原文地址：<a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="noopener">Longest Substring Without Repeating Characters</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode算法4_两排序数组求中位平均数</title>
      <link href="/2017/09/07/leetcode-4-median-of-two-sorted-arrays/"/>
      <url>/2017/09/07/leetcode-4-median-of-two-sorted-arrays/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>有两个排序的数组nums1和nums2分别为m和n大小。</p><p>找到两个排序数组的中位数。 整体运行时间复杂度应为O（log（m + n））。</p><p>示例1：<br>nums1 = [1,3]<br>nums2 = [2]</p><p>中位数为2.0<br>示例2：<br>nums1 = [1,2]<br>nums2 = [3,4]</p><p>中位数为（2 + 3）/ 2 = 2.5</p><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>本题中的中位数是指对于一个长度为n的数组，如果n为偶数，则中位数为下标为n/2和n/2+1的两数相加取平均值；如果n为奇数，则中位数为下标为n/2+1的数。</p><p>对于两个数组，我们知道合并成一个数组后，同样适用上面的方式。所以我们可以根据上面的描述确定对于两个数组遍历得到的中位数下标，同时我们定义一个计数器，以确定在按序遍历时的计数，当计数与我们确定的中位数下标达到一致状态时，即可确定我们的中位数。</p><p>本题中主要关注已排序这个前提条件，我们可以使用两个指针分别指向两个数组的头部（数组下标为0的位置），两个指针对应的数进行比较得出较小值，将计数器与预计算的中位数的下标进行对比，判断是否达到中位数下标，最后累加计数器。</p><h1 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> idx1 = <span class="number">0</span>,idx2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> idx1Max = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> idx2Max = nums2.length;</span><br><span class="line">        <span class="keyword">int</span> total = idx1Max + idx2Max;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] middles = (total % <span class="number">2</span>) == <span class="number">0</span> ? (<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;total / <span class="number">2</span>,total / <span class="number">2</span> + <span class="number">1</span>&#125; ) : (<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;total / <span class="number">2</span> + <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> median = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(idx1 &lt; idx1Max || idx2 &lt; idx2Max)&#123;</span><br><span class="line">            <span class="keyword">if</span>(idx1 &lt; idx1Max &amp;&amp; idx2 &lt; idx2Max)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[idx1] &gt; nums2[idx2])&#123;</span><br><span class="line">                    num = nums2[idx2];</span><br><span class="line">                    idx2++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    num = nums1[idx1];</span><br><span class="line">                    idx1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(idx1 &gt;= idx1Max &amp;&amp; idx2 &lt; idx2Max)&#123;</span><br><span class="line">                num = nums2[idx2];</span><br><span class="line">                idx2++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(idx1 &lt; idx1Max &amp;&amp; idx2 &gt;= idx2Max)&#123;</span><br><span class="line">                num = nums1[idx1];</span><br><span class="line">                idx1++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"can't reach here"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(middles.length == <span class="number">1</span> &amp;&amp; counter == middles[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">double</span>) num;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(middles.length == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(counter == middles[<span class="number">0</span>])&#123;</span><br><span class="line">                    median += num;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(counter == middles[<span class="number">1</span>])&#123;</span><br><span class="line">                    median += num;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="keyword">double</span>) median / <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            counter++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>空间复杂度：O（1），没有使用额外的空间用于计算，只有一些变量值，空间忽略。<br>时间复杂度：O(log(m+n))，因在一般情况下对于两个数组基本确定在遍历到一半的情况下都能找到结果，故在m+n两数组总长度与计算耗时上存在2的倍数关系，故为O(log(m+n))。</p><p>原文地址：<a href="https://leetcode.com/problems/median-of-two-sorted-arrays/description/" target="_blank" rel="noopener">4. Median of Two Sorted Arrays</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode算法题2_两数相加</title>
      <link href="/2017/09/06/leetcode-2-add-two-numbers/"/>
      <url>/2017/09/06/leetcode-2-add-two-numbers/</url>
      
        <content type="html"><![CDATA[<p>给定两个非空的链表，表示两个非负整数。 数字以相反的顺序存储，每个节点包含一个数字。 添加两个数字并将其作为链表返回。</p><p>您可以假设两个数字不包含任何前导零，除了数字0本身。</p><a id="more"></a><p>思路：</p><p>参考常规的两数相加算式以及进位思想，两数相加与10相除得到该位相加后数值，两数相加与10取余得到该位相加后进位数。</p><p>方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ListNode root = <span class="keyword">null</span>;</span><br><span class="line">        ListNode parent = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode n1 = l1;</span><br><span class="line">        ListNode n2 = l2;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n1 == <span class="keyword">null</span> &amp;&amp; n2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//在此情况下两个数各个位数都已经相加完成，只剩最后的进位数</span></span><br><span class="line">                <span class="keyword">if</span>(carry != <span class="number">0</span>)&#123;</span><br><span class="line">                    ListNode child = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">                    parent.next = child;</span><br><span class="line">                    parent = child;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n1 != <span class="keyword">null</span> &amp;&amp; n2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                val = n1.val + n2.val + carry;</span><br><span class="line">                carry = val / <span class="number">10</span>;</span><br><span class="line">                val = val % <span class="number">10</span>;</span><br><span class="line">                n1 = n1.next;</span><br><span class="line">                n2 = n2.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n1 == <span class="keyword">null</span> &amp;&amp; n2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                val = n2.val + carry;</span><br><span class="line">                carry = val / <span class="number">10</span>;</span><br><span class="line">                val = val % <span class="number">10</span>;</span><br><span class="line">                n1 = <span class="keyword">null</span>;</span><br><span class="line">                n2 = n2.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n1 != <span class="keyword">null</span> &amp;&amp; n2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                val = n1.val + carry;</span><br><span class="line">                carry = val / <span class="number">10</span>;</span><br><span class="line">                val = val % <span class="number">10</span>;</span><br><span class="line">                n1 = n1.next;</span><br><span class="line">                n2 = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">                root = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">                parent = root;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ListNode child = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">                parent.next = child;</span><br><span class="line">                parent = child;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文地址：<a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="noopener">2. Add Two Numbers</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode算法题167_两数之和（II）</title>
      <link href="/2017/09/06/leetcode-two-sum-part-2/"/>
      <url>/2017/09/06/leetcode-two-sum-part-2/</url>
      
        <content type="html"><![CDATA[<p>给定一个已经按升序排序的整数数组，找到两个数字，使它们相加到一个特定的目标数。</p><p>函数twoSum应该返回两个数字的索引，使它们相加到目标，其中index1必须小于index2。 请注意，您返回的答案（index1和index2）都不是基于零的。</p><p>您可以假设每个输入都将具有一个解决方案，您可能不会使用相同的元素两次。</p><p>输入：numbers = {2，7，11，15}，target = 9<br>输出：index1 = 1，index2 = 2</p><a id="more"></a><p>方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; indexMap = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;++i)&#123;</span><br><span class="line">            indexMap.put(numbers[i],i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;++i)&#123;</span><br><span class="line">            Integer idx = indexMap.get(target-numbers[i]);</span><br><span class="line">            <span class="keyword">if</span>(idx != <span class="keyword">null</span> &amp;&amp; i != idx)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i+<span class="number">1</span>,idx+<span class="number">1</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题同时可见：<a href="/leetcode-two-sum/">leetcode算法题1_两数之和</a></p><p>原文地址：<a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/" target="_blank" rel="noopener">https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode算法题653_两数之和（IV）</title>
      <link href="/2017/09/06/leetcode-two-sum-part-4/"/>
      <url>/2017/09/06/leetcode-two-sum-part-4/</url>
      
        <content type="html"><![CDATA[<p>给定二进制搜索树和目标数字，如果BST中存在两个元素，使得它们的和等于给定的目标，则返回true。</p><p>Example 1:</p><p>Input:</p><pre><code>   5   / \  3   6 / \   \2   4   7</code></pre><p>Target = 9</p><p>Output: True</p><p>Example 2:</p><p>Input:</p><pre><code>   5   / \  3   6 / \   \2   4   7</code></pre><p>Target = 28</p><p>Output: False</p><a id="more"></a><p>方案：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findTarget</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> traval(root,root,k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 进行遍历，root用于在遍历和搜索中透传，node为要遍历的节点，k为target值</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">travel</span><span class="params">(TreeNode root,TreeNode node, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(searchVal(root,node,k-node.val)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(travel(root,node.left,k))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(travel(root,node.right,k))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 搜索node节点及其子节点中是否有值和val相等，并且节点不为src</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchVal</span><span class="params">(TreeNode node,TreeNode src, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(node.val == val &amp;&amp; node != src) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(val &gt; node.val &amp;&amp; node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> searchVal(node.right,src,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(val &lt; node.val &amp;&amp; node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> searchVal(node.left,src,val);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 原文地址：<a href="https://leetcode.com/problems/two-sum-iv-input-is-a-bst/description/" target="_blank" rel="noopener">Two Sum IV - Input is a BST</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode算法题1_两数之和</title>
      <link href="/2017/09/06/leetcode-two-sum/"/>
      <url>/2017/09/06/leetcode-two-sum/</url>
      
        <content type="html"><![CDATA[<p>给定一个整型数组，以及一个目标数值V，要求返回两个能够相对等于V值的两个数字的索引序列。每个数字只能使用一次。</p><p>例子：<br>`<br>Given nums = [2, 7, 11, 15], target = 9,</p><p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].<br>`</p><a id="more"></a><p>方案：暴力运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>((nums[i] + nums[j]) == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(n*n)，空间复杂度O(n)</p><p>扩展方案：带索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; indexMap = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;++i)&#123;</span><br><span class="line">            indexMap.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;++i)&#123;</span><br><span class="line">            Integer idx = indexMap.get(target-nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(idx != <span class="keyword">null</span> &amp;&amp; i != idx)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,idx&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(n)，空间复杂度O(n)</p><p>注：该种方法有一定问题，前提需要加强条件：序列中没有重复的数字。不然该indexMap会被冲突覆盖</p><p>如：<br>Input:  [0,4,3,0] 0<br>Output：null<br>Expected: [0,3]</p><p>原文地址：<a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="noopener">https://leetcode.com/problems/two-sum/description/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写好一个Git Commit Message</title>
      <link href="/2017/08/20/how-to-write-a-git-message/"/>
      <url>/2017/08/20/how-to-write-a-git-message/</url>
      
        <content type="html"><![CDATA[<p>原文地址：<a href="https://chris.beams.io/posts/git-commit/" target="_blank" rel="noopener">How to Write a Git Commit Message</a></p><h1 id="介绍：为什么好的提交信息很重要"><a href="#介绍：为什么好的提交信息很重要" class="headerlink" title="介绍：为什么好的提交信息很重要"></a>介绍：为什么好的提交信息很重要</h1><p>如果您随机浏览一个Git存储库的日志，您可能会发现其提交消息或多或少是一团糟。 例如，从早期的Spring提交日志来看这些问题点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log --oneline -5 --author cbeams --before "Fri Mar 26 2009"</span><br><span class="line"></span><br><span class="line">e5f4b49 Re-adding ConfigurationPostProcessorTests after its brief removal in r814. @Ignore-ing the testCglibClassesAreLoadedJustInTimeForEnhancement() method as it turns out this was one of the culprits in the recent build breakage. The classloader hacking causes subtle downstream effects, breaking unrelated tests. The test method is still useful, but should only be run on a manual basis to ensure CGLIB is not prematurely classloaded, and should not be run as part of the automated build.</span><br><span class="line">2db0f12 fixed two build-breaking issues: + reverted ClassMetadataReadingVisitor to revision 794 + eliminated ConfigurationPostProcessorTests until further investigation determines why it causes downstream tests to fail (such as the seemingly unrelated ClassPathXmlApplicationContextTests)</span><br><span class="line">147709f Tweaks to package-info.java files</span><br><span class="line">22b25e0 Consolidated Util and MutableAnnotationUtils classes into existing AsmUtils</span><br><span class="line">7f96f57 polishing</span><br></pre></td></tr></table></figure><p>与同一存储库中的这些最近的提交进行比较：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log --oneline -5 --author pwebb --before "Sat Aug 30 2014"</span><br><span class="line"></span><br><span class="line">5ba3db6 Fix failing CompositePropertySourceTests</span><br><span class="line">84564a0 Rework @PropertySource early parsing logic</span><br><span class="line">e142fd1 Add tests for ImportSelector meta-data</span><br><span class="line">887815f Update docbook dependency and generate epub</span><br><span class="line">ac8326d Polish mockito usage</span><br></pre></td></tr></table></figure><p>哪一个你更愿意去阅读呢？</p><p>前者在长度和形式上变化很大; 后者简洁而一致。 前者是默认情况; 后者不会偶然发生。</p><p>虽然许多Git存储库的日志看起来像前者，但也有例外。 Linux内核和Git本身就是很好的例子。 看看Spring Boot，或者由Tim Pope管理的任何存储库。</p><a id="more"></a><p>对这些存储库的贡献者来说，精心设计的Git提交消息是向同事开发人员（以及其将来的自己）传达关于变更的上下文的最佳方式。 差异会告诉你什么改变了，但只有提交消息可以正确地告诉你为什么。 彼得·赫特雷尔（Peter Hutterer）表示：</p><blockquote><p>Re-establishing the context of a piece of code is wasteful. We can’t avoid it completely, so our efforts should go to reducing it [as much] as possible. Commit messages can do exactly that and as a result, a commit message shows whether a developer is a good collaborator.</p></blockquote><p>如果你没有太多思考什么是一个很好的Git提交消息，可能是没有花费太多时间使用git日志和相关工具。 这里有一个恶性循环：因为提交历史是非结构化和易变的，所以不会花太多时间使用或在意它。 并且因为它没有得到使用或在意，所以它仍然是非结构化和易变的。</p><p>但是一个很好的提交日志是一个优美而有用的事情。 git blame, revert，rebase，log，shortlog等子命令。 审查他人的commits和pull requests成为值得做的事情。 了解几个月或几年前为什么会发生的事情不仅变得可能而且会很有效率。</p><p>一个项目的长期成功取决于其可维护性（除其他外），维护者的工具比其项目的日志更强大。 值得花时间学习如何妥善照顾。 最初的麻烦，很快就会成为习惯，最终成为所有参与者的骄傲和生产力的源泉。</p><p>在这篇文章中，我只讨论保持健康的提交历史的最基本的元素：如何编写一个单独的提交信息。 还有其他一些重要的做法，如我不在这里处理的强调。 也许我会在随后的一篇文章中这样做。</p><p>大多数编程语言对于什么构成习语风格，即命名，格式化等都有完整的约定。 当然，这些惯例有差异，但是大多数开发人员认为，选择一个并坚持下去，远远超过每个人自己独特个性化的风格所造成的混乱。</p><p>一个团队对其提交日志的方法应该没有什么不同。 为了创建一个有用的修订历史，团队应首先同意至少定义以下三件事情的提交消息约定：</p><ul><li>样式</li></ul><p>标记语法，包含边距，语法，大小写，标点符号。 拼出这些东西，消除猜测，尽可能简单。 最终结果将是一个非常一致的日志，不仅是阅读的乐趣，而且实际上可以定期阅读。</p><ul><li>内容</li></ul><p>提交消息的主体（如果有）包含什么样的信息？ 它不包含什么？</p><ul><li>元数据</li></ul><p>如何引用跟踪ID，提取请求号等？</p><p>幸运的是，实际上关于怎么让Git提交消息有一个很完善的约定没有什么是你需要重新规划或者发明创造的。 其中许多是以某些Git命令的功能为基础的，只要按照下面的七条规则，你就可以像个专业人士一样提交你的Git日志。</p><h1 id="一个伟大的Git提交消息的七个规则"><a href="#一个伟大的Git提交消息的七个规则" class="headerlink" title="一个伟大的Git提交消息的七个规则"></a>一个伟大的Git提交消息的七个规则</h1><ul><li>将摘要与详细内容用空行分开</li><li>将摘要行限制为50个字符</li><li>将摘要首字母大写</li><li>摘要结尾处不要使用标点符号</li><li>在摘要行中使用必要的语气</li><li>正文内容以72个字符为限进行换行</li><li>使用详细消息部分来解释what、why、how</li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Summarize changes in around 50 characters or less</span><br><span class="line"></span><br><span class="line">More detailed explanatory text, if necessary. Wrap it to about 72</span><br><span class="line">characters or so. In some contexts, the first line is treated as the</span><br><span class="line">subject of the commit and the rest of the text as the body. The</span><br><span class="line">blank line separating the summary from the body is critical (unless</span><br><span class="line">you omit the body entirely); various tools like `log`, `shortlog`</span><br><span class="line">and `rebase` can get confused if you run the two together.</span><br><span class="line"></span><br><span class="line">Explain the problem that this commit is solving. Focus on why you</span><br><span class="line">are making this change as opposed to how (the code explains that).</span><br><span class="line">Are there side effects or other unintuitive consequences of this</span><br><span class="line">change? Here&apos;s the place to explain them.</span><br><span class="line"></span><br><span class="line">Further paragraphs come after blank lines.</span><br><span class="line"></span><br><span class="line"> - Bullet points are okay, too</span><br><span class="line"></span><br><span class="line"> - Typically a hyphen or asterisk is used for the bullet, preceded</span><br><span class="line">   by a single space, with blank lines in between, but conventions</span><br><span class="line">   vary here</span><br><span class="line"></span><br><span class="line">If you use an issue tracker, put references to them at the bottom,</span><br><span class="line">like this:</span><br><span class="line"></span><br><span class="line">Resolves: #123</span><br><span class="line">See also: #456, #789</span><br></pre></td></tr></table></figure><h2 id="将摘要与详细内容用空行分开"><a href="#将摘要与详细内容用空行分开" class="headerlink" title="将摘要与详细内容用空行分开"></a>将摘要与详细内容用空行分开</h2><blockquote><p>Though not required, it’s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, Git-format-patch(1) turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.</p></blockquote><p>首先，并不是每一个提交日志都要求一个摘要和一个详细描述。 有时单行很好，特别是当变化如此简单，不需要进一步的上下文。 例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fix typo in introduction to user guide</span><br></pre></td></tr></table></figure></p><p>没有更多的需要说 如果读者想知道错字是什么，她可以简单地看一下变化本身，即使用git show或git diff或git log -p。<br>如果你想在命令行中提交了这样的内容，那么可以使用-m选项来简单地提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m&quot;Fix typo in introduction to user guide&quot;</span><br></pre></td></tr></table></figure></p><p>但是，当一个提交有一点解释和上下文的时候，你需要写一个正文。 例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Derezz the master control program</span><br><span class="line"></span><br><span class="line">MCP turned out to be evil and had become intent on world domination.</span><br><span class="line">This commit throws Tron&apos;s disc into MCP (causing its deresolution)</span><br><span class="line">and turns it back into a chess game.</span><br></pre></td></tr></table></figure></p><p>使用-m选项提交带有主体的消息不是很容易编写。 你最好在适当的文本编辑器中编写消息。 如果您还没有在命令行中设置一个用于Git的编辑器，请阅读<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration" target="_blank" rel="noopener">Pro Git</a>的这一部分。</p><p>在任何情况下，提交日志摘要与详细描述的分离在浏览日志时都会付出代价。 这是完整的日志条目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 42e769bdf4894310333942ffc5a15151222a87be</span><br><span class="line">Author: Kevin Flynn &lt;kevin@flynnsarcade.com&gt;</span><br><span class="line">Date:   Fri Jan 01 00:00:00 1982 -0200</span><br><span class="line"></span><br><span class="line"> Derezz the master control program</span><br><span class="line"></span><br><span class="line"> MCP turned out to be evil and had become intent on world domination.</span><br><span class="line"> This commit throws Tron&apos;s disc into MCP (causing its deresolution)</span><br><span class="line"> and turns it back into a chess game.</span><br></pre></td></tr></table></figure></p><p>现在使用git log –online，打印出主题行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">42e769 Derezz the master control program</span><br></pre></td></tr></table></figure></p><p>或者使用git shortlog，这个命令会按用户进行分组汇总提交，再次显示简洁的主题行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git shortlog</span><br><span class="line">Kevin Flynn (1):</span><br><span class="line">      Derezz the master control program</span><br><span class="line"></span><br><span class="line">Alan Bradley (1):</span><br><span class="line">      Introduce security program &quot;Tron&quot;</span><br><span class="line"></span><br><span class="line">Ed Dillinger (3):</span><br><span class="line">      Rename chess program to &quot;MCP&quot;</span><br><span class="line">      Modify chess program</span><br><span class="line">      Upgrade chess program</span><br><span class="line"></span><br><span class="line">Walter Gibbs (1):</span><br><span class="line">      Introduce protoype chess program</span><br></pre></td></tr></table></figure></p><p>在Git中还有其他一些上下文，其中摘要行和主体内容之间的区别是在两者之间没有空白行的情况下都是不能正常工作的。</p><h2 id="将主题行限制为50个字符"><a href="#将主题行限制为50个字符" class="headerlink" title="将主题行限制为50个字符"></a>将主题行限制为50个字符</h2><p>50个字符不是一个极限，只是一个经验法则。 保持这个长度的主题确保了它们的可读性，并迫使作者想了解一下最简洁的方式来解释发生了什么。</p><blockquote><p>提示：如果你很难总结，你可能是一次性提交了太多更改。 你需要争取将这次提交变成多个原子提交（一个提交对应一个主题域的修改）。</p></blockquote><p>GitHub的UI完全了解这些约定。 如果你超过50个字符的限制，它会发出警告：</p><img src="/2017/08/20/how-to-write-a-git-message/zyBU2l6.png"><p>并且将使用省略号截断长度超过72个字符的任何主题行：</p><img src="/2017/08/20/how-to-write-a-git-message/27n9O8y.png"><p>所以50个字符是合适的，最大不要超过72的硬限制。</p><h2 id="摘要行首字母大写"><a href="#摘要行首字母大写" class="headerlink" title="摘要行首字母大写"></a>摘要行首字母大写</h2><p>这听起来很简单。 用大写字母开始所有主题行。</p><p>例如：</p><p><span style="color:green">Accelerate to 88 miles per hour</span></p><p>代替：</p><p><span style="color:red">accelerate to 88 miles per hour</span></p><h2 id="摘要结尾处不要使用标点符号"><a href="#摘要结尾处不要使用标点符号" class="headerlink" title="摘要结尾处不要使用标点符号"></a>摘要结尾处不要使用标点符号</h2><p>主题行中不需要拖尾的标点符号。 此外，当你试图把它们保持在50个字符或更少时，空间是宝贵的。</p><p>例如:</p><p><span style="color:green">Open the pod bay doors</span></p><p>代替:</p><p><span style="color:red">Open the pod bay doors.</span></p><h2 id="在摘要行中使用必要的语气"><a href="#在摘要行中使用必要的语气" class="headerlink" title="在摘要行中使用必要的语气"></a>在摘要行中使用必要的语气</h2><p>命令式的语气只是意味着“说出来或写出来，就像给出命令或指示”一样。 几个例子：</p><p>收拾你的房间<br>关门<br>把垃圾带出去<br>你正在阅读的七个规则中的每一个现在都写在命令中（“将消息内容以72个字符换行”等）。</p><p>命令可能听起来有点粗鲁; 这就是为什么我们不经常使用它。 但它却是比较适合的Git日志主题行的。 这样做的一个原因是，当Git自己代表你创建一个提交时，它就会使用这个命令。</p><p>例如，使用git merge时创建的默认消息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Merge branch &apos;myfeature&apos;</span><br></pre></td></tr></table></figure></p><p>当使用git revert时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Revert &quot;Add the thing with the stuff&quot;</span><br><span class="line"></span><br><span class="line">This reverts commit cc87791524aedd593cff5a74532befe7ab69ce9d.</span><br></pre></td></tr></table></figure></p><p>或者当点击GitHub PR请求上的“合并”按钮时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Merge pull request #123 from someuser/somebranch</span><br></pre></td></tr></table></figure></p><p>所以当你写下你的提交信息在命令行中时，你需要遵循Git自己的内置约定。 例如：</p><ul><li>Refactor subsystem X for readability</li><li>Update getting started documentation</li><li>Remove deprecated methods</li><li>Release version 1.0.0</li></ul><p>起初写这种方式可能有点尴尬。 我们更习惯于以指示性的心情来说话，这是关于报告事实。 这就是为什么提交信息通常最终会如下所示：</p><ul><li>Fixed bug with Y</li><li>Changing behavior of X</li></ul><p>有时候，提交消息将作为其内容的描述：</p><ul><li>More fixes for broken stuff</li><li>Sweet new API methods</li></ul><p>为了消除任何混乱，这里有一个简单的规则，每次都可以正确使用。</p><p>正确形成的Git提交主题行应始终能够完成以下句子：</p><ul><li>If applied, this commit will your subject line here</li></ul><p>例如：</p><ul><li>If applied, this commit will <span style="color:green">refactor subsystem X for readability</span></li><li>If applied, this commit will <span style="color:green">update getting started documentation</span></li><li>If applied, this commit will <span style="color:green">remove deprecated methods</span></li><li>If applied, this commit will <span style="color:green">release version 1.0.0</span></li><li>If applied, this commit will <span style="color:green">merge pull request #123 from user/branch</span></li></ul><p>请注意理解为什么这对于其他非必要形式不起作用：</p><ul><li>If applied, this commit will <span style="color:red">fixed bug with Y</span></li><li>If applied, this commit will <span style="color:red">changing behavior of X</span></li><li>If applied, this commit will <span style="color:red">more fixes for broken stuff</span></li><li>If applied, this commit will <span style="color:red">sweet new API methods</span></li></ul><blockquote><p>请记住：只有在主题行中，以上的规约才是重要的。 当你在书写详细描述时，你可以放松这个限制。</p></blockquote><h2 id="正文内容以72个字符为限进行换行"><a href="#正文内容以72个字符为限进行换行" class="headerlink" title="正文内容以72个字符为限进行换行"></a>正文内容以72个字符为限进行换行</h2><p>Git不会自动包装文本。 当您写入提交消息的正文时，您必须记住其正确的边距，并手动换行。</p><p>建议是以72个字符做这个，所以Git有足够的空间来缩进文字，同时保持一切不超过80个字符。</p><p>一个好的文本编辑器可以提供帮助的。 例如，当您编写Git提交时，可以轻松地将Vim配置为包含72个字符的文本。 然而，传统上，IDE在提交消息中为文本包装提供智能支持非常可怕（尽管在最近的版本中，IntelliJ IDEA终于得到了更好的解决）。</p><h2 id="使用详细消息部分来解释what、why、how"><a href="#使用详细消息部分来解释what、why、how" class="headerlink" title="使用详细消息部分来解释what、why、how"></a>使用详细消息部分来解释what、why、how</h2><p>Bitcoin Core的这个提交是一个很好的例子，说明改变了什么，为什么要做这样的改变：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">commit eb0b56b19017ab5c16c745e6da39c53126924ed6</span><br><span class="line">Author: Pieter Wuille &lt;pieter.wuille@gmail.com&gt;</span><br><span class="line">Date:   Fri Aug 1 22:57:55 2014 +0200</span><br><span class="line"></span><br><span class="line">   Simplify serialize.h&apos;s exception handling</span><br><span class="line"></span><br><span class="line">   Remove the &apos;state&apos; and &apos;exceptmask&apos; from serialize.h&apos;s stream</span><br><span class="line">   implementations, as well as related methods.</span><br><span class="line"></span><br><span class="line">   As exceptmask always included &apos;failbit&apos;, and setstate was always</span><br><span class="line">   called with bits = failbit, all it did was immediately raise an</span><br><span class="line">   exception. Get rid of those variables, and replace the setstate</span><br><span class="line">   with direct exception throwing (which also removes some dead</span><br><span class="line">   code).</span><br><span class="line"></span><br><span class="line">   As a result, good() is never reached after a failure (there are</span><br><span class="line">   only 2 calls, one of which is in tests), and can just be replaced</span><br><span class="line">   by !eof().</span><br><span class="line"></span><br><span class="line">   fail(), clear(n) and exceptions() are just never called. Delete</span><br><span class="line">   them.</span><br></pre></td></tr></table></figure></p><p>看看完整的差异，只是想想作者通过花时间在这里和现在提供这个上下文来节省他们和未来的提交者多少时间。 如果他没有，它可能会永远失去。</p><p>在大多数情况下，你可以省略有关如何进行更改的详细信息。 代码在这方面通常是不言自明的（如果代码如此复杂，需要在散文中解释，那就是源代码注释）。 只要重点明确你为什么首先做出改变的原因 - 变革之前工作的方式（以及这是什么问题），现在的工作方式，以及为什么决定以你所做的方式解决。</p><p>未来的维护者，谢谢你可能是你自己！</p><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p><b>学会喜爱命令行。 离开IDE。</b></p><p>由于多种原因，拥抱命令行是明智之举。 Git非常强大，IDE也是这样，但是每个IDE都有不同的方式。 我每天都使用一个IDE（IntelliJ IDEA），并广泛使用过其它的（Eclipse），但我从未看过Git的IDE集成可以像命令行一样强大。</p><p>某些与Git相关的IDE功能是非常宝贵的，例如在删除文件时调用git rm，并在重命名时使用git进行正确的操作。 当你开始尝试通过IDE提交，合并，重新生成或进行复杂的历史分析时，所有的事情都会分崩离析，导致你无法在IDE上很好的工作。</p><p>当谈到发挥Git的全部力量时，它就是命令行。</p><p>请记住，无论是使用Bash还是Zsh或Powershell，都有一些标辅助功能脚本，可以辅助进行一些命令提示。</p><h1 id="Read-Pro-Git"><a href="#Read-Pro-Git" class="headerlink" title="Read Pro Git"></a>Read Pro Git</h1><p><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">Pro Git</a>可以在线免费获得，这太棒了。</p>]]></content>
      
      
      <categories>
          
          <category> 翻译文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DIY配置中心系列（三）：高可用设计</title>
      <link href="/2017/08/17/high-availability-design-of-DIY-configcenter/"/>
      <url>/2017/08/17/high-availability-design-of-DIY-configcenter/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面两篇文章中描述了配置中心的基本架构与基本概念，本节将讲述如何实现配置存储与获取的高可用设计。</p><p>配置中心作为整个应用运维体系的基础组件，其重要性可见一斑。如果配置系统不具备高可用的特性，一旦发生配置中心服务不可用，那么影响到的将要成千上万的在线应用，由此带来的损失简直是无法估量。做到配置中心高可用架构可以从以下几个方面着手：</p><ul><li>存储高可用</li><li>API服务高可用</li><li>客户端容灾</li></ul><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><hr><pre><code>Operator    --------&gt;        Web主控台               -------&gt;     MySQL Master                                |                                     |                             (notify)                               (sync)                                |                                     |                                ----------|                           |                                          |                         ---------------------SDK Client ---（Load Banlancer）----&gt; API Server Cluster               |        |      |     |                                    |                         slave1   slave2  slave3 ...  (cache)                            (dump file)                      ^       ^       ^     |                                    |                           |       |       | Local Cache                              |----&gt;Slave Proxy(HaProxy) ------------------------</code></pre><hr><a id="more"></a><h1 id="存储高可用"><a href="#存储高可用" class="headerlink" title="存储高可用"></a>存储高可用</h1><p>存储目前使用的是MySQL关系型服务器，采用一主多从的部署方式，主库只负责写入，不负责读取，所以以写为主。配置的读取和提供服务由API服务器承担，API服务器连接的是从库代理，保证只要有一台从库可用，整个服务不会出现问题。配置中心WEB主控台发生配置编辑后，同步写入MySQL主库，随后通知MySQL自身的数据同步，将发生改变的数据同步至多台从库中，这个MySQL之间的数据同步基本可控在毫秒范围。WEB主控台在发生配置编辑后同时会发送一个MQ消息通知API Server集群完成新配置的Dump。</p><h1 id="API服务器高可用"><a href="#API服务器高可用" class="headerlink" title="API服务器高可用"></a>API服务器高可用</h1><p>API服务器是配置中心SDK与配置中心打交道的门户，它提供RESTFUL服务供客户端使用。API服务设计为无状态，可以水平扩展更多的服务器，以应对更多的应用并发获取配置的流量增长。</p><ul><li><p>每台API服务器会定时从MySQL从库中Dump完整的配置数据到本地磁盘上进行缓存，并在内存中更新该配置的指纹信息。</p></li><li><p>同时API服务器会订阅WEB主控台发出的消息，对实时的配置修改进行实时的配置Dump。</p></li></ul><p>API服务器提供给配置中心SDK配置拉取服务，它们之间会存在一个负载均衡器来分担流量。</p><h1 id="客户端的容灾"><a href="#客户端的容灾" class="headerlink" title="客户端的容灾"></a>客户端的容灾</h1><p>客户端通过SDK与API服务器交互取得配置，并缓存获取到的配置写入本地缓存文件。</p><ul><li>当应用程序启动时，SDK会携带module/profile/version参数去拉取最新的配置。</li><li>应用启动后，SDK会定时再去API服务拉取更新配置，这时携带的参数为module/profile/version/signature。多增加的一个signature是用于指纹对比，只有发生了指纹变化的配置才会被重新拉取</li></ul><p>客户端SDK提供给用户三种不同的配置加载策略：</p><ul><li>SERVER模式 这种模式要求每次启动都必须从API服务器拉取最新配置，如果拉取成功存入本地缓存，如果拉取过程失败，则程序启动失败</li><li>LOCAL模式  这种模式实际上是兼容以前的本地配置模式，这种模式下不会与配置中心进行任何交互，直接使用的是本地配置文件</li><li>AUTO模式   这种模式在启动时会尝试从API服务器拉取最新的配置，如果在有限的几次拉取重试失败后，改由本地的上次拉取成功的缓存文件加载引导程序启动</li></ul><p>通过客户端的缓存，尽量避免了因为配置中心的故障导致的应用无法启动的问题，当然如果应用是在第一次启动，并且配置中心处于宕机，这个时候启动会失败 =(</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>配置中心通过三个不同维度的存储与缓存，解决了在分布式环境下配置获取的高可用问题。</p><ul><li>配置数据存储高可用</li><li>API服务器高可用</li><li>客户端容灾设计</li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置中心 </tag>
            
            <tag> DIY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DIY配置中心系列（二）：接入定义</title>
      <link href="/2017/08/15/join-up-definition-of-DIY-configcenter/"/>
      <url>/2017/08/15/join-up-definition-of-DIY-configcenter/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于配置中心主控台的设计，其实我设计的原则是设计成一个统一管理元数据（应用接入、环境定义、版本定义、人员权限划分、配置管控等）功能的一个综合平台。对于一个应用接入配置中心来说，很自然想到需要一些实体来承担配置的管理载体。主控台是用户使用操作最为频繁的地方，良好的组织结构与交互设计能够给人带来办事效率上的提高，所以这块我也是经过了很多次版本的设计与修改，最终产出的是一个类似树型的结构体系。</p><a id="more"></a><h1 id="Module定义"><a href="#Module定义" class="headerlink" title="Module定义"></a>Module定义</h1><p>对于一个接入来说，我们配置中心平台需要知道该接入的一些元数据信息，比如该应用的名称是什么，它是由谁负责，联系方式是什么，是归属于哪个部门，是什么类型的应用等等，这些都是属于接入定义的范畴。这些属性当中有的我们可以通过其它外围系统获取，而有些则需要在新建接入的时候录入。</p><p>我们的配置中心除了希望应用能够很好的接入以外，还希望能够接入一些自研的基础组件的配置。所以我们在定义这个载体的时候并没有直接采用application这个名称，而是使用了module这个名称。这个名称涵盖了应用接入和基础组件的接入，具体这两种接入的区别以及不同点，稍后会有介绍。</p><p>Module定义的主要元数据如下：</p><ul><li>模块名称<br>这里是一个接入的唯一标识，由英文字母以及一些数字、下划线组成</li><li>描述<br>描述该接入的一些其它方面的描述</li><li>接入语言<br>多语言接入选择接入语言，如Java/NodeJS/PHP等</li><li>管理员设定<br>设定该模块的管理员，模块的管理员对该模块的配置授权有决定作用</li><li>归属部门<br>设定该模块归属于哪个部门</li></ul><h1 id="Profile定义"><a href="#Profile定义" class="headerlink" title="Profile定义"></a>Profile定义</h1><p>在配置中心中，环境的术语名称叫Profile，这其实是一个非常标准化的称呼。在国外的很多网站上，个人设置其实就是用的这个Profile词汇；而在Spring开发中，对于不同类型的配置的区分也是通过叫做Profile的选项进行区分。所以这里我们也用Profile这个词来指代环境的定义。</p><p>传统的开发过程中，系统在各个不同的环境中是部署了多套系统，比如对应开发、测试、预发布和线上的环境，软件系统在各个环境都部署一套。这样做的好处是可以做到系统的环境的完全隔离，但是代价就是系统部署的量级随着环境套数的变化成指数增长。新定义一套环境是比较容易的，但是新建一套环境对应的系统部署则是非常麻烦的事情。</p><h2 id="环境划分"><a href="#环境划分" class="headerlink" title="环境划分"></a>环境划分</h2><p>配置中心在这里采用的是另一种环境划分方式： 将环境划分成线上环境和线下环境。</p><ul><li>线上环境: 所有的部署于线上的系统连接线上的配置中心部署，并与线下完全隔离，做到安全隔离。线上的环境可以自己进行定义，目前定义了两套环境：灰度环境(stage)、正式环境（product），当然可以增加更多的环境定义。</li><li>线下环境: 所有的部署于线下的系统连接线下的配置中心部署，线下的配置中心定义的环境有：开发（dev）、测试（test）、预发布（pre）等。</li></ul><p>这样的环境定义后，为我们后面部署配置中心打下了基础，我们部署的配置中心将只需要部署两套系统（因为考虑安全的因素，线上与线下完全隔离）。不必像传统软件系统那样，新增一套环境则需要新增加一套软件部署。</p><p>Profile定义的主要元数据如下：</p><ul><li>环境名称<br>定义了环境的英文名称，该环境名称也包括了系统内置的一些预定义的环境名称，系统标准内置了dev/test/pre/stage/product等一系列的标准环境定义，也可以自己定义新的环境名称</li><li>环境描述<br>描述环境名称以外更多的描述</li><li>环境类型<br>环境类型用以区分是内置类型还是自定义类型</li><li>所属模块<br>定义了该环境是属于哪个模块的，</li></ul><h1 id="Version定义"><a href="#Version定义" class="headerlink" title="Version定义"></a>Version定义</h1><p>对于Version这个版本来说，如果大家使用过Dubbo，一定会不对它里面的Version的概念陌生，而我们这里的Version概念与之差不太多。Version主要用于多版本配置的并行运行或者新旧滚动发布。对于Dubbo中Version的主要使用方式就是在涉及到不兼容升级接口时，在滚动升级过程中同时并存新旧版本的服务，让接口消费方有一定的时间窗口逐步迁移至新的接口服务中来。当所有的旧接口调用都迁移到新接口调用中后，老版本的接口或者服务器就可以完全下线了。</p><p>在配置中心中，Version同样用于多版本并存、滚动更新这样的场景。当一个应用在某次的功能修改中发生了非常大的变更，而该变更对于当前正在线上运行的应用来说是不兼容的，也就是我们在上线操作过程中不能直接对线上的配置进行修改，因为这样直接的不兼容修改会直接反馈到线上运行应用，导致线上应用出现故障。最稳妥的做法就是新建一个版本，在应用中依赖该版本的配置进行发布，上线后线上的运行程序就会依赖新版本的配置，旧版本的配置将会失效，这时我们就可以安全的删除旧版本的配置了。</p><p>同时Version因为是树型结构的最底层，所以也充当了配置数据存储的角色。所有的Module-Profile-Version形成的坐标都对应了一组的配置，该配置将以JSON的形式存储在Version的元数据中</p><p>Version的主要元数据如下：</p><ul><li>版本名称<br>在Module-Profile的路径下唯一确定一个版本信息</li><li>所属Profile<br>归属的环境信息</li><li>所属Module<br>归属的接入定义</li><li>配置内容（JSON）<br>配置内容，内部以JSON格式组织，配置存储的结构将在后面文章中再详细介绍</li><li>数据版本<br>用户编辑配置的数据版本演进，该属性对于配置的顺序应用有非常重要的作用</li><li>配置指纹<br>对配置内容进行的一个指纹签名，该属性对于后续SDK接入后配置的对比更新有非常重要的作用</li><li>描述<br>对该版本的产生原因进行一些说明</li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>通过上面的描述，Module/Profile/Version共同组成了一个三维坐标标记了一组配置。我们可以很快的画出一个带树状的组织结构：</p><ul><li>应用接入型</li></ul><pre><code>              Module                                                  ------&gt; Module                |-----------------------------------------------------------       |                  |               |        |      Dev                Test             Pre      ...                ------&gt; Profile       |                  |               |    -----------------     -----------     ------------------    |         |     |     |         |      |         |    |   default    v2   ...    default   v0.1   default   v10  ...         ------&gt; Version</code></pre><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>以上Module/Profile/Version的划分并非没有问题，这种划分很好的解决了以应用为维度的接入，但是对于另一个以基础组件为维度的接入却显得比较困难。</p><h2 id="基础组件如何接入"><a href="#基础组件如何接入" class="headerlink" title="基础组件如何接入"></a>基础组件如何接入</h2><p>对于一层的Module定义来说，可以很好的满足应用接入的需求，但是对于基础中间件的接入来说，它涉及到的维度就有两层了，一层是中间件本身的接入定义，另一层是使用该中间件的应用接入定义。怎么理解这两层含义呢？我们来举个例子：</p><p>在现有的基础之上，假如我们要接入一个消费中间件MQ的组件SDK，该SDK在初始化以及运行过程中需要一些动态可调的配置，现在我们把它接入配置中心。那我们就在主控台上新建一个Module，取名我们就定为MiddleWare-MQ，好了现在定义好了一个Module，该Module下分各种环境及配置信息。那么问题来了：</p><ul><li>不同应用接入的中间件配置有可能不同，并不是一个大一统的配置</li><li>不同应用接入的中间件配置需要该应用的负责人有权限修改配置，即接入配置中心的中间件各接入方要有权限能够修改自己的接入配置</li></ul><p>以上两点来说，刚才我们以应用接入的设计并不能很好的满足。</p><h3 id="SubModule定义"><a href="#SubModule定义" class="headerlink" title="SubModule定义"></a>SubModule定义</h3><p>基于此现状，对基于应用接入的结构进行了扩展，将Module层进行扩展，支持多层Module父子关系（目前两层已经足够）：</p><ul><li>第一层定义接入中间件属性，该层属于公共层，由接入方（中间件团队）维护，这层下面不直接挂接Profile，而是挂接SubModule。</li><li>第二层定义接入方属性，该层属于个性化层，由接入方（中间件团队）新建和维护，同时将配置编辑权限授权接入业务方，让业务方有权参与中间件配置编辑。该层下面才开始挂接Profile。</li></ul><p>这里需要说明一下，第二层的新建建议是由中间件基础组件团队来执行，而执行前是需要业务方通过申请基础组件接入，由基础组件团队新建完第二层后将该层编辑权限授予业务方。</p><p>这样经过扩展之后整体的树型结构变成这样：</p><ul><li>基础组件接入型</li></ul><pre><code>              Module                                                  ------&gt; Module                |    --------------------------------------------    |             |            |             |   subModule1   subModule2    subModule3    ...                      ------&gt;  SubModule                  |                  |                  |-----------------------------------------------------------       |                  |               |        |      Dev                Test             Pre      ...                ------&gt; Profile       |                  |               |    -----------------     -----------     ------------------    |         |     |     |         |      |         |    |   default    v2   ...    default   v0.1   default   v10  ...         ------&gt; Version</code></pre><p>那么这两种树型融合后的结果就是：Module分两种类型(type)，一种是下面直接挂载Profile，而另一种是下面还需要挂载SubModule。那么这时Module的主要元数据就需要增加至少两个属性：</p><ul><li>type        用以区分该Module是哪种类型</li><li>parent      用以标识该Module的父Module是谁，当type为应用接入类型时，该module的parent自然就为空了</li></ul><p>最新Module定义的主要元数据如下：</p><ul><li>模块名称<br>这里是一个接入的唯一标识，由英文字母以及一些数字、下划线组成</li><li>类型<br>用以区分该Module是哪种类型</li><li>父Module<br>用以标识该Module的父Module是谁</li><li>描述<br>描述该接入的一些其它方面的描述</li><li>接入语言<br>多语言接入选择接入语言，如Java/NodeJS/PHP等</li><li>管理员设定<br>设定该模块的管理员，模块的管理员对该模块的配置授权有决定作用</li><li>归属部门<br>设定该模块归属于哪个部门</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Module/Profile/Version共同组成了一个三维坐标标记了一组配置，它的组织结构形如以下结构：</p><ul><li>应用接入型</li></ul><pre><code>              Module                                                  ------&gt; Module                |-----------------------------------------------------------       |                  |               |        |      Dev                Test             Pre      ...                ------&gt; Profile       |                  |               |    -----------------     -----------     ------------------    |         |     |     |         |      |         |    |   default    v2   ...    default   v0.1   default   v10  ...         ------&gt; Version</code></pre><ul><li>基础组件接入型</li></ul><pre><code>              Module                                                  ------&gt; Module                |    --------------------------------------------    |             |            |             |   subModule1   subModule2    subModule3    ...                      ------&gt;  SubModule                  |                  |                  |-----------------------------------------------------------       |                  |               |        |      Dev                Test             Pre      ...                ------&gt; Profile       |                  |               |    -----------------     -----------     ------------------    |         |     |     |         |      |         |    |   default    v2   ...    default   v0.1   default   v10  ...         ------&gt; Version</code></pre><p>除了这种树型结构，在后面我们还引用了<code>灰度控制</code>的概念，以便于在变更配置项时能先验证后发布的过程，极大的降低了因错误地修改配置而导致的故障出现概率。</p><p>这种结构可以很好的适应各种部署问题。比如也可以把Profile抽象成机房IDC的概念，那么假如现在线上有两个数据中心，北京(bj)和上海(sh)，那我们完全可以在所有数据中心中只部署一套配置中心，仅仅使用profile就可以实现多数据中心的配置管理，如profile可以定义成product-sh，product-bj等等。</p><p>当然所有数据中心只部署一套配置中心就需要解决如何高效部署的问题，这个点我会在后面的文章中描述。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置中心 </tag>
            
            <tag> DIY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DIY配置中心系列（一）：起步</title>
      <link href="/2017/08/13/start-of-DIY-configcenter/"/>
      <url>/2017/08/13/start-of-DIY-configcenter/</url>
      
        <content type="html"><![CDATA[<blockquote><p>配置中心从开发到线上接入运行已经过去快半年时间了，目前配置中心整体运行非常平稳，达到当初的设计目的，这里才敢有勇气拿出来分享设计，毕竟一样东西拿出来与人分享是需要勇气和底气的。同时对自己的实践过程进行一些总结，希望自己有时间回头瞭望时会有新的认识和发现。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于一个可运行的程序来说，配置可以说是驱动它运行的灵魂。良好的配置能指导程序正确的运行，并产出符合期望的结果。对于现有的软件来说，配置可以是多种多样的，配置可以写在配置文件中由程序运行时读取，也可以在启动程序时通过命令行方式传入，配置也可以是各种环境参数由程序在运行时进行读取，甚至有些参数直接写死在程序代码中。</p><p>对于程序开发来说，程序中某个参数的值在各种部署环境下或者在某种情况下需要更改，那这种值就可以抽象成配置项。在没有引入配置文件之前，要对各种部署进行适应的方式就是修改源代码中相应值然后重新打包并部署，而如果将该值抽象成配置后独立于配置文件中，这样就能够独立于程序之外单独进行修改而不用重新编译整体程序。</p><a id="more"></a><h1 id="常见传统配置方式"><a href="#常见传统配置方式" class="headerlink" title="常见传统配置方式"></a>常见传统配置方式</h1><p>对于传统程序开发来说，往往存在以下几种常见的配置方式：</p><h2 id="方式一：从应用中加载配置"><a href="#方式一：从应用中加载配置" class="headerlink" title="方式一：从应用中加载配置"></a>方式一：从应用中加载配置</h2><p> 在传统的应用开发中，开发人员习惯于将配置放入到项目的相对路径下，如类路径resources下面等等，配置文件的内容随着线下各种环境的值进行修改，等待发布时再修改项目中的配置文件中的配置项为线上配置值。对于这种配置的方式，我们可以数数从软件的生命周期开始需要经过多少次修改，至少应该是包括以下几次修改：</p><ul><li><p>开发阶段</p><p>开发阶段时，开发人员需要根据自己本机的开发环境的相应配置修改配置文件并打包编译，以确保正确的配置值能够在本地环境驱动程序运行。</p></li><li><p>测试阶段</p><p>测试阶段开始，测试人员或者开发人员需要修改测试环境对应的配置文件并打包编译，以确保正确的配置值能够在本地环境驱动程序运行。</p></li><li><p>上线阶段</p><p>在上线前，仍然需要手工修改线上的配置值然后再打包并部署。</p></li></ul><p> 从上面可以看出此种方式缺点很明显：很容易出错！很容易在各种环境配置的切换中配置错误，修改越多，出错的概率就越大。</p><h2 id="方式二：Maven多profile配置管理"><a href="#方式二：Maven多profile配置管理" class="headerlink" title="方式二：Maven多profile配置管理"></a>方式二：Maven多profile配置管理</h2><p> 该配置方式充分利用的是maven工具的profile过滤替换功能。</p><ul><li>将应用的运行环境划分成不同的环境profile：开发/测试/预发/灰度/线上等等profile</li><li>项目结构下分别建立各环境的配置文件，如：config_dev.properties/config_test.properties等</li><li><p>通过maven打包时的profile过滤机制替换项目中的占位符为特定profile的配置值</p><p>关于使用Maven profile机制打包的方法这里不作叙述，大家可以自行google。</p><p>这种方式改进了方式一的缺点，让配置的修改各自有了归属，对开发环境的profile配置修改不会影响到测试环境的profile配置以及线上的配置。但是这样的配置是有缺点的：</p></li><li>对于应用的开发有一定的阻碍，要想配置修改生效，必须每次都得重新指定profile并通过maven编译后部署，十分繁琐。</li><li><p>对于线上的配置值，尤其是一些比较重要的、机密的配置值裸露在项目中，存在一定的安全问题。</p><h2 id="方式三：Spring多profile配置管理"><a href="#方式三：Spring多profile配置管理" class="headerlink" title="方式三：Spring多profile配置管理"></a>方式三：Spring多profile配置管理</h2><p>该机制与上面的Maven的profile很像，但是机制确有所有不同：</p></li><li><p>将应用的运行环境划分成不同的环境profile：开发/测试/预发/灰度/线上等等profile</p></li><li>项目结构下分别建立各环境的配置文件，如：config_dev.properties/config_test.properties等</li><li>Spring配置文件新建profiles节点，并将不同profile的配置bean进行配置加载</li><li><p>应用在启动时传入启用的profile名称，由Spring启用对应的profile</p><p>这种方式相对于Maven Profile的方式来说增强的地方在于：修改配置后可以直接重启而不用经过编译的繁琐过程。<br>但是这种方式仍然存在Maven Profile的其它缺点外还存在的一个问题是：它必须和Spring深度捆绑！</p><h2 id="方式四：服务器配置覆盖替换"><a href="#方式四：服务器配置覆盖替换" class="headerlink" title="方式四：服务器配置覆盖替换"></a>方式四：服务器配置覆盖替换</h2><p>项目中保留本地开发的默认配置文件，各环境（开发、测试、预发、灰度、线上）在应用服务器特定目录下放置配置替换文件，修改应用服务器启动脚本加载特定目录下面的配置文件进行替换覆盖。</p><p>以Jetty部署为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span>应用环境配置</span><br><span class="line">PROJECT_DIR='/data/www/java/$&#123;APP_DEPLOY_DIR&#125;'</span><br><span class="line">LOGGER_ROOT=$&#123;PROJECT_DIR&#125;/logs</span><br><span class="line"> </span><br><span class="line">if [ ! -d $LOGGER_ROOT ];then</span><br><span class="line">    mkdir -p $LOGGER_ROOT</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span>Jetty</span><br><span class="line">JETTY_HOME='/opt/jetty'</span><br><span class="line">JETTY_LOGS=$&#123;LOGGER_ROOT&#125;</span><br><span class="line">JETTY_RUN=$&#123;JETTY_HOME&#125;/run</span><br><span class="line"><span class="meta">#</span>配置文件</span><br><span class="line">JAVA_OPTIONS="-Dconf.file=file://$&#123;PROJECT_DIR&#125;/conf/conf.properties -Dlogger.root=$&#123;LOGGER_ROOT&#125;"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span>#JVM参数设置</span><br><span class="line">JAVA_OPTIONS="$JAVA_OPTIONS -server -Xms4096m -Xmx4096m -XX:+UseConcMarkSweepGC</span><br><span class="line">                 -XX:+UseCMSCompactAtFullCollection -XX:CMSMaxAbortablePrecleanTime=5000 -XX:+CMSClassUnloadingEnabled</span><br><span class="line">                 -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=80"</span><br><span class="line">JAVA_OPTIONS="$JAVA_OPTIONS -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOGGER_ROOT&#125;/java.hprof"</span><br><span class="line">JAVA_OPTIONS="$JAVA_OPTIONS -verbose:gc -Xloggc:$&#123;LOGGER_ROOT&#125;/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps"</span><br><span class="line">JAVA_OPTIONS="$JAVA_OPTIONS -Djava.awt.headless=true"</span><br><span class="line">JAVA_OPTIONS="$JAVA_OPTIONS -Dsun.net.client.defaultConnectTimeout=10000"</span><br><span class="line">JAVA_OPTIONS="$JAVA_OPTIONS -Dsun.net.client.defaultReadTimeout=30000"</span><br><span class="line">JAVA_OPTIONS="$JAVA_OPTIONS -XX:+DisableExplicitGC"</span><br><span class="line"> </span><br><span class="line">usage()</span><br><span class="line">&#123;</span><br><span class="line">    echo "Usage: $&#123;0##*/&#125; [-d] &#123;start|stop|run|restart|check|supervise&#125; [ CONFIGS ... ] "</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>其中的-Dconf.properties=file://$PROJECT_DIR/conf/conf.properties定义了加载配置替换文件的路径。<br>当然要实现特定环境的配置文件替换还需要在应用中配置时加入类似如下的配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"systemPropertiesModeName"</span> <span class="attr">value</span>=<span class="string">"SYSTEM_PROPERTIES_MODE_OVERRIDE"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreResourceNotFound"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 本地开发配置文件 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:props/config.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 线上覆盖替换文件 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;conf.properties&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样实现了配置文件的加载替换覆盖。</p><p>这种方式解决了上面几种配置方式的安全问题，同时也满足一部分开发的便利方式。<br>但是该方式引出了新的问题：配置管理的繁琐性，不同的环境需要不同的替换配置文件，环境越多，配置的替换文件越多，对线下线上的服务器应用配置维护带来了很大的难度。开发的生命周期中，需要对很多地方做修改工作，容易疏忽和遗漏，开发人员在开发、测试等线下环境需要自行登录到线下服务器进行配置的修改，繁琐且不易管理。</p><h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><h1 id="什么是配置中心"><a href="#什么是配置中心" class="headerlink" title="什么是配置中心"></a>什么是配置中心</h1><p>基于传统配置管理上的问题，统一的配置管理平台呼之欲出，主要目的就是要彻底解决以上遇到的所有问题，使应用与配置相对独立分开，应用打包交付后放入一个指定环境服务器，即可自动感知并拉取远程配置中心中对应的配置，这种方式也为现在非常流行的基于docker的容器化交付体系提供了实现基础。</p><p>那什么是配置中心？为什么要实施配置中心？</p><p>配置中心提供了配置的统一规范化管理平台，提供统一的操作平台供开发，测试，运维各种人员使用，提供各种应用部署环境的配置集中修改及配置的分发操作，减少QA测试、运维的机械性地配置文件修改劳动。并维护一个所有人员的权限操作列表，以区分不同人员的权限范围。对任何配置的修改操作进行日志审计记录，随时可查询配置的变更历史信息。可以做到应用上线安装好应用服务器后不做任何修改放入应用包直接运行的效果，这也是应用容器化的最根本的前置条件。同时也做到了应用迁移的便利性，以前的应用扩容，运维人员需要COPY整个应用服务器及相关目录的结构和内容到新扩容机器，接入配置中心后，应用的扩容将会是直接分配新机器，扔入应用包，直接启动就可以，无需其它繁杂的应用配置工作。</p><h1 id="配置中心体系实现的功能"><a href="#配置中心体系实现的功能" class="headerlink" title="配置中心体系实现的功能"></a>配置中心体系实现的功能</h1><p>它实现了：</p><ul><li>支持对接入应用的定义</li><li>支持对各运行环境/数据中心的定义</li><li>支持对配置版本的定义</li><li>支持对灰度配置的定义</li><li>支持配置修改的权限管理及历史记录</li><li>支持全兼容的原有应用无痛接入（支持直接导入项目properties文件）</li><li>支持提供Restful API接口供其他语言开发SDK或者Agent</li><li>支持对Spring框架的全兼容</li></ul><h1 id="开源界的配置中心"><a href="#开源界的配置中心" class="headerlink" title="开源界的配置中心"></a>开源界的配置中心</h1><p>在我们的配置开始我们DIY的配置中心开发之前，业界已经存在的以下几个开源的配置中心方案：</p><ul><li>淘宝开源的Diamond </li><li>360开源的QConf</li><li>百度开源的Disconf</li><li>携程开源的Apollo（在我们开始自研配置中心之前它并没有开源，我们也不知道有这个东西）</li></ul><p>QConf是基于zookeeper实现的一款多语言的配置中心，整体架构采用配置中心+Agent的方式，它需要在各部署机器安装Agent以代理配置的获取，这给我们的实施带来了困难并没有得到采用。<br>Disconf支持的配置方式很多,与spring集成的很好，有web管理，client只支持java，这也许是放弃它的原因。<br>Apollo这个配置中心不得不说设计的方向和我们的完全一样，很多概念上和我们的配置中心设计思想都是一致的，当然实现手法上可能各有千秋。也许它早点开源，我们就会直接采用它的实现进行二次开发也说不定。<br>Diamond结构简单，设计精巧，整体完全的分布式高可用设计非常清晰，但是介于它的层次划分仍然存在一些小的问题，但是瑕不掩瑜，我们打算依照Diamond的架构设计依葫芦画瓢开干。</p><h1 id="DIY配置中心术语"><a href="#DIY配置中心术语" class="headerlink" title="DIY配置中心术语"></a>DIY配置中心术语</h1><p>配置中心一些术语的定义：</p><ul><li><p>模块/应用（Module）<br>定义了接入的最小单位，从抽象意义上来说，它可以是一个应用，也可以是一个庞大应用的一个子模块，对于我们一般的应用来说，接入是以应用为单位申请新建，而对于像基础中间件这样的中间件业务来说，它就是配置中心中某个基础组件下接入一个新应用。</p></li><li><p>运行环境（Profile）<br>对于配置中心来说，定义了接入应用的运行环境：开发（dev）/ 测试（test）/ 预发布（stage）/线上（product），不同的运行环境肯定会有配置值的差别。<br>而对于服务器来说，会定义一个基于/etc/config.env的文件，文件内容形式大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#配置中心本地缓存目录</span><br><span class="line">CONFIG_CACHE_DIR=/etc/config_center/cache</span><br><span class="line">#配置中心本地容灾目录</span><br><span class="line">CONFIG_LOCAL_DIR=/etc/config_center/local</span><br><span class="line">#服务器运行环境设定，应用程序根据该值从配置中心拉取指定的环境配置信息初始化配置</span><br><span class="line">RUN_ENV=test</span><br><span class="line">#配置中心API服务器地址</span><br><span class="line">CONFIG_SERVER=http://api.config.domain</span><br></pre></td></tr></table></figure></li><li><p>配置版本（Version）<br>定义了运行环境的版本信息，允许多版本的并行运行，多版本的概念同一些分布式的组件如dubbo类似，提供了配置版本的平滑过渡。配置版本只是方便用于在线配置与应用不兼容升级变更的平滑过渡，不建议运行环境长期存在多个版本的并存，在配置过渡完成后可以删除失效的版本。</p></li><li><p>配置灰度（Gray）<br>这是一个很有用的功能，可以防止“手滑”党的很大一部分错误发生。通常一个应用下面会部署多台机器，而在配置中心对于配置的修改会准实时同步到应用机器。如果一个非常重要的可实时生效的配置项被“手滑”的修改成了一个错误的值，那么该应用下的所有机器将会应用该配置，那么产生的后果将会相当严重，轻则线上应用不能正常运行，重则整个应用集群宕机不可用。配置灰度的提出，主要是解决这种问题，配置灰度可以在现有的配置版本基础上创建一个灰度配置，灰度配置中需要指定应用该灰度的服务器信息（如：IP），只有符合该IP的服务器才会应用该灰度的配置，达到配置修改的小范围验证目的，当验证通过后可以通过“完成灰度”来将灰度配置应用到正式版本上完成配置的正式发布。</p></li></ul><h1 id="DIY配置中心整体架构"><a href="#DIY配置中心整体架构" class="headerlink" title="DIY配置中心整体架构"></a>DIY配置中心整体架构</h1><img src="/2017/08/13/start-of-DIY-configcenter/image2016-8-24_14-37-34.png"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>配置中心提供了配置的统一规范化管理平台，提供统一的操作平台供开发，测试，运维各种人员使用，提供各种应用部署环境的配置集中修改及配置的分发操作，减少QA测试、运维的机械性地配置文件修改劳动，大大提升了开发、测试、运维等人员的工作效率。上面大致描述了配置中心的作用和基本构成要素，在实现配置中心过程需要考虑的地方其实是很多的，在接下来的几篇文章中我将详细介绍实现整个配置中心过程中的一些细节。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置中心 </tag>
            
            <tag> DIY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>升级Ambari中的Presto组件</title>
      <link href="/2017/08/09/upgrade-the-presto-component-in-ambari/"/>
      <url>/2017/08/09/upgrade-the-presto-component-in-ambari/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在几天前我的一篇文章中，提到了需要升级公司的Presto数据查询引擎，而我们的Presto引擎是由Ambari管理的，升级Presto并没有任何文档可以参考，都是自己不断摸索出来的路子。所以写下本文用于记录摸索过程，并留待以后方便追溯和查看。</p><p>对于Ambari管理的组件，对于HDP发行版来说，单个组件的升级可能导致HDP发行版其它组件间的冲突，所以Ambari并没有提供单个组件的升级。而Ambari提供的升级方式是Ambari主控台先进行升级，升级后的Ambari可以在WEB界面上完成各个组件的升级，这样所有组件的统一升级的结果是：拥有最新的比较稳定的版本，且各组件间可以很好的配合使用，不会出现冲突，这个是Hortonworks公司帮我已经解决的依赖及冲突问题，这也是使用类似CDH或者HDP这样的Hadoop发行版的原因，省事！</p><p>当然值得一提的是，升级大数据平台组件是一件需要非常谨慎又小心的事情，不到万不得已请不要贸然升级，升级前还要做好万全的准备，比如数据备份，升级计划梳理，灾难预案等等。</p><p>我这里升级的是Presto，是一个比较独立的组件，所以我打算单独升级它，并不使用整体升级Ambari来更新所有的组件，而且当前Presto并没有提供更新的Ambari插件，所以这里需要我自己进行一些Hack。</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>虽然是在测试环境试验，但是仍然需要先对数据及配置进行备份，这是升级必备要做的事。而备份对于Presto引擎来说只限于备份配置数据，Presto引擎本身是基本纯内存计算的数据查询引擎，故并不存在持久化于磁盘之上的数据。</p><h2 id="准备Presto升级用的RPM包"><a href="#准备Presto升级用的RPM包" class="headerlink" title="准备Presto升级用的RPM包"></a>准备Presto升级用的RPM包</h2><p>根据Presto Ambari插件源码，它是通过Maven仓库进行下载的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[download]</span><br><span class="line">presto_rpm_url = http://search.maven.org/remotecontent?filepath=com/facebook/presto/presto-server-rpm/0.161/presto-server-rpm-0.161.rpm</span><br><span class="line">presto_cli_url = http://search.maven.org/remotecontent?filepath=com/facebook/presto/presto-cli/0.161/presto-cli-0.161-executable.jar</span><br></pre></td></tr></table></figure></p><p>这里因为国内的一些因素从Maven中央仓库下载会非常缓慢，可以改成自己的私源Maven仓库或者将RPM包和Jar包从中央仓库手动下载后上传至私有静态文件服务器，然后把上面的文件路径地址改成你添加的新位置。</p><p>同时，因为目前最新的Presto RPM包版本为0.182，所以推荐将老版本的RPM包和Jar包更新成最新版，因为新版本还是解决了很多问题，其中有一个内存泄漏的问题，在前面的文章中提及过，也是为什么要升级Presto的原因。</p><p>具体链接如下：<a href="/2017/08/08/troubleshooting-of-outofmemory-in-presto/">Presto内存溢出(OutOfMemory)问题排查</a></p><h2 id="备份原有的Presto配置"><a href="#备份原有的Presto配置" class="headerlink" title="备份原有的Presto配置"></a>备份原有的Presto配置</h2><p>原有的Presto配置文件是通过Ambari Web管理控制台进行配置的，目前来看并没有针对单个组件的备份方式，Ambari<a href="https://ambari.apache.org/current/installing-hadoop-using-ambari/content/ambari-chap11-1.html" target="_blank" rel="noopener">整体备份方式</a>是通过备份ambari的数据库表来达到的，这不是我们想要的。</p><p>既然没有简单的备份方式，那么唯一可做的就是将每个配置项扣出来，自己通过某个方式进行备份。通过分析Ambari Web主控台的交互，发现有一个Web API可以获取到服务组件的配置，该API接口返回Json结构数据，这个Json数据可以用来作为备份数据：</p><blockquote><p>API接口形如：<code>/api/v1/clusters/test_cluster/configurations/service_config_versions?service_name.in(PRESTO)&amp;is_current=true&amp;fields=*&amp;_=1502331979100</code><br>  {test_cluster}为集群的名称，需要根据自己的实际Ambari集群进行修改<br>  {PRESTO}为安装的Presto服务名字，这个也需要根据自己安装定义的Presto服务组件名称指定</p></blockquote><p>返回数据形式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"href"</span> : <span class="string">"http://172.17.31.251:8080/api/v1/clusters/test_cluster/configurations/service_config_versions?service_name.in(PRESTO)&amp;is_current=true&amp;fields=*&amp;_=1502331979100"</span>,</span><br><span class="line">  <span class="attr">"items"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"href"</span> : <span class="string">"http://172.17.31.251:8080/api/v1/clusters/test_cluster/configurations/service_config_versions?service_name=PRESTO&amp;service_config_version=3"</span>,</span><br><span class="line">      <span class="attr">"cluster_name"</span> : <span class="string">"test_cluster"</span>,</span><br><span class="line">      <span class="attr">"configurations"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"Config"</span> : &#123;</span><br><span class="line">            <span class="attr">"cluster_name"</span> : <span class="string">"test_cluster"</span>,</span><br><span class="line">            <span class="attr">"stack_id"</span> : <span class="string">"HDP-2.5"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"config.properties"</span>,</span><br><span class="line">          <span class="attr">"tag"</span> : <span class="string">"version1502248133724"</span>,</span><br><span class="line">          <span class="attr">"version"</span> : <span class="number">9</span>,</span><br><span class="line">          <span class="attr">"properties"</span> : &#123;</span><br><span class="line">            <span class="attr">"discovery.uri"</span> : <span class="string">"http://master.hdp.test.cq:8285"</span>,</span><br><span class="line">            <span class="attr">"http-server.http.port"</span> : <span class="string">"8285"</span>,</span><br><span class="line">            <span class="attr">"node-scheduler.include-coordinator"</span> : <span class="string">"false"</span>,</span><br><span class="line">            <span class="attr">"query.max-memory"</span> : <span class="string">"50"</span>,</span><br><span class="line">            <span class="attr">"query.max-memory-per-node"</span> : <span class="string">"1"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"properties_attributes"</span> : &#123; &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"Config"</span> : &#123;</span><br><span class="line">            <span class="attr">"cluster_name"</span> : <span class="string">"test_cluster"</span>,</span><br><span class="line">            <span class="attr">"stack_id"</span> : <span class="string">"HDP-2.5"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"connectors.properties"</span>,</span><br><span class="line">          <span class="attr">"tag"</span> : <span class="string">"version1502269954279"</span>,</span><br><span class="line">          <span class="attr">"version"</span> : <span class="number">11</span>,</span><br><span class="line">          <span class="attr">"properties"</span> : &#123;</span><br><span class="line">            <span class="attr">"connectors.to.add"</span> : <span class="string">"&#123;\n    'hive': ['connector.name=hive-hadoop2','hive.metastore.uri=thrift://master.hdp.test.cq:9083,thrift://slave3.hdp.test.cq:9083','hive.recursive-directories=true','hive.config.resources=/etc/hadoop/conf/core-site.xml,/etc/hadoop/conf/hdfs-site.xml']\n&#125;"</span>,</span><br><span class="line">            <span class="attr">"connectors.to.delete"</span> : <span class="string">"[]"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"properties_attributes"</span> : &#123; &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"Config"</span> : &#123;</span><br><span class="line">            <span class="attr">"cluster_name"</span> : <span class="string">"test_cluster"</span>,</span><br><span class="line">            <span class="attr">"stack_id"</span> : <span class="string">"HDP-2.5"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"jvm.config"</span>,</span><br><span class="line">          <span class="attr">"tag"</span> : <span class="string">"version1502330557517"</span>,</span><br><span class="line">          <span class="attr">"version"</span> : <span class="number">10</span>,</span><br><span class="line">          <span class="attr">"properties"</span> : &#123;</span><br><span class="line">            <span class="attr">"jvm.config"</span> : <span class="string">"-server\n-Xmx8G\n-XX:+UseG1GC\n-XX:+UseGCOverheadLimit\n-XX:+ExplicitGCInvokesConcurrent\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:OnOutOfMemoryError=kill -9 %p"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"properties_attributes"</span> : &#123; &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"Config"</span> : &#123;</span><br><span class="line">            <span class="attr">"cluster_name"</span> : <span class="string">"test_cluster"</span>,</span><br><span class="line">            <span class="attr">"stack_id"</span> : <span class="string">"HDP-2.5"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"node.properties"</span>,</span><br><span class="line">          <span class="attr">"tag"</span> : <span class="string">"version1502269954279"</span>,</span><br><span class="line">          <span class="attr">"version"</span> : <span class="number">12</span>,</span><br><span class="line">          <span class="attr">"properties"</span> : &#123;</span><br><span class="line">            <span class="attr">"node.environment"</span> : <span class="string">"test"</span>,</span><br><span class="line">            <span class="attr">"plugin.config-dir"</span> : <span class="string">"/etc/presto/catalog"</span>,</span><br><span class="line">            <span class="attr">"plugin.dir"</span> : <span class="string">"/usr/lib/presto/lib/plugin"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"properties_attributes"</span> : &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"createtime"</span> : <span class="number">1502330556753</span>,</span><br><span class="line">      <span class="attr">"group_id"</span> : <span class="number">-1</span>,</span><br><span class="line">      <span class="attr">"group_name"</span> : <span class="string">"Default"</span>,</span><br><span class="line">      <span class="attr">"hosts"</span> : [ ],</span><br><span class="line">      <span class="attr">"is_cluster_compatible"</span> : <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"is_current"</span> : <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"service_config_version"</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"service_config_version_note"</span> : <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"service_name"</span> : <span class="string">"PRESTO"</span>,</span><br><span class="line">      <span class="attr">"stack_id"</span> : <span class="string">"HDP-2.5"</span>,</span><br><span class="line">      <span class="attr">"user"</span> : <span class="string">"admin"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h1><h2 id="第一步：更新Ambari主控机上的Presto插件目录"><a href="#第一步：更新Ambari主控机上的Presto插件目录" class="headerlink" title="第一步：更新Ambari主控机上的Presto插件目录"></a>第一步：更新Ambari主控机上的Presto插件目录</h2><p>因为Ambari主控机上安装的Presto插件版本比较旧，且官方并没有怎么进行维护，有一些潜在的问题。这里我们需要对该Presto插件目录进行更新修复一些问题。</p><p>具体的修复过程，参见另一篇文章：<a href="/2017/08/09/fix-the-bug-of-the-ambari-presto-plugin-at-restart/">修复ambari presto插件在重启时的BUG</a></p><p>将修复过后的文件夹拷贝至Ambari的插件目录(通常位于/var/lib/ambari-server/resources/stacks/HDP/2.5/services下，2.5为当前HDP的版本信息)替换原有的PRESTO目录。</p><p>完成更新后，需要重启Ambari-server，这样才能让Ambari-server重新识别新的Presto插件目录。</p><h2 id="第二步：停止Presto服务"><a href="#第二步：停止Presto服务" class="headerlink" title="第二步：停止Presto服务"></a>第二步：停止Presto服务</h2><p>在Ambari Web管控台上停止所有的Presto实例</p><img src="/2017/08/09/upgrade-the-presto-component-in-ambari/BC3D34CA-5024-4F2A-8B78-4DEF99AF8A14.png"><h2 id="第三步：在Ambari上删除Presto服务"><a href="#第三步：在Ambari上删除Presto服务" class="headerlink" title="第三步：在Ambari上删除Presto服务"></a>第三步：在Ambari上删除Presto服务</h2><p>在第二步完成后（Ambari要求删除服务组件必须是在服务停止之后）进行Presto服务的删除操作：</p><img src="/2017/08/09/upgrade-the-presto-component-in-ambari/2FEB8D0C-48D8-4CA8-A67E-9B8133286069.png"><h2 id="第四步：在Presto机器上删除相关部署及部署缓存文件"><a href="#第四步：在Presto机器上删除相关部署及部署缓存文件" class="headerlink" title="第四步：在Presto机器上删除相关部署及部署缓存文件"></a>第四步：在Presto机器上删除相关部署及部署缓存文件</h2><ol><li>Ambari的各个slave节点Agent在安装组件前会先将组件插件目录的packages下的一些脚本文件复制到本机并缓存，以便下次不再从主控机拷贝，由于我们这里进行了插件的升级更新，所以需要手工清理slave机器的缓存目录。</li></ol><p>清理操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/ambari-agent/cache/stacks/HDP/2.5/services/PRESTO &amp;&amp; ambari-agent restart</span><br></pre></td></tr></table></figure><p>上述删除缓存目录并重启ambari-agent后，ambari-agent会重新从主控机master拉取服务插件的最新文件</p><ol start="2"><li>Ambari不支持删除服务的同时对安装包进行卸载，也就是说删除的只是在Ambari管理的服务的可见性，服务其实仍然安装在Slave的机器上，如果我们需要安装新包，需要先卸载旧版本组件包。当然也可以对脚本进行进一步的修改，比如先检测组件包是否已经安装，如果安装先进行卸载等等操作，这里我们暂不这样操作。</li></ol><p>卸载presto组件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e `rpm -qa | grep presto`</span><br></pre></td></tr></table></figure><h2 id="第五步：在Ambari主控机上重新添加服务并配置部署机器"><a href="#第五步：在Ambari主控机上重新添加服务并配置部署机器" class="headerlink" title="第五步：在Ambari主控机上重新添加服务并配置部署机器"></a>第五步：在Ambari主控机上重新添加服务并配置部署机器</h2><p>上面第三步中删除了Presto，这里我们可以通过主控台的Admin-&gt;Stack And Versions重新添加服务，这里我们可以看到PRESTO服务已经是我们最新添加的版本了，点击Add Service根据提示一步步进行操作</p><h2 id="第六步：还原配置项"><a href="#第六步：还原配置项" class="headerlink" title="第六步：还原配置项"></a>第六步：还原配置项</h2><p>在安装过程中会提示进行配置，这个时候就是需要我们还原之前备份的配置项，这点Ambari做并不好，没有什么类似配置导入的功能，所以这里需要我们手动的从备份的文件中找出各个配置项手工填入。</p><h2 id="第七步：根据提示完成部署"><a href="#第七步：根据提示完成部署" class="headerlink" title="第七步：根据提示完成部署"></a>第七步：根据提示完成部署</h2><p>在一切都准备就绪后，Ambari会自动进行组件的安装和配置，并会操作组件启动。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在安装过程中可能会出现以下问题：</p><ul><li>sudo: sorry, you must have a tty to run sudo</li></ul><p>使用不同账户，执行执行脚本时候sudo经常会碰到 sudo: sorry, you must have a tty to run sudo这个情况，其实修改一下sudo的配置就好了</p><p>vi /etc/sudoers (最好用visudo命令)</p><p>注释掉 Default requiretty 一行</p><p>#Default requiretty</p><p>意思就是sudo默认需要tty终端。注释掉就可以在后台执行了。</p><ul><li>彻底删除某个组件的服务</li></ul><p>这里有一个链接，里面主要讲怎么彻底删除组件，这个删除包括从Ambari-Server的主控台上删除，还包括从物理安装中移除，参考链接在这里：<a href="http://www.cnblogs.com/zlslch/p/6653421.html" target="_blank" rel="noopener">Ambari里如何删除某指定的服务（图文详解）</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Ambari的插件机制对于更新来说并不是特别方便，它自身提供的更新机制并不适用于自定义的组件升级，需要根据上面所说的进行自定义升级操作。对于HDP发行版自带的组件升级推荐使用升级Ambari版本的方式进行，这样可以做到HDP发行版的完全兼容处理。Ambari在自定义组件升级前一定要做好数据和配置的备份工作，以应对升级失败的回滚方案。</p><p>最后，对于一个企业来说，数据就是它的生命，要对数据存敬畏之心，任何一次组件的操作都可能千万数据的损坏和丢失，对于企业来说都是致命性的打击。对任何一次数据组件的升级都要小心又谨慎，制定周密的升级计划和灾难预案。在实施线上操作之前，勿必先在测试环境进行验证可行性，切不可只盲目听从文档或者网上言论就贸然实施。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> presto </tag>
            
            <tag> ambari </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复ambari presto插件在重启时的BUG</title>
      <link href="/2017/08/08/fix-the-bug-of-the-ambari-presto-plugin-at-restart/"/>
      <url>/2017/08/08/fix-the-bug-of-the-ambari-presto-plugin-at-restart/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着商业数据的不断累积与爆发式增长，传统的数据存储已经不能很好的满足日益增长的数据系统需要，传统的通过关系型数据进行数据获取的方式正在随着数据量的快速增长而出现了瓶颈，随着以Hadoop为代表的大数据平台的出现，有效解决了数据高速增长带来的数据存储和管理问题。现在大数据平台基本上每家公司都发展中长期必备的基础设施，公司基础数据平台使用的Hortonworks提供的大数据平台发行版，使用ambari进行数据平台的管理工作。前段时间大数据平台引入的Presto数据查询引擎作为即席查询工具，并使用ambari对presto的插件支持进行管理。</p><p>Ambari是由Hortonworks公司出品一款大数据平台管理软件，它将大数据平台所需要的各种组件进行统一管理，并提供大数据平台主机管理及各组件的安装制定、配置、启停、监控等一系列非常方便的功能。同时它也支持用户自定义组件插件，提供了良好的扩展能力。</p><a id="more"></a><img src="/2017/08/08/fix-the-bug-of-the-ambari-presto-plugin-at-restart/432E0D4D-7C6B-4374-8FCB-AE10016546D1.png"><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Presto官方为Ambari提供了一个presto的插件，插件地址：<a href="https://github.com/prestodb/ambari-presto-service" target="_blank" rel="noopener">Ambari-Presto-Service</a>，该插件遵循Ambari的插件体系规范，可以集成到Ambari提供Presto的管理功能。</p><p>官方提供了一个Presto的Ambari插件集成<a href="https://prestodb.io/ambari-presto-service/getting-started.html#" target="_blank" rel="noopener">文档地址</a>，指明了如何将插件集成到Ambari中，该文档有点旧，只能是对照着大致看下，帮助理解。</p><p>官方的Presto存在在Ambari界面上对Presto进行重启会失败的问题,该问题由几个小问题组成，我都对其进行了修复。</p><blockquote><p>多提一句的是：官方对于这个Ambari的插件的维护似乎并不上心，该插件最新的更新时间已经是7个月以前，而且最新的改动只是一个微小改动。所以，在官方网站上并不能找到相关的解决办法及修复，所有的所有只能是靠自己去理解Ambari插件的运行原理并根据思考去尝试修复。</p></blockquote><h2 id="问题1：Presto状态检测与Ambari状态检测的冲突问题"><a href="#问题1：Presto状态检测与Ambari状态检测的冲突问题" class="headerlink" title="问题1：Presto状态检测与Ambari状态检测的冲突问题"></a>问题1：Presto状态检测与Ambari状态检测的冲突问题</h2><p>在Ambari上进行Restart操作时，Ambari主控台实际上是依次调用了插件的stop/status/start函数，stop调用是为了让组件停止运行，而status调用是检测组件是否正确意义上停止运行，确保后续的start调用不会存在问题。对于Presto插件来说，节点为了coordinator和worker两种类型，但是获取他们的状态都通过Presto <code>launcher.py</code>脚本文件的status函数，该函数返回节点的状态：0表示正在运行；3表示已停止运行。而Presto插件脚本文件<a href="https://github.com/prestodb/ambari-presto-service/blob/master/package/scripts/presto_coordinator.py" target="_blank" rel="noopener">presto_coordinator.py</a>在调用status时使用的Execute类，该类为Ambari内部工具类，使用就是执行你传入的脚本内容，并在你的脚本内容执行返回码不为0时抛出错误异常。</p><p>presto_coordinator.py脚本函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">status</span><span class="params">(self, env)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> params <span class="keyword">import</span> daemon_control_script</span><br><span class="line">        Execute(<span class="string">'&#123;0&#125; status'</span>.format(daemon_control_script))</span><br></pre></td></tr></table></figure><p>现在问题就出现在这里，Ambari主控台调用presto_coordinator.py脚本的status函数时，Execute内部实现规定脚本正常执行完成时应该返回0，返回其它值将导致Execute抛出ExecutioinFailed异常。Execute实际是调用了Presto安装目录bin/launcher的status函数（该函数返回了状态码3），导致Execute收到了一个不被期望的返回值3，然后它抛出了一个ExecutionFailed异常，最终导致Ambari重启Presto异常中断。</p><p>  <code>/usr/lib/python2.6/site-packages/resource_management/libraries/script/script.py</code>文件内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">(self, env)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Default implementation of restart command is to call stop and start methods</span></span><br><span class="line"><span class="string">    Feel free to override restart() method with your implementation.</span></span><br><span class="line"><span class="string">    For client components we call install</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    //此处省略N行</span><br><span class="line"></span><br><span class="line">    service_name = config[<span class="string">'serviceName'</span>] <span class="keyword">if</span> config <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="string">'serviceName'</span> <span class="keyword">in</span> config <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#TODO Once the logic for pid is available from Ranger and Ranger KMS code, will remove the below if block.</span></span><br><span class="line">        services_to_skip = [<span class="string">'RANGER'</span>, <span class="string">'RANGER_KMS'</span>]</span><br><span class="line">        <span class="keyword">if</span> service_name <span class="keyword">in</span> services_to_skip:</span><br><span class="line">          Logger.info(<span class="string">'Temporarily skipping status check for &#123;0&#125; service only.'</span>.format(service_name))</span><br><span class="line">        <span class="keyword">elif</span> is_stack_upgrade:</span><br><span class="line">          Logger.info(<span class="string">'Skipping status check for &#123;0&#125; service during upgrade'</span>.format(service_name))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          self.status(env)</span><br><span class="line">          <span class="keyword">raise</span> Fail(<span class="string">"Stop command finished but process keep running."</span>)</span><br><span class="line">      <span class="keyword">except</span> ComponentIsNotRunning <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># expected</span></span><br><span class="line">      <span class="keyword">except</span> ClientComponentHasNoStatus <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># expected</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //此处省略N行</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到调用<code>self.status(env)</code>后如果不抛出异常，则后面的<code>raise Fail(&quot;Stop command finished but process keep running.&quot;)</code>就会被执行，导致Ambari流程中断：</p><img src="/2017/08/08/fix-the-bug-of-the-ambari-presto-plugin-at-restart/BD998F8D-234F-4D82-890B-910A6F38E36D.png"><h2 id="问题1解决方案"><a href="#问题1解决方案" class="headerlink" title="问题1解决方案"></a>问题1解决方案</h2><p>对于这种不兼容情况，需要捕获异常并进行处理，在节点未运行的情况下（返回码3）给予Ambari主控台正确的信息：</p><p>修改后的presto_coordinator.py脚本函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">status</span><span class="params">(self, env)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> params <span class="keyword">import</span> daemon_control_script</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Execute(<span class="string">'&#123;0&#125; status'</span>.format(daemon_control_script))</span><br><span class="line">        <span class="keyword">except</span> ExecutionFailed <span class="keyword">as</span> ef:</span><br><span class="line">            <span class="keyword">if</span> ef.code == <span class="number">3</span>: <span class="comment">#等于3表示Presto节点未运行</span></span><br><span class="line">                <span class="comment">#这里只能抛出这个异常，这个异常在Ambari的框架中会被捕获并被正确理解和处理</span></span><br><span class="line">                <span class="keyword">raise</span> ComponentIsNotRunning(<span class="string">"ComponentIsNotRunning"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ef</span><br></pre></td></tr></table></figure></p><h2 id="问题2：脚本调用Python-Http时传入参数类型不匹配"><a href="#问题2：脚本调用Python-Http时传入参数类型不匹配" class="headerlink" title="问题2：脚本调用Python Http时传入参数类型不匹配"></a>问题2：脚本调用Python Http时传入参数类型不匹配</h2><img src="/2017/08/08/fix-the-bug-of-the-ambari-presto-plugin-at-restart/7143981D-4C64-41CD-9288-11283C297726.png"><p>原因在于presto_coordinator.py脚本中start的时候传入构建PrestoClient对象的port属性并非string类型或者int类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, env)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> params <span class="keyword">import</span> daemon_control_script, config_properties, \</span><br><span class="line">            host_info</span><br><span class="line">        self.configure(env)</span><br><span class="line">        Execute(<span class="string">'&#123;0&#125; start'</span>.format(daemon_control_script))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'presto_worker_hosts'</span> <span class="keyword">in</span> host_info.keys():</span><br><span class="line">            all_hosts = host_info[<span class="string">'presto_worker_hosts'</span>] + \</span><br><span class="line">                host_info[<span class="string">'presto_coordinator_hosts'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            all_hosts = host_info[<span class="string">'presto_coordinator_hosts'</span>]</span><br><span class="line">        smoketest_presto(PrestoClient(<span class="string">'localhost'</span>,<span class="string">'root'</span>,config_properties[<span class="string">'http-server.http.port'</span>]),all_hosts)</span><br></pre></td></tr></table></figure><h2 id="问题2方案：进行类型转换"><a href="#问题2方案：进行类型转换" class="headerlink" title="问题2方案：进行类型转换"></a>问题2方案：进行类型转换</h2><p>修改下该函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, env)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> params <span class="keyword">import</span> daemon_control_script, config_properties, \</span><br><span class="line">            host_info</span><br><span class="line">        self.configure(env)</span><br><span class="line">        Execute(<span class="string">'&#123;0&#125; start'</span>.format(daemon_control_script))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'presto_worker_hosts'</span> <span class="keyword">in</span> host_info.keys():</span><br><span class="line">            all_hosts = host_info[<span class="string">'presto_worker_hosts'</span>] + \</span><br><span class="line">                host_info[<span class="string">'presto_coordinator_hosts'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            all_hosts = host_info[<span class="string">'presto_coordinator_hosts'</span>]</span><br><span class="line">        smoketest_presto(PrestoClient(<span class="string">'localhost'</span>,<span class="string">'root'</span>,int(config_properties[<span class="string">'http-server.http.port'</span>]),all_hosts)</span><br></pre></td></tr></table></figure></p><p>解决该问题！</p><h2 id="问题3：重启冒烟测试时Presto-Coodinator拒绝连接"><a href="#问题3：重启冒烟测试时Presto-Coodinator拒绝连接" class="headerlink" title="问题3：重启冒烟测试时Presto Coodinator拒绝连接"></a>问题3：重启冒烟测试时Presto Coodinator拒绝连接</h2><img src="/2017/08/08/fix-the-bug-of-the-ambari-presto-plugin-at-restart/7D4B838D-E9C6-4264-B335-BB24721ED642.png"><p>原因在于：</p><img src="/2017/08/08/fix-the-bug-of-the-ambari-presto-plugin-at-restart/136AD971-81E0-41E8-8EBD-9CA9FD244BA5.png"><p>在Presto Coordinator节点刚刚开始启动的情况下就进行了冒烟测试，这个启动并未保证Coordinator节点启动完成</p><h2 id="问题3方案：增加延时时间，等待节点启动完毕"><a href="#问题3方案：增加延时时间，等待节点启动完毕" class="headerlink" title="问题3方案：增加延时时间，等待节点启动完毕"></a>问题3方案：增加延时时间，等待节点启动完毕</h2><img src="/2017/08/08/fix-the-bug-of-the-ambari-presto-plugin-at-restart/9E32B640-4897-4BA3-A557-1D4D77F7914D.png"><p>该方案只是延时的等待时间，在这个延时时间内一般情况下节点都会启动完成并能成功冒烟测试成功。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这次的问题排查，对于Ambari的插件体系也有一个大致的认识，也增强了自己问题排查、分析、解决问题的能力。对于Ambari Presto插件的修改我也会积极反馈至开源社区，提交相关ISSUE和PR，希望能得到社区的接纳。^_^</p><p>提交的社区ISSUE: <a href="https://github.com/prestodb/ambari-presto-service/issues/28" target="_blank" rel="noopener">ISSUE-28</a></p><p>我的修复PR: <a href="https://github.com/prestodb/ambari-presto-service/pull/29" target="_blank" rel="noopener">PULL-29</a></p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> bug </tag>
            
            <tag> presto </tag>
            
            <tag> ambari </tag>
            
            <tag> 参与开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Presto内存溢出(OutOfMemory)问题排查</title>
      <link href="/2017/08/07/troubleshooting-of-outofmemory-in-presto/"/>
      <url>/2017/08/07/troubleshooting-of-outofmemory-in-presto/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近公司大数据查询引擎Presto运行非常不稳定，容易出现掉节点的问题（一些Presto节点会在莫名其妙的情况出现宕机），从日志上看到是内存溢出了。公司线上的Presto集群JVM使用的垃圾回收器是G1，这也是Presto引擎推荐的一款GC收集器，G1对于超大内存（6G+）的垃圾收集有着良好的效率，能够高效的进行垃圾收集，并控制垃圾收集导致的停顿时间。</p><a id="more"></a><h1 id="追踪"><a href="#追踪" class="headerlink" title="追踪"></a>追踪</h1><p>在出现宕机后，发现线上运行的JVM一直没有加GC日志打印，于是果断加上GC日志参数以便下次宕机收集GC情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-server</span><br><span class="line">-Xmx16G</span><br><span class="line">-XX:+UseG1GC</span><br><span class="line">-XX:+UseGCOverheadLimit</span><br><span class="line">-XX:+ExplicitGCInvokesConcurrent</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:OnOutOfMemoryError=kill -9 %p</span><br><span class="line">-XX:+UseGCLogFileRotation</span><br><span class="line">-XX:NumberOfGCLogFiles=5</span><br><span class="line">-XX:GCLogFileSize=5M</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-Xloggc:/var/lib/presto/var/log/gc.log</span><br></pre></td></tr></table></figure><p>GC日志以5M的大小进行滚动，保留最近5个日志文件，便于GC日志文件的保留，同时JVM最大内存设置为16G。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在加上GC日志后不久又出现了宕机，这时收集得到了程序最后宕机时刻的GC日志文件，这里推荐一款GC日志的分析工具软件<a href="https://github.com/chewiebug/GCViewer" target="_blank" rel="noopener">GCViewer</a>，这款软件优于其它GC日志分析工具的地方在于它支持G1日志的分析，这是非常重要的一点。</p><p>由于GCViewer github上并没有打包好的现成品下载，所以需要自己下载后进行maven编译和打包，具体过程就不再叙述了。</p><p>通过命令行运行<code>java -jar ./gcviewer-1.36-SNAPSHOT.jar</code>就可以启动图形界面，并载入自己的GC日志文件进行分析。</p><img src="/2017/08/07/troubleshooting-of-outofmemory-in-presto/8C65BD39-ECDC-49BC-8687-98C527892C25.png"><p>图示：</p><ul><li>粉红区域：Tenured Generation</li><li>黄色区域：Young Generation</li><li>蓝色线：  Used Heap</li><li>紫色线：  Used Tenured Heap</li><li>绿色线：  GC Lines</li></ul><p>1、从上图可以看到老年代占用了比较多的内存，基本在2G-15G之间波动。而年轻代则内存相对来说占用较少一些。老年代内存溢出时基本上占据了绝大部分内存。同时在GC日志中也找到了<code>2017-08-08T09:31:11.187+0800: 47413.801: [GC pause (GCLocker Initiated GC) (young) (to-space exhausted), 0.2758880 secs]</code>这样的日志打印，证明确实年轻代已经找不到内存可以分配使用了</p><p>2、从图中看GC时间比较正常，都基本维持在1s以下。</p><p>3、Presto在进行任务计算的时候会统计当前的内存使用量，并保证使用的内存不会超出限制，然而这个比较正常的GC日志内存溢出了。</p><h1 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h1><ul><li>正常使用的情况下，因为提交的任务过多，导致内存不足引发溢出</li><li>Presto存在内存泄漏</li></ul><p>对于第一种情况，Presto提供了一些解决方案，比如限制单个任务的总数据量大小，单个任务每个节点的内存使用最大限制，以及可以采用Presto内置的队列排队等限制并发任务数等方式<br>对于第二种情况，这种情况就比较麻烦了，需要确定是具体哪里的代码引起的内存泄漏</p><p>当在排查第一种情况的时候，检查Presto server日志的时候发现了一个隐藏在正常日志深处的一个错误日志：</p><img src="/2017/08/07/troubleshooting-of-outofmemory-in-presto/3EB7D5CC-1626-4282-A646-252E18D57E68.png"><p>拿着这个日志在Presto的GITHUB官方网站ISSUE列表上搜索，还真发现了一个和我这个错误日志一样的ISSUE: <a href="https://github.com/prestodb/presto/issues/5688" target="_blank" rel="noopener">ISSUE-5688</a></p><p>根据ISSUE中的讨论初步认定该ISSUE存在内存泄漏的可能，并且在0.161版本上仍然存在，而我们线上使用的版本是0.160，恰好落在这个有问题的区间上。修复的提交是<a href="https://github.com/prestodb/presto/pull/7099" target="_blank" rel="noopener">PULL-7099</a></p><img src="/2017/08/07/troubleshooting-of-outofmemory-in-presto/D37C02A0-1A21-4809-B03C-32A03391F1C9.png"><p>根据tag历史可以知道，该问题是在0.166版本及以后才被进行了修复。</p><p>这比较肯定了我们线上内存溢出是因为这个bug导致的判断。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从目前跟踪到的情况来说，线上的内存溢出与旧版本Presto存在的内存泄漏有关。</p><p>接下来要着手处理的就是线上Presto版本的升级，这个升级我会另外再开篇文章来说明如何在Ambari管理软件中对已经存在的Presto进行升级处理。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> presto </tag>
            
            <tag> OOM </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL小记-改写SQL中Limit限制</title>
      <link href="/2017/07/31/rewrite-limit-part-in-sql/"/>
      <url>/2017/07/31/rewrite-limit-part-in-sql/</url>
      
        <content type="html"><![CDATA[<p>最近在做一款大数据查询系统，该系统提供给数据分析人员一个用户交互界面，让用户提供SQL语言进行交互查询，前台应用提供一些辅助功能，这样的数据查询系统要优于通过纯console的方式进行查询，查询平台提供了用户管理，权限管理，交互易用性扩展，多引擎框架支持等。</p><p>最近出现的一个问题是用户提交的SQL很大部分时间上并没有携带Limit限制返回条数，导致产生了大量的数据查询浪费，因为在界面上是不会展示所有的结果数据，一般我们在前台页面上只展现少量数据，比如只展现前面100条，而这100条在很大部分情况下已经满足了分析师同学的数据分析需求，然而不太规范的SQL编写可能导致无limit关键字而导致大量的查询，所以当前的一个需求是对用户提交的SQL进行改写，将SQL中存在limit限制的地方进行判断，如果没有设置limit数或者limit大于最大限制，设置成最大限制，限制数据的查询量和返回量。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>因为SQL是动态变化的，想要解析出limit的话，可能需要解析整个SQL语句成SQL抽象语法树，然后遍历得到limit计算其值得到，但是对于目前这个需求，有个比较取巧的地方在于对于标准的SQL语句，Limit关键字始终位于语句最末尾的地方。形如：<code>select * from a limit 100</code>这样的SQL，可以抽象出一个正则表达式，用这个表达式去匹配用户提交的SQL，并解析出对应的limit数，并对解析的SQL进行limit替换就可以了</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>我们要编写的其实是对SQL中limit的匹配关系解析，而SQL中limit形式其实是有两种的，一种是形如<code>select * from a limit 100</code>，另一种是形如<code>select * from a limit 0,200</code>。我在做的时候设计成了两组正则，因分析师在分析的时候大部分会使用第一种形式，如果在匹配的时候优先匹配第一种情况，这也是短路优化的一种手段吧。</p><p>我们的正则表达式为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Limit关键字匹配: limit 10</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LIMIT_REPR_1 = <span class="string">"^(.|\\s)+\\s+(limit|LIMIT)\\s+(\\d+)$"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Limit关键字匹配: limit 10,100</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LIMIT_REPR_2 = <span class="string">"^(.|\\s)+\\s+(limit|LIMIT)\\s+(\\d+)\\s*,\\s*(\\d+)$"</span>;</span><br></pre></td></tr></table></figure></p><p>这时有一个问题，LIMIT_REPR_2表达式出现了严重的性能问题，匹配会一直卡在这个表达式的match上，非常糟糕，慢得无法忍受。</p><p>需要对上面我随手写的正则表达式进行优化。 网上有一篇文章讲Java正则表达式优化的，链接在这里：<a href="http://nspace.iteye.com/blog/1929568" target="_blank" rel="noopener">Java正则表达式优化</a>，总体的思路是减少不确定的表达和累赘表达。</p><p>优化点：</p><ul><li>表达式(.|\s)+\s+最开始我想表达的是允许limit关键字前面可以有任意的字符和空白，它其实可以简化成.+\s+ (这里应该算是主要优化点，对于NFA的正则匹配方式优化前的表达式存在太多的折返导致性能极其低下)</li><li>(limit|LIMIT)这部分去掉LIMIT，可以在匹配的时候将匹配串转成小写再匹配</li></ul><p>优化后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Limit关键字匹配: limit 10</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LIMIT_REPR_1 = <span class="string">"^.+\\s+limit\\s+(\\d+)$"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Limit关键字匹配: limit 10,100</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LIMIT_REPR_2 = <span class="string">"^.+\\s+limit\\s+\\d+\\s*,\\s*(\\d+)$"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>最新更新：上述的正则表达式不能匹配带有格式（有空白符号和回车换行符的格式化语句）<br>需要进行一些修改：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Limit关键字匹配: limit 10</span><br><span class="line">public static final String LIMIT_REPR_1 = &quot;^(.|\\s)+\\s+limit\\s+(\\d+)$&quot;;</span><br><span class="line"></span><br><span class="line">//Limit关键字匹配: limit 10,100</span><br><span class="line">public static final String LIMIT_REPR_2 = &quot;^(.|\\s)+\\s+limit\\s+\\d+\\s*,\\s*(\\d+)$&quot;;</span><br></pre></td></tr></table></figure><p>这组的正则表达式性能是极低的，复杂的sql基本上匹配会卡住非常非常长的时间</p><p>继续优化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Limit关键字匹配: limit 10</span><br><span class="line">public static final String LIMIT_REPR_1 = &quot;^(.|[ \\f\\n\\r\\t\\v])+\\s+limit\\s+(\\d+)$&quot;;</span><br><span class="line"></span><br><span class="line">//Limit关键字匹配: limit 10,100</span><br><span class="line">public static final String LIMIT_REPR_2 = &quot;^(.|[ \\f\\n\\r\\t\\v])+\\s+limit\\s+\\d+\\s*,\\s*(\\d+)$&quot;;</span><br></pre></td></tr></table></figure></p><p>实战中我也发现，正如上文中正则表达式优化所说的：<code>\s匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</code>，但是如果我们用\s来替换[ \f\n\r\t\v]，得到的表达式性能极差，但是如果我们换用确定性的[ \f\n\r\t\v]来替换，则性能则变得很好了，这也许就是Java正则表达式引擎做的优化手段吧？</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>以下代码仅作参考，实则在某些sql条件下会有性能问题<br>如果有更好的正则表达式的写法，欢迎联系我</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SQL查询Limit改写器</span></span><br><span class="line"><span class="comment"> * Created by luopeng on 2017/8/1.</span></span><br><span class="line"><span class="comment"> * 因正则写得不太好，匹配时可能会出现性能问题，导致CPU 100%</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuerySqlLimiter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Limit关键字匹配: limit 10</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LIMIT_REPR_1 = <span class="string">"^(.|[ \\f\\n\\r\\t\\v])+[ \f\n\r\t\v]+limit[ \f\n\r\t\v]+(\\d+)$"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Limit关键字匹配: limit 10,100</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LIMIT_REPR_2 = <span class="string">"^(.|[ \\f\\n\\r\\t\\v])+[ \f\n\r\t\v]+limit[ \f\n\r\t\v]+\\d+[ \f\n\r\t\v]*,[ \f\n\r\t\v]*(\\d+)$"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern p1 = Pattern.compile(LIMIT_REPR_1);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern p2 = Pattern.compile(LIMIT_REPR_2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">rewriteForPrestoSql</span><span class="params">(String querySql, <span class="keyword">int</span> queryLimit)</span> </span>&#123;</span><br><span class="line">String result = matchPatter_1(querySql, queryLimit);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"><span class="keyword">return</span> querySql + <span class="string">" limit "</span> + queryLimit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">rewriteForHiveSql</span><span class="params">(String querySql, <span class="keyword">int</span> queryLimit)</span> </span>&#123;</span><br><span class="line">String result = matchPatter_1(querySql, queryLimit);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配第二种情况</span></span><br><span class="line">result = matchPatter_2(querySql, queryLimit);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> querySql + <span class="string">" limit "</span> + queryLimit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">matchPatter_1</span><span class="params">(String querySql, <span class="keyword">int</span> queryLimit)</span> </span>&#123;</span><br><span class="line">String result = resolveMatcher(querySql, queryLimit, p1.matcher(querySql.toLowerCase()), <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">matchPatter_2</span><span class="params">(String querySql, <span class="keyword">int</span> queryLimit)</span> </span>&#123;</span><br><span class="line">String result = resolveMatcher(querySql, queryLimit, p2.matcher(querySql.toLowerCase()), <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">resolveMatcher</span><span class="params">(String querySql, <span class="keyword">int</span> queryLimit, Matcher m, <span class="keyword">int</span> group)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m.matches()) &#123;</span><br><span class="line"><span class="keyword">int</span> idx = m.start(group);</span><br><span class="line"><span class="keyword">int</span> limit = Integer.parseInt(m.group(group));</span><br><span class="line"><span class="keyword">if</span> (limit &gt; queryLimit) &#123;</span><br><span class="line"><span class="keyword">return</span> querySql.substring(<span class="number">0</span>, idx) + <span class="string">" "</span> + queryLimit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> querySql;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by luopeng on 2017/7/26.</span><br><span class="line"> */</span><br><span class="line">public class MyTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String sql = &quot;select * from (select a.id as userid,a.name as username from a left join b on a.id = b.userid order by a.id limit &quot;</span><br><span class="line"> + &quot;10000) limit 300&quot;;</span><br><span class="line">//未超出限制，返回原语句</span><br><span class="line">System.out.println(QuerySqlLimiter.rewriteForPrestoSql(sql,500));</span><br><span class="line">//超出限制，修改成最大限制</span><br><span class="line">System.out.println(QuerySqlLimiter.rewriteForPrestoSql(sql,50));</span><br><span class="line"></span><br><span class="line">sql = &quot;select * from (select a.id as userid,a.name as username from a left join b on a.id = b.userid order by a.id limit &quot;</span><br><span class="line"> + &quot;10000) limit 0,300&quot;;</span><br><span class="line">//未超出限制，返回原语句</span><br><span class="line">System.out.println(QuerySqlLimiter.rewriteForPrestoSql(sql,500));</span><br><span class="line">//超出限制，修改成最大限制</span><br><span class="line">System.out.println(QuerySqlLimiter.rewriteForPrestoSql(sql,50));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>select <em> from (select a.id as userid,a.name as username from a left join b on a.id = b.userid order by a.id limit 10000) limit 300<br>select </em> from (select a.id as userid,a.name as username from a left join b on a.id = b.userid order by a.id limit 10000) limit  50<br>select <em> from (select a.id as userid,a.name as username from a left join b on a.id = b.userid order by a.id limit 10000) limit 0,300<br>select </em> from (select a.id as userid,a.name as username from a left join b on a.id = b.userid order by a.id limit 10000) limit 0, 50</p></blockquote><h1 id="2017-08-02更新"><a href="#2017-08-02更新" class="headerlink" title="2017-08-02更新"></a>2017-08-02更新</h1><ul><li>在上线过后的小段时间内线上服务器出现了栈溢出<code>java.lang.StackOverflowError</code>的情况。</li></ul><blockquote><p>注意StackOverflowError（A note about the StackOverflowError）</p></blockquote><p>  有时regex包中的Pattern类会抛出StackOverflowError。这是已知的bug #5050507的表现，它自从Java 1.4就存在于java.util.regex包中。这个bug仍然存在，因为它是“won’t fix”的状态。这个错误的出现是因为，Pattern类把一个正则表达式编译为一个用来寻找匹配的小程序。这个程序被递归调用，有时太多的递归就会导致该错误的出现。更多细节请参考bug描述。看起来大部分是在使用选择（alternation）的出现。<br>  如果你碰到了这个错误，尝试重写正则表达式，或者分为几个子表达式，然后分别单独执行。后者有时设置会提高性能。</p><ul><li><p>同时CPU开始飙高到了90%，NFA的回缩确实被验证了。以下SQL是导致SQL飙高的其中一条：</p><p><code>select t1.userid,t1.keyword,c.cityname,b.usermobile from( select t.userid,substring(visit_time,1,10) as visit_timeed,current_path, split_part(split_part(url_extract_query(current_url),&#39;kw=&#39;,2),&#39;&amp;&#39;,1) as keyword from hive.bdc_dwd.dw_fact_galog_pv_daily t where acct_day &gt;= &#39;2017-01-01&#39; and acct_day &lt;= &#39;2017-08-01&#39; and ((t.current_domainname=&#39;search.xxx.com&#39; and current_path like &#39;%kw=%&#39;)or(t.current_domainname=&#39;list.xxx.com&#39; and current_path like &#39;%key=%&#39;)) )t1 left join (select user_id,usermobile from hive.bdc_dwd.dw_mb_account_p group by user_id,usermobile)b on t1.userid=b.user_id left join (select user_id,cityname from hive.bdc_dwd.dw_mb_info group by user_id,cityname)c on c.user_id=t1.userid where t1.keyword in(&#39;app开发&#39;,&#39;微信开发&#39;,&#39;软件开发&#39;,&#39;UI设计&#39;,&#39;手机游戏开发&#39;,&#39;商城开发&#39;,&#39;办公系统开发&#39;,&#39;餐饮系统&#39;,&#39;教育&#39;,&#39;直播&#39;,&#39;支付系统&#39;,&#39;酒店系统开发&#39;,&#39;电商系统&#39;) group by t1.userid,t1.keyword,c.cityname,b.usermobile</code></p><p>出于对正则表达式的不精通，这样处理下去可能会有其它的问题出现，所以决定换一种解决思路：</p></li><li><p>对语句进行整形，去除一些分析干扰，比如将语句进行trim去掉两端空白，去掉语句最后的’;’分号等</p></li><li>检测sql中是否有limit关键字，这个可以使用Java字符串的lastIndexOf，这种确定性搜索还是相当高效的</li><li>当没有检索到limit关键字时，就可以直接在语句后添加Limit并加上限制数量了</li><li>当有检索到limit关键字后，需要判断limit后是否是形如limit xxx 或limit xxx,xxx的形式，这里需要注意的是这期间可能会有空格，回车换行符，制表符等空白字符。这个时候可以使用正则表达式，这个时候正则的匹配范围就变得很小很小了，效率很高</li><li><p>当上一步匹配到limit的形式后，就可以用以前的办法，对limit进行比较和替换了</p><h1 id="最新实现"><a href="#最新实现" class="headerlink" title="最新实现"></a>最新实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SQL查询Limit改写器</span></span><br><span class="line"><span class="comment"> * Created by luopeng on 2017/8/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuerySqlLimiter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Character&gt; SPLIT_CHARS = Arrays.asList(<span class="string">' '</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'0'</span>,<span class="string">','</span>, <span class="string">'\n'</span>, <span class="string">'\r'</span>,</span><br><span class="line"><span class="string">'\t'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LIMIT_NUM_REPR_1 = <span class="string">"^[ \\f\\n\\r\\t\\v]+(\\d+)$"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LIMIT_NUM_REPR_2 = <span class="string">"^[ \\f\\n\\r\\t\\v]+(\\d+)[ \\f\\n\\r\\t\\v]*,[ \\f\\n\\r\\t\\v]*(\\d+)$"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern p3 = Pattern.compile(LIMIT_NUM_REPR_1);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern p4 = Pattern.compile(LIMIT_NUM_REPR_2);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String keyword = <span class="string">"limit"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">rewriteSql</span><span class="params">(String querySql, <span class="keyword">int</span> queryLimit)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String originSql = querySql;</span><br><span class="line">querySql = trimDelimiter(querySql).toLowerCase();</span><br><span class="line"><span class="keyword">int</span> length = querySql.length();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> limitIdx = StringUtils.lastIndexOf(querySql, keyword);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (limitIdx == -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//直接添加limit</span></span><br><span class="line"><span class="keyword">return</span> originSql + <span class="string">" LIMIT "</span> + queryLimit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> limitIdxEnd = limitIdx + keyword.length();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = limitIdxEnd; i &lt; length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> c = querySql.charAt(i);</span><br><span class="line"><span class="keyword">if</span> (!SPLIT_CHARS.contains(c)) &#123;</span><br><span class="line"><span class="keyword">return</span> originSql + <span class="string">" LIMIT "</span> + queryLimit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当以上的遍历完成时，证明存在LIMIT结尾，通过substring进一步分析limit数量</span></span><br><span class="line">String limitStr = StringUtils.substring(querySql, limitIdxEnd);</span><br><span class="line">Matcher matcher = p3.matcher(limitStr);</span><br><span class="line"><span class="keyword">if</span> (matcher.matches()) &#123;</span><br><span class="line"><span class="keyword">int</span> limit = Integer.parseInt(matcher.group(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (limit &gt; queryLimit) &#123;</span><br><span class="line"><span class="keyword">return</span> StringUtils.substring(originSql, <span class="number">0</span>,limitIdx) + <span class="string">" LIMIT "</span> + queryLimit;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> originSql;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">matcher = p4.matcher(limitStr);</span><br><span class="line"><span class="keyword">if</span> (matcher.matches()) &#123;</span><br><span class="line"><span class="keyword">int</span> offset = Integer.parseInt(matcher.group(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">int</span> limit = Integer.parseInt(matcher.group(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">if</span> (limit &gt; queryLimit) &#123;</span><br><span class="line"><span class="keyword">return</span> StringUtils.substring(originSql, <span class="number">0</span>, limitIdx) + <span class="string">" LIMIT "</span> + offset + <span class="string">","</span> + queryLimit;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> originSql;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接添加limit</span></span><br><span class="line"><span class="keyword">return</span> originSql + <span class="string">" LIMIT "</span> + queryLimit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">trimDelimiter</span><span class="params">(String querySql)</span> </span>&#123;</span><br><span class="line">querySql = StringUtils.trim(querySql);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.endsWith(querySql, <span class="string">";"</span>)) &#123;</span><br><span class="line">querySql = StringUtils.substring(querySql, <span class="number">0</span>, querySql.length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> querySql;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以前一直不觉得正则表达式会有什么问题，实际运用中也没有遇到和去理解正则表达式的原理。才导致出现了上面所说的问题，有时候采用比正则表达式更原始更粗暴的方式解决问题可能反而会更加高效，这也许也是自己不精通正则表达式编写的问题，后续需要多多关注。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参与开源 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Apache Ranger的Presto数据权限控制</title>
      <link href="/2017/07/13/ranger-based-user-data-authority-control-for-presto/"/>
      <url>/2017/07/13/ranger-based-user-data-authority-control-for-presto/</url>
      
        <content type="html"><![CDATA[<p>我司大数据项目数据查询引擎使用到了presto，但是对于presto本身来说并没有人员及数据权限粒度的权限控制，我在上面做了一层封装。</p><h1 id="Apache-Ranger权限控制"><a href="#Apache-Ranger权限控制" class="headerlink" title="Apache Ranger权限控制"></a>Apache Ranger权限控制</h1><p>Apache Ranger是Apache开源的一款Hadoop生态的安全管理框架，它可以管理诸如：HDFS、HBASE、YARN等的权限访问和控制，提供了统一的权限管理后台，可以实施在线的权限变更和访问日志审计。<br>具体怎么使用Ranger进行权限控制及自定义服务的新增，可以参考以前的一篇文章：<a href="http://www.lpnote.com/2017/01/23/how-to-add-a-custom-plugin-in-ranger/">Ranger自定义插件开发</a></p><h1 id="sql解析引擎"><a href="#sql解析引擎" class="headerlink" title="sql解析引擎"></a>sql解析引擎</h1><h2 id="使用Druid解析"><a href="#使用Druid解析" class="headerlink" title="使用Druid解析"></a>使用Druid解析</h2><p>SQL解析引擎最开始使用的是Druid开源SQL解析引擎，相对来说它对于SQL的解析也是比较简单的，在我们的场景下，我们需要控制人员能够访问到大数据仓库的catalog/schema/table/column级，所以我们需要将sql中的涉及到的表和列需要解析出来，而Druid可以满足我们，虽然Druid提供了Oracle/Mysql/Postgresql等传统关系数据库的sql解析，但是并没有一些开源nosql的类sql解析，但像presto这样的开源数据查询引擎本身支持标准的sql语句，所以对于我们来说大部分的sql它是可以进行标准sql解析的，所以我们就采用了它来进行sql解析的工作。</p><p>一切其实都进行得比较顺利，期间也出现过一些小问题最后都比较好的解决，其中有一个比较大的问题是发现了一个解析复杂sql语句的bug，该bug我已经提交给温少，详细的issue地址如下：<a href="https://github.com/alibaba/druid/issues/1831" target="_blank" rel="noopener">复杂sql解析不正确的问题</a>。该bug主要的问题是在存在union查询时，如果两边的子句中不同的表使用了相同的别名，在最后的解析结果时会出现混乱，表和列的对应关系会出现问题，终其原因是应该是在解析器的工作状态下只存在了一张映射表，而且该表没有命名空间的概念，导致有不同命名空间(即不同子句下)的表及别名产生了相互覆盖和影响。</p><p><b>最新更新： 作者已经修复bug，最新版本中1.1.2中作者已经声称修复了该bug，但是我们已经换作自己的解析器工作，所以并没有及时去验证</b></p><h2 id="使用自研解析"><a href="#使用自研解析" class="headerlink" title="使用自研解析"></a>使用自研解析</h2><p>Presto数据查询引擎实际使用的是Antlr进行自定义的SQL解析，它本身提供了一些AST的节点信息Java源码，所以我只需要将SQL传入它的解析器得到一个Statement，根据Statement的详细情况遍历其节点及子节点并解析其内容就要吧得到相关的数据表和列，解析过程中我同样根据AST的路径重新生成了一棵树，通过遍历树就可以知道表别名及真实表的对应关系，以及字段和数据表的真实对应关系。</p><p>这里值得一提的是，虽然SQL解析的问题解决了，但是我们真正要解决的问题是得到非常准确的SQL中涉及到的表和字段。这里我们需要解决的是诸如：select <em> from a,b这样的字段解析，因为</em>为表所有的字段，这里有两张表，所以解析的时候要注意到两张表的字段都解析出来，还有一个地方要注意的是：select id from a,b， 在该情况下id并不确定它是属于a表还是b表，所以这里对于纯的sql解析还是存在困难的，对于具体权限的解析还要涉及对应于数据源的元数据schema结合来进行判断id字段应该是属于哪张表还是两张表都有，这样才能将id归属到对应表。</p><h1 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h1><p>在应用程序中通过对SQL的语法解析，得到了数据表(形如: catalog.schema.table)和数据列的对应关系，而我们在ranger中新定义了一种服务类型，并通过新增ranger插件的形式与应用程序连通。应用程序通过Ranger提供的插件SDK，通过相关的接口将用户名，数据表和数据列传入，Ranger插件结合从Ranger服务器得到的权限及策略进行匹配，如果匹配成功则返回成功响应，应用程序收到权限允许的响应后就放行用户的查询，如果权限验证失败，则提示用户查询权限被禁止。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Presto本身并未提供用户SQL查询权限的控制，我们实现的方式相对来说比较简单，我们自身提供了一层WEB层用于用户进行数据查询，所以所有的权限控制都做在了这WEB层，只要这WEB层控制住了用户的权限，那么在执行引擎之前就可以拦截非法的SQL执行请求。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> bug </tag>
            
            <tag> druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动清理Solr Doc &amp; Ranger Audits</title>
      <link href="/2017/07/11/solr-ttl-auto-purging-solr-documents-ranger-audits/"/>
      <url>/2017/07/11/solr-ttl-auto-purging-solr-documents-ranger-audits/</url>
      
        <content type="html"><![CDATA[<p>本文原文：<a href="https://community.hortonworks.com/articles/63853/solr-ttl-auto-purging-solr-documents-ranger-audits.html" target="_blank" rel="noopener">Solr TTL - Auto-Purging Solr Documents &amp; Ranger Audits</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近公司的使用的大数据项目中频繁出现以下的报错:</p><p><code>ERROR [org.apache.ranger.audit.queue.AuditBatchQueue0] o.a.s.c.solrj.impl.CloudSolrClient:924- Request to collection ranger_audits failed due to (400) org.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException: Error from server at http://172.18.2.6:8886/solr/ranger_audits_shard1_replica1: Exception writing document id bc8d53c6-0878-450c-a9b0-1b8d34c55e1d to the index; possible analysis error: number of documents in the index cannot exceed 2147483519, retry? 0</code></p><p>搜索了一下原因，大致是说solr分片的索引量不能超过最大值（2的32次方）。由于线上solr是单机版本，所以数据量上已经超了，为了解决这个问题，我搜索到了下面这篇文章。</p><p>这篇文章将讲述如何在Solr文档上使用TTL(time to live)来自动清理过期文档。</p><p>这篇文章我们将关注如何自动地从Solr集合中删除文档，关于solr文档TTL的问题如下：</p><ul><li>节点磁盘满</li><li>公司策略要求删除旧的审计日志(audit logs)</li><li>自动清理等</li></ul><p>SOLR-5795介绍了一个新的UpdateProcesser叫做<code>DocExpirationUpdateProcessorFactory</code>,它允许我们在solr文档上添加一个<code>过期时间</code>，并且确保过期的文档能够自动的被清除。</p><a id="more"></a><h1 id="如何做？"><a href="#如何做？" class="headerlink" title="如何做？"></a>如何做？</h1><p>每个被索引的文档都有一个表示文档过期时间的字段（<code>_ttle_</code>一般情况下是这个字段，当然你也可以修改这个字段的名字），该字段标识了该文档将在什么时候过期。这个字段是由文档被索引的时间的相对时间确定的，<code>_ttle_</code>设置了文档的生命周期，例如：+10DAYS,+2WEEKS,+4HOURS等等。</p><p>例如：</p><p>当前时间为: 2016-10-26 20:14:00<br><em>ttle</em>定义为：+2HOURS<br>那么过期时间将会是2016-10-26 22:14:00</p><p><code>deleteByQuery</code>将会根据<code>autoDeletePeriodSeconds</code>的配置来触发，例如：86400，那么后台的一个线程将会将每天的方式执行删除操作(1天等于86400秒)。 这些<code>deleteByQuery</code>将会删除所有的过期时间小于当前时间的文档。</p><p>如果你想要自定义删除程序，你可以使用<code>autoDeleteChainName</code>来配置你自己的<code>updateRequestProcessorChain</code>,这个配置是对所有的删除生效的。</p><p>一旦删除程序完成，一个软提交将被触发，那么所有的过期的文档将不会出现在查询结果中了。</p><h1 id="通常情况下的Solr"><a href="#通常情况下的Solr" class="headerlink" title="通常情况下的Solr"></a>通常情况下的Solr</h1><p>首先，来看看一个使用ttl的普通例子，在此我们使用一个叫做moveis的solr集合，并且我们希望在这个集合中的电影保存时间不超过10天。</p><p>找到solrCloud的一个节点（不用关心哪个节点，但是该节点上需要有zkcli客户端）</p><p>创建一个solr的初始化配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/lucidworks-hdpsearch/solr_collections</span><br><span class="line">mkdir /opt/lucidworks-hdpsearch/solr_collections/films</span><br><span class="line">chown -R solr:solr /opt/lucidworks-hdpsearch/solr_collections</span><br><span class="line">cp -R /opt/lucidworks-hdpsearch/solr/server/solr/configsets/basic_configs/conf /opt/lucidworks-hdpsearch/solr_collections/films</span><br></pre></td></tr></table></figure><h2 id="调整schema-xml"><a href="#调整schema-xml" class="headerlink" title="调整schema.xml"></a>调整schema.xml</h2><p>此例中文件在/opt/lucidworks-hdpsearch/solr_collections/films/conf下面</p><p>在schema.xml中添加以下字段的定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"directed_by"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text_general"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"initial_release_date"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"genre"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>同时添加以下字段用于自动清理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"_ttl_"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> <span class="attr">stored</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"expire_at"</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>_ttl_</code>表示这个文档应该保存多长时间（例如：+10DAYS）<br><code>expire_at</code>表示计算好的过期时间（索引时间+<em>ttl</em>）</p><h2 id="调整solrconfig-xml"><a href="#调整solrconfig-xml" class="headerlink" title="调整solrconfig.xml"></a>调整solrconfig.xml</h2><p>为了让过期时间能被自动计算，我们需要添加<code>DocExpirationUpdateProcessorFactory</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">updateRequestProcessorChain</span> <span class="attr">name</span>=<span class="string">"add-unknown-fields-to-the-schema"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">processor</span> <span class="attr">class</span>=<span class="string">"solr.DefaultValueUpdateProcessorFactory"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"fieldName"</span>&gt;</span>_ttl_<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"value"</span>&gt;</span>+14DAYS<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">processor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">processor</span> <span class="attr">class</span>=<span class="string">"solr.processor.DocExpirationUpdateProcessorFactory"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">int</span> <span class="attr">name</span>=<span class="string">"autoDeletePeriodSeconds"</span>&gt;</span>300<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"ttlFieldName"</span>&gt;</span>_ttl_<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"expirationFieldName"</span>&gt;</span>expire_at<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">processor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">processor</span> <span class="attr">class</span>=<span class="string">"solr.RemoveBlankFieldUpdateProcessorFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">processor</span> <span class="attr">class</span>=<span class="string">"solr.ParseBooleanFieldUpdateProcessorFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">processor</span> <span class="attr">class</span>=<span class="string">"solr.ParseLongFieldUpdateProcessorFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">processor</span> <span class="attr">class</span>=<span class="string">"solr.ParseDoubleFieldUpdateProcessorFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">processor</span> <span class="attr">class</span>=<span class="string">"solr.ParseDateFieldUpdateProcessorFactory"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">arr</span> <span class="attr">name</span>=<span class="string">"format"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd'T'HH:mm:ss.SSSZ<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd'T'HH:mm:ss,SSSZ<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd'T'HH:mm:ss.SSS<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd'T'HH:mm:ss,SSS<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd'T'HH:mm:ssZ<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd'T'HH:mm:ss<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd'T'HH:mmZ<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd'T'HH:mm<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd HH:mm:ss.SSSZ<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd HH:mm:ss,SSSZ<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd HH:mm:ss.SSS<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd HH:mm:ss,SSS<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd HH:mm:ssZ<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd HH:mm:ss<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd HH:mmZ<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd HH:mm<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">arr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">processor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">processor</span> <span class="attr">class</span>=<span class="string">"solr.AddSchemaFieldsUpdateProcessorFactory"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"defaultFieldType"</span>&gt;</span>text_general<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">lst</span> <span class="attr">name</span>=<span class="string">"typeMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"valueClass"</span>&gt;</span>java.lang.Boolean<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"fieldType"</span>&gt;</span>booleans<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">lst</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">lst</span> <span class="attr">name</span>=<span class="string">"typeMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"valueClass"</span>&gt;</span>java.util.Date<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"fieldType"</span>&gt;</span>tdates<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">lst</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">lst</span> <span class="attr">name</span>=<span class="string">"typeMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"valueClass"</span>&gt;</span>java.lang.Long<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"valueClass"</span>&gt;</span>java.lang.Integer<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"fieldType"</span>&gt;</span>tlongs<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">lst</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">lst</span> <span class="attr">name</span>=<span class="string">"typeMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"valueClass"</span>&gt;</span>java.lang.Number<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"fieldType"</span>&gt;</span>tdoubles<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">lst</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">processor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">processor</span> <span class="attr">class</span>=<span class="string">"solr.LogUpdateProcessorFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">processor</span> <span class="attr">class</span>=<span class="string">"solr.RunUpdateProcessorFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">updateRequestProcessorChain</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时要确保处理链在索引的每次更新都触发：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">initParamspath="</span>/<span class="attr">update</span>/**,/<span class="attr">query</span>,/<span class="attr">select</span>,/<span class="attr">tvrh</span>,/<span class="attr">elevate</span>,/<span class="attr">spell</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lst</span> <span class="attr">name</span>=<span class="string">"defaults"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"df"</span>&gt;</span>text<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"update.chain"</span>&gt;</span>add-unknown-fields-to-the-schema<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lst</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">initParams</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上传配置，创建集合，并索引示例数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/opt/lucidworks-hdpsearch/solr/server/scripts/cloud-scripts/zkcli.sh -zkhost horton0.example.com:2181/solr -cmd upconfig -confname films -confdir /opt/lucidworks-hdpsearch/solr_collections/films/conf</span><br><span class="line"></span><br><span class="line">curl --negotiate -u : &quot;http://horton0.example.com:8983/solr/admin/collections?action=CREATE&amp;name=films&amp;numShards=1&quot;</span><br><span class="line"></span><br><span class="line">curl --negotiate -u : &apos; http://horton0.example.com:8983/solr/films/update/json?commit=true&apos; --data-binary @/opt/lucidworks-hdpsearch/solr/example/films/films.json -H &apos;Content-type:application/json&apos;</span><br></pre></td></tr></table></figure><p>查询单个文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --negotiate -u : http://horton0.example.com:8983/solr/films/select?q=*&amp;start=0&amp;rows=1&amp;wt=json</span><br></pre></td></tr></table></figure></p><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"id"</span>:<span class="string">"/en/45_2006"</span>,</span><br><span class="line">   <span class="attr">"directed_by"</span>:[</span><br><span class="line">      <span class="string">"Gary Lennon"</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">"initial_release_date"</span>:<span class="string">"2006-11-30"</span>,</span><br><span class="line">   <span class="attr">"genre"</span>:[</span><br><span class="line">      <span class="string">"Black comedy"</span>,</span><br><span class="line">      <span class="string">"Thriller"</span>,</span><br><span class="line">      <span class="string">"Psychological thriller"</span>,</span><br><span class="line">      <span class="string">"Indie film"</span>,</span><br><span class="line">      <span class="string">"Action Film"</span>,</span><br><span class="line">      <span class="string">"Crime Thriller"</span>,</span><br><span class="line">      <span class="string">"Crime Fiction"</span>,</span><br><span class="line">      <span class="string">"Drama"</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">"name"</span>:<span class="string">".45"</span>,</span><br><span class="line">   <span class="attr">"_ttl_"</span>:<span class="string">"+10DAYS"</span>,</span><br><span class="line">   <span class="attr">"expire_at"</span>:<span class="string">"2016-11-06T05:46:46.565Z"</span>,</span><br><span class="line">   <span class="attr">"_version_"</span>:<span class="number">1549320539674247200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Ranger审计日志的管理"><a href="#Ranger审计日志的管理" class="headerlink" title="Ranger审计日志的管理"></a>Ranger审计日志的管理</h1><p>Ranger的审计日志可以保存在自定义的SolrCloud中，也可以保存在由Ambari Infra提供的SolrCloud中。</p><p>Ambari Infra是一项新服务，包括其自己的Solr实例，例如 存储Ranger审核或Atlas详细信息。 由于HDP 2.5审计日志已经正式由数据库转移到Solr。 在Ranger审核中，Solr（以及DB）只是一个短期存储，基本上它仅用于Ranger Admin UI中显示的审计信息。 审计长期存档应存储在HDFS或类似的内容中。</p><p>默认情况下，Ranger Solr Audit Collection附带预配置的TTL，因此Solr中的所有Ranger Audits将在90天后立即被删除。</p><p>如果您只想将审核日志存储30天或一周，会发生什么？ 看看下面的段落:)</p><h2 id="全新安装-Solr审计日志处于关闭"><a href="#全新安装-Solr审计日志处于关闭" class="headerlink" title="全新安装-Solr审计日志处于关闭"></a>全新安装-Solr审计日志处于关闭</h2><p>如果您以前没有使用过Solr Audits，还没有通过Ambari启用Ranger Audits to Solr，那么很容易调整TTL配置。 转到您的Ranger Admin节点并执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;s/+90DAYS/+30DAYS/g&apos; /usr/hdp/2.5.0.0-1245/ranger-admin/contrib/solr_for_audit_setup/conf/solrconfig.xml</span><br></pre></td></tr></table></figure><p>之后，您可以访问Ambari并启用Ranger Solr Audits，将要创建的集合将使用新的设置。</p><p>审计样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"id"</span>:<span class="string">"5519e650-440b-4c14-ace5-c1b79ee9f3d5-47734"</span>,</span><br><span class="line">   <span class="attr">"access"</span>:<span class="string">"READ_EXECUTE"</span>,</span><br><span class="line">   <span class="attr">"enforcer"</span>:<span class="string">"hadoop-acl"</span>,</span><br><span class="line">   <span class="attr">"repo"</span>:<span class="string">"bigdata_hadoop"</span>,</span><br><span class="line">   <span class="attr">"reqUser"</span>:<span class="string">"mapred"</span>,</span><br><span class="line">   <span class="attr">"resource"</span>:<span class="string">"/mr-history/tmp"</span>,</span><br><span class="line">   <span class="attr">"cliIP"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">   <span class="attr">"logType"</span>:<span class="string">"RangerAudit"</span>,</span><br><span class="line">   <span class="attr">"result"</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="attr">"policy"</span>:<span class="number">-1</span>,</span><br><span class="line">   <span class="attr">"repoType"</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="attr">"resType"</span>:<span class="string">"path"</span>,</span><br><span class="line">   <span class="attr">"reason"</span>:<span class="string">"/mr-history/tmp"</span>,</span><br><span class="line">   <span class="attr">"action"</span>:<span class="string">"read"</span>,</span><br><span class="line">   <span class="attr">"evtTime"</span>:<span class="string">"2016-10-26T05:14:21.686Z"</span>,</span><br><span class="line">   <span class="attr">"seq_num"</span>:<span class="number">71556</span>,</span><br><span class="line">   <span class="attr">"event_count"</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="attr">"event_dur_ms"</span>:<span class="number">0</span>,</span><br><span class="line">   <span class="attr">"_ttl_"</span>:<span class="string">"+30DAYS"</span>,</span><br><span class="line">   <span class="attr">"_expire_at_"</span>:<span class="string">"2016-11-25T05:14:23.107Z"</span>,</span><br><span class="line">   <span class="attr">"_version_"</span>:<span class="number">1549227904852820000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过期时间已经自动变成了30天。</p><h2 id="已经存在的一个Solr集群-Solr审计日志处于开启"><a href="#已经存在的一个Solr集群-Solr审计日志处于开启" class="headerlink" title="已经存在的一个Solr集群-Solr审计日志处于开启"></a>已经存在的一个Solr集群-Solr审计日志处于开启</h2><p>如果您已经将Ranger Audit日志启用到Solr并且已经在Solr集合中收集了大量文档，则可以通过以下步骤调整TTL。 但是，重要的是要记住，这不影响旧文档，只会影响新文档。</p><p>转到托管Solr实例的Ambari Infra节点（再次，具有zkcli客户端的任何节点）</p><h3 id="从zookeeper上下载solrconfig-xml"><a href="#从zookeeper上下载solrconfig-xml" class="headerlink" title="从zookeeper上下载solrconfig.xml"></a>从zookeeper上下载solrconfig.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/ambari-infra-solr/server/scripts/cloud-scripts/zkcli.sh --zkhost horton0.example.com:2181 -cmd getfile /infra-solr/configs/ranger_audits/solrconfig.xml solrconfig.xml</span><br></pre></td></tr></table></figure><h3 id="编辑solrconfig-xml文件"><a href="#编辑solrconfig-xml文件" class="headerlink" title="编辑solrconfig.xml文件"></a>编辑solrconfig.xml文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;s/+90DAYS/+14DAYS/g&apos; solrconfig.xml</span><br></pre></td></tr></table></figure><h3 id="上传solrconfig-xml文件到zookeeper上"><a href="#上传solrconfig-xml文件到zookeeper上" class="headerlink" title="上传solrconfig.xml文件到zookeeper上"></a>上传solrconfig.xml文件到zookeeper上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/ambari-infra-solr/server/scripts/cloud-scripts/zkcli.sh --zkhost horton0.example.com:2181 -cmd putfile /infra-solr/configs/ranger_audits/solrconfig.xml solrconfig.xml</span><br></pre></td></tr></table></figure><h3 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v --negotiate -u : &quot;http://horton0.example.com:8983/solr/admin/collections?action=RELOAD&amp;name=ranger_audits&quot;</span><br></pre></td></tr></table></figure><p>审计日志示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"id"</span>:<span class="string">"5519e650-440b-4c14-ace5-c1b79ee9f3d5-47742"</span>,</span><br><span class="line">   <span class="attr">"access"</span>:<span class="string">"READ_EXECUTE"</span>,</span><br><span class="line">   <span class="attr">"enforcer"</span>:<span class="string">"hadoop-acl"</span>,</span><br><span class="line">   <span class="attr">"repo"</span>:<span class="string">"bigdata_hadoop"</span>,</span><br><span class="line">   <span class="attr">"reqUser"</span>:<span class="string">"mapred"</span>,</span><br><span class="line">   <span class="attr">"resource"</span>:<span class="string">"/mr-history/tmp"</span>,</span><br><span class="line">   <span class="attr">"cliIP"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">   <span class="attr">"logType"</span>:<span class="string">"RangerAudit"</span>,</span><br><span class="line">   <span class="attr">"result"</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="attr">"policy"</span>:<span class="number">-1</span>,</span><br><span class="line">   <span class="attr">"repoType"</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="attr">"resType"</span>:<span class="string">"path"</span>,</span><br><span class="line">   <span class="attr">"reason"</span>:<span class="string">"/mr-history/tmp"</span>,</span><br><span class="line">   <span class="attr">"action"</span>:<span class="string">"read"</span>,</span><br><span class="line">   <span class="attr">"evtTime"</span>:<span class="string">"2016-10-26T05:16:21.674Z"</span>,</span><br><span class="line">   <span class="attr">"seq_num"</span>:<span class="number">71568</span>,</span><br><span class="line">   <span class="attr">"event_count"</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="attr">"event_dur_ms"</span>:<span class="number">0</span>,</span><br><span class="line">   <span class="attr">"_ttl_"</span>:<span class="string">"+14DAYS"</span>,</span><br><span class="line">   <span class="attr">"_expire_at_"</span>:<span class="string">"2016-11-09T05:16:23.118Z"</span>,</span><br><span class="line">   <span class="attr">"_version_"</span>:<span class="number">1549228030682988500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="清空集合中所有文档"><a href="#清空集合中所有文档" class="headerlink" title="清空集合中所有文档"></a>清空集合中所有文档</h1><p>如果要从Solr集合中删除所有文档，以下命令可能会有所帮助：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v --negotiate -u : &quot;http://horton0.example.com:8983/solr/films/update?commit=true&quot; -H &quot;Content-Type: text/xml&quot; --data-binary &quot;&lt;delete&gt;&lt;query&gt;*:*&lt;/query&gt;&lt;/delete&gt;&quot;</span><br></pre></td></tr></table></figure><p>或者通过浏览器操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://horton0.example.com:8983/solr/films/update?commit=true&amp;stream.body=&lt;delete&gt;&lt;query&gt;*:*&lt;/query&gt;&lt;/delete&gt;</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://lucene.apache.org/solr/5_3_0/solr-core/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.html" target="_blank" rel="noopener">https://lucene.apache.org/solr/5_3_0/solr-core/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.html</a></li><li><a href="https://cwiki.apache.org/confluence/display/solr/Update+Request+Processors" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/solr/Update+Request+Processors</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 翻译文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ranger </tag>
            
            <tag> 大数据 </tag>
            
            <tag> solr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发：AbstractQueuedAsynchronizer解析（二）</title>
      <link href="/2017/06/28/java-concurrency-abstract-queued-asynchronizer-part-two/"/>
      <url>/2017/06/28/java-concurrency-abstract-queued-asynchronizer-part-two/</url>
      
        <content type="html"><![CDATA[<p>在上一篇文章中，主要讲解了AQS的大体结构和用法，在本篇文章中则主要讲述AQS中等待队列的原理及实现。希望通过对AQS源码的解读加深自己去AQS的原理理解以及对AQS使用的熟练度。</p><a id="more"></a><h1 id="Node类介绍"><a href="#Node类介绍" class="headerlink" title="Node类介绍"></a>Node类介绍</h1><p><code>AbstractQueuedAsynchronizer.Node</code>该类是CLH（Craig, Landin, and Hagersten）锁队列的一个变种。CLH锁通常用于自旋锁。对于阻塞的同步器，我们也使用相同的策略来掌握其上一个节点的线程的控制信息。每个节点都有一个<code>status</code>字段用来记录该节点的线程是否应该被阻塞。每当一个节点被释放后，它的下游节点将被唤醒。队列中的每个节点也将用作一个具有特定通知的监视器，该监视器保存一个等待线程。状态字段不控制线程是否是<br>授予锁等。队列中的第一个线程将会尝试获取锁，但是只保证有权利去竞争锁，并不保证一定会获取成功。所以当线程被唤醒后重新竞争也意味着它们可能会被重新进入等待队列。</p><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>对于CLH队列的入队，你需要将新节点以原子的方式拼接到最后。对于出队，你只需要设置<code>head</code>指针就可以了。</p><p>队列的形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     +------+  prev +-----+       +-----+</span><br><span class="line">head |      | &lt;---- |     | &lt;---- |     |  tail</span><br><span class="line">     +------+       +-----+       +-----+</span><br></pre></td></tr></table></figure><p>插入一个新节点到CLH队列只需要在队列尾部<code>tail</code>进行单个原子操作，所以有一个简单的原子点（耗费很少的时间）从无排队到排队。同样的，出队只涉及<code>head</code>指针的更新。然而，节点需要更多的消耗来确定他们的后继者，部分原因是由于超时和中断而可能的取消。</p><p><code>prev</code>指针（在原来的CLH锁中未使用）主要用来处理取消。如果一个节点被取消了，那么它的后继者需要重新连接到一个没有被取消的前驱节点。关于自旋锁的解释，可以参看<a href="http://www.cs.rochester.edu/u/scott/synchronization/" target="_blank" rel="noopener">Scott和Scherer的论文</a></p><p>我们同样使用一个<code>next</code>指针来实现阻塞机制。每个节点都保存了它自己的线程id，所以前驱节点可以根据<code>next</code>指针知道应该唤醒哪一个线程。后继者必须要避免和新入队的节点竞争<code>next</code>指针的设置。必要时通过从原子向后检查来解决这个问题，当节点的后继显示为空时更新<code>tail</code>。（或者说，不同的是，<code>next</code>指针是一个优化手段，这样我们通常不需要反向扫描。）</p><p>取消采用了一种比较保守的做法。由于我们必须轮询其它节点是否被取消，我们可以忽略取消的节点在我们前面还是后面，这取决于我们将后继节点接驳到一个没有被取消的前驱节点上，由这个前驱节点来承担后继节点的唤醒职责。</p><p>CLH队列需要一个虚拟头节点才能开始。 但是，我们不会在构造中创造它们，因为如果从来没有竞争，那么所做的这些工作都是浪费。 相反，我们只在第一次争用发生时设置头和尾指针。</p><p>等待条件的线程使用相同的节点，但是使用额外的指针。只需要使用普通的链表队列（非并发队列）来保存节点，因为它们是在排它情况下进行访问的。在等待时，将节点插入到等待队列。在唤醒时，节点被转换到待运行队列，节点的<code>status</code>值被用来标识该节点处于什么队列之中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** Marker to indicate a node is waiting in shared mode */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="comment">/** Marker to indicate a node is waiting in exclusive mode */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** waitStatus value to indicate thread has cancelled */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/** waitStatus value to indicate successor's thread needs unparking */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/** waitStatus value to indicate thread is waiting on condition */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * waitStatus value to indicate the next acquireShared should</span></span><br><span class="line"><span class="comment">         * unconditionally propagate</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Status field, taking on only the values:</span></span><br><span class="line"><span class="comment">         *   SIGNAL:     The successor of this node is (or will soon be)</span></span><br><span class="line"><span class="comment">         *               blocked (via park), so the current node must</span></span><br><span class="line"><span class="comment">         *               unpark its successor when it releases or</span></span><br><span class="line"><span class="comment">         *               cancels. To avoid races, acquire methods must</span></span><br><span class="line"><span class="comment">         *               first indicate they need a signal,</span></span><br><span class="line"><span class="comment">         *               then retry the atomic acquire, and then,</span></span><br><span class="line"><span class="comment">         *               on failure, block.</span></span><br><span class="line"><span class="comment">         *   CANCELLED:  This node is cancelled due to timeout or interrupt.</span></span><br><span class="line"><span class="comment">         *               Nodes never leave this state. In particular,</span></span><br><span class="line"><span class="comment">         *               a thread with cancelled node never again blocks.</span></span><br><span class="line"><span class="comment">         *   CONDITION:  This node is currently on a condition queue.</span></span><br><span class="line"><span class="comment">         *               It will not be used as a sync queue node</span></span><br><span class="line"><span class="comment">         *               until transferred, at which time the status</span></span><br><span class="line"><span class="comment">         *               will be set to 0. (Use of this value here has</span></span><br><span class="line"><span class="comment">         *               nothing to do with the other uses of the</span></span><br><span class="line"><span class="comment">         *               field, but simplifies mechanics.)</span></span><br><span class="line"><span class="comment">         *   PROPAGATE:  A releaseShared should be propagated to other</span></span><br><span class="line"><span class="comment">         *               nodes. This is set (for head node only) in</span></span><br><span class="line"><span class="comment">         *               doReleaseShared to ensure propagation</span></span><br><span class="line"><span class="comment">         *               continues, even if other operations have</span></span><br><span class="line"><span class="comment">         *               since intervened.</span></span><br><span class="line"><span class="comment">         *   0:          None of the above</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * The values are arranged numerically to simplify use.</span></span><br><span class="line"><span class="comment">         * Non-negative values mean that a node doesn't need to</span></span><br><span class="line"><span class="comment">         * signal. So, most code doesn't need to check for particular</span></span><br><span class="line"><span class="comment">         * values, just for sign.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * The field is initialized to 0 for normal sync nodes, and</span></span><br><span class="line"><span class="comment">         * CONDITION for condition nodes.  It is modified using CAS</span></span><br><span class="line"><span class="comment">         * (or when possible, unconditional volatile writes).</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Link to predecessor node that current node/thread relies on</span></span><br><span class="line"><span class="comment">         * for checking waitStatus. Assigned during enqueuing, and nulled</span></span><br><span class="line"><span class="comment">         * out (for sake of GC) only upon dequeuing.  Also, upon</span></span><br><span class="line"><span class="comment">         * cancellation of a predecessor, we short-circuit while</span></span><br><span class="line"><span class="comment">         * finding a non-cancelled one, which will always exist</span></span><br><span class="line"><span class="comment">         * because the head node is never cancelled: A node becomes</span></span><br><span class="line"><span class="comment">         * head only as a result of successful acquire. A</span></span><br><span class="line"><span class="comment">         * cancelled thread never succeeds in acquiring, and a thread only</span></span><br><span class="line"><span class="comment">         * cancels itself, not any other node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Link to the successor node that the current node/thread</span></span><br><span class="line"><span class="comment">         * unparks upon release. Assigned during enqueuing, adjusted</span></span><br><span class="line"><span class="comment">         * when bypassing cancelled predecessors, and nulled out (for</span></span><br><span class="line"><span class="comment">         * sake of GC) when dequeued.  The enq operation does not</span></span><br><span class="line"><span class="comment">         * assign next field of a predecessor until after attachment,</span></span><br><span class="line"><span class="comment">         * so seeing a null next field does not necessarily mean that</span></span><br><span class="line"><span class="comment">         * node is at end of queue. However, if a next field appears</span></span><br><span class="line"><span class="comment">         * to be null, we can scan prev's from the tail to</span></span><br><span class="line"><span class="comment">         * double-check.  The next field of cancelled nodes is set to</span></span><br><span class="line"><span class="comment">         * point to the node itself instead of null, to make life</span></span><br><span class="line"><span class="comment">         * easier for isOnSyncQueue.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The thread that enqueued this node.  Initialized on</span></span><br><span class="line"><span class="comment">         * construction and nulled out after use.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Link to next node waiting on condition, or the special</span></span><br><span class="line"><span class="comment">         * value SHARED.  Because condition queues are accessed only</span></span><br><span class="line"><span class="comment">         * when holding in exclusive mode, we just need a simple</span></span><br><span class="line"><span class="comment">         * linked queue to hold nodes while they are waiting on</span></span><br><span class="line"><span class="comment">         * conditions. They are then transferred to the queue to</span></span><br><span class="line"><span class="comment">         * re-acquire. And because conditions can only be exclusive,</span></span><br><span class="line"><span class="comment">         * we save a field by using special value to indicate shared</span></span><br><span class="line"><span class="comment">         * mode.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node nextWaiter;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns true if node is waiting in shared mode.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns previous node, or throws NullPointerException if null.</span></span><br><span class="line"><span class="comment">         * Use when predecessor cannot be null.  The null check could</span></span><br><span class="line"><span class="comment">         * be elided, but is present to help the VM.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the predecessor of this node</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">            Node p = prev;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">            <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">            <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在以上代码中：</p><ul><li><p><code>prev</code>指针被用于检查<code>waitStatus</code>，该指针在入队的时候被设置，然后在出队的时候被置空。同时，在前驱节点被取消时，我们可以快速的通过遍历<code>prev</code>找到新的非取消节点作为新的前驱节点。非取消状态的前驱节点是一定存在的，因为<code>head</code>节点永远不会被取消：原因是一个节点成为<code>head</code>节点的前提是该节点成功获取到锁。一个被取消节点的线程永远不会获取到锁，并且线程只能取消属于它自己的节点，并不能取消其它不属于它的节点。</p></li><li><p><code>next</code>指针被用于<code>release</code>释放锁的阶段。该指针在入队，前驱节点被取消时被设置，以及在出队时被置空（有助于GC回收）。入队操作直到attachment后才设置前驱节点的<code>next</code>字段，所以看到一个空的<code>next</code>字段并不一定意味着该节点在队列的结尾。 但是，如果<code>next</code>字段看起来是空的，我们可以从尾部反向扫描prev，以进行双重检查。被取消节点的<code>next</code>字段被设置为指向节点本身而不是null，这更有利于AQS的isOnSyncQueue方法。</p></li></ul><p>isOnSyncQueue方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if a node, always one that was initially placed on</span></span><br><span class="line"><span class="comment"> * a condition queue, is now waiting to reacquire on sync queue.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node the node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if is reacquiring</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isOnSyncQueue</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.waitStatus == Node.CONDITION || node.prev == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.next != <span class="keyword">null</span>) <span class="comment">// If has successor, it must be on queue</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * node.prev can be non-null, but not yet on queue because</span></span><br><span class="line"><span class="comment">     * the CAS to place it on queue can fail. So we have to</span></span><br><span class="line"><span class="comment">     * traverse from tail to make sure it actually made it.  It</span></span><br><span class="line"><span class="comment">     * will always be near the tail in calls to this method, and</span></span><br><span class="line"><span class="comment">     * unless the CAS failed (which is unlikely), it will be</span></span><br><span class="line"><span class="comment">     * there, so we hardly ever traverse much.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> findNodeFromTail(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if node is on sync queue by searching backwards from tail.</span></span><br><span class="line"><span class="comment"> * Called only when needed by isOnSyncQueue.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if present</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">findNodeFromTail</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    Node t = tail;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == node)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        t = t.prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>AQS中Node类提供了一个双向链表结构，分别使用<code>prev</code>和<code>next</code>指针构成双向指针。 <code>prev</code>指针在入队时设置，在出队时置空；<code>next</code>指针在入队，前驱节点被取消被设置，在出队时被置空。由该类构造成了AQS的等待队列，并在AQS中发挥重要的作用。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 源码解读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发：AbstractQueuedSynchronizer解析（一）</title>
      <link href="/2017/06/23/java-concurrency-abstract-queued-synchronizer-part-one/"/>
      <url>/2017/06/23/java-concurrency-abstract-queued-synchronizer-part-one/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：本文基于JDK 8，全文中所有的叙述都是基于该版本。</p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>AbstractQueuedSynchronizer</code>类是JUC类库的核心实现，它是实现Java并发核心库众多并发工具的基础，基于它及它的衍生品的并发核心包括<code>ReentrantReadWriteLock</code>,<code>ArrayBlockingQueue</code>,<code>CopyOnWriteArrayList</code>,<code>CountDownLatch</code>,<code>CyclicBarrier</code>等等。它为实现同步锁以及相关的基于FIFO等待队列的同步器（如：semaphores,events等）提供了一个统一框架。该类被设计用来为绝大多数基于一个原子int型状态值的同步器提供有用的基础设施。子类必须实现protected方法来改变这个状态值，该状态值决定了对象是被acquired还是released。该类的其它方法提供了所有的队列和阻塞管理。子类可以维护其它的状态字段，但是只有通过使用<code>getState</code>,<code>setState</code>,<code>compareAndSetState</code>方法才能被同步追踪。</p><a id="more"></a><p>子类应该被定义为非公开的内部帮助类来实现它闭包类的同步属性。<code>AbstractQueuedSynchronizer</code>未实现任何同步接口。相反，它定义了一些方法比如<code>acquireInterruptibly</code>被用于具体的锁或者同步器来实现它们的public方法。</p><p>该类提供了两种模式：排它和共享，当处于排它模式时，其它线程的尝试请求(attempted acquires)将不会成功，而对于共享模式来说，其它线程的请求则会成功（但不是必须）。该类并不理解这些不同点当一个共享模式获取成功时，下一个等待纯种（如果存在）也必须确定是否可以也获取到。不同的模式都共享相同的FIFO队列，通常，子类只实现这两种模式中的一种，但是这两者都可以在一个例子中发挥作用，比如ReadwriteLock。只支持排它或者共享模式的子类，不用去实现那些不支持模式的方法，因为也不会用到这些方法。</p><p>该类定义了一个嵌套的<code>ConditionObject</code>类，该类实现了<code>Condition</code>接口并被用于子类方法的排它模式。该类提供了检查和监控的方法以便于使用到<code>AbstractQueuedSynchronizer</code>的这些类可以很方便的使用。</p><p>该类的序列化只会存储一个维护状态的原子int值，所以对于反序列化来说，反序列化对象中线程等待队列将会为空，当然子类也可以自己定义一个<code>readObject</code>方法用于自定义类的状态恢复。</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>使用该类作为同步器的一个基础，需要实现以下方法（这些方法可以使用<code>getState</code>,<code>setState</code>,<code>compareAndSetState</code>作为检测和修改同步状态的方法）：</p><ul><li>tryAcquire</li><li>tryRelease</li><li>tryAcquireShared</li><li>tryReleaseShared</li><li>isHeldExlusively</li></ul><p>以上这些方法默认在AQS中被实现为抛出<code>UnsupportedOperationException</code>，这些方法的实现必须是内部线程安全的，并且应该是快速的且不被阻塞的。这些方法是唯一该类的方法，其实方法都被定义成<code>final</code>，因为它们的逻辑不能被继承子类修改。你也许也会发现该类从<code>AbstractOwnableSynchronizer</code>类继承下来的一些方法对于保持对排它同步器的线程追踪非常有帮助，同时也鼓励使用这些方法来加强对持有锁的线程的监控。</p><p>虽然该类是基于内部的一个FIFO队列，但是它不会自动的采用，排它同步器的核心采用以下形式：</p><p>获取锁（伪代码）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (!tryAcquire(arg)) &#123;</span><br><span class="line">         enqueue thread if it is not already queued;</span><br><span class="line">         possibly block current thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>释放锁（伪代码）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (tryRelease(arg))</span><br><span class="line">         unblock the first queued thread;</span><br></pre></td></tr></table></figure></p><p>因为获取锁时检查是在入队之前，所以新的获取锁的线程会被放到等待队列的最前面。然而如果你愿意，你也可以重新定义<code>tryAcquire</code>或者<code>tryAcquireShared</code>来改写这样的规则来提供一个公平的FIFO顺序。在特殊情况下，大部分公平同步器会在<code>hasQueuedPredecessors</code>返回true的情况下将<code>tryAcquire</code>方法定义为返回false。</p><p>对于默认的取锁方式（也称之为贪婪），吞吐量和扩展性通常情况都是最高的。然而这里并不保证公平，也不保证没有饥饿的出现，更早入队的线程是可以再次争抢锁的，并且拥有和新进线程一样的机会。而且通常意义上的自旋是在被阻塞之前它们可能会多次执行<code>tryAcquire</code>，这些可能会穿插在其它计算之间。自旋对于排它锁持有的时间通常很短时将发挥非常大的用处，然而对于持有锁时间比较长的情况下，这样就会造成非常大的计算浪费。如果需要，你也可以提前检测<code>hasContended</code>或者<code>hasQueuedThreads</code>这些<code>快速路径</code>来确认锁不会被竞争。</p><p>该类提供了一个有效的易扩展的工具，凡是使用int型状态作为同步状态同时使用一个FIFO队列的的同步器都可以使用。如果这些都不能满足你的话，你也可以使用<code>java.util.concurrent.atomic</code>包，你自己定义的<code>java.util.Queue</code>实现类以及<code>LockSupport</code>阻塞支持来自己实现一个同步器。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>下面这个例子是一个不可重入的排它锁实现，它使用int型的0值表示未被加锁，1值表示被加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mutex</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Our internal helper class</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Reports whether in locked state</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Acquires the lock if state is zero</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> acquires == <span class="number">1</span>; <span class="comment">// Otherwise unused</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">          setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Releases the lock by setting state to zero</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> releases == <span class="number">1</span>; <span class="comment">// Otherwise unused</span></span><br><span class="line">        <span class="keyword">if</span> (getState() == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">        setState(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Provides a Condition</span></span><br><span class="line">      <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject(); &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Deserializes properly</span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        setState(<span class="number">0</span>); <span class="comment">// reset to unlocked state</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The sync object does all the hard work. We just forward to it.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span>                </span>&#123; sync.acquire(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span>          </span>&#123; <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span>              </span>&#123; sync.release(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> sync.newCondition(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span>         </span>&#123; <span class="keyword">return</span> sync.isHeldExclusively(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasQueuedThreads</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> sync.hasQueuedThreads(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>下面这个例子是一个类似<code>CountDownLatch</code>的Latch。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooleanLatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">boolean</span> <span class="title">isSignalled</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> getState() != <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> ignore)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isSignalled() ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> ignore)</span> </span>&#123;</span><br><span class="line">        setState(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSignalled</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> sync.isSignalled(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span>         </span>&#123; sync.releaseShared(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 源码解读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Git合并多个提交的做法：rebase</title>
      <link href="/2017/06/14/usage-of-rebase-commits-in-git/"/>
      <url>/2017/06/14/usage-of-rebase-commits-in-git/</url>
      
        <content type="html"><![CDATA[<p>在使用Git作为版本管理的过程中，在一个分支上开发很久了以后，当你回顾以前的提交时，会发现以前的提交非常杂乱而且提交的日志标注不清时，这个时候你就会非常想重新整理一下你的提交了。将多个提交日志合并成一个提交，而这个操作Git提供了这样的方法： <code>git rebase -i</code></p><a id="more"></a><p>一个简单的例子：</p><p>对于一个已经存在的Git仓库，我们向其中添加一个文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>touch a.txt</span><br><span class="line"><span class="meta">$</span>git add a.txt</span><br><span class="line"><span class="meta">$</span>git commit -m "add a.txt"</span><br><span class="line"><span class="meta">$</span>touch b.txt</span><br><span class="line"><span class="meta">$</span>git add b.txt</span><br><span class="line"><span class="meta">$</span>git commit -m "add b.txt"</span><br><span class="line"><span class="meta">$</span>git add c.txt</span><br><span class="line"><span class="meta">$</span>git commit -m "add c.txt"</span><br><span class="line"><span class="meta">$</span>git push</span><br></pre></td></tr></table></figure></p><p>那么提交历史是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">commit f03350c8981c2df08d9443a9befb6f47aeedceb5 (HEAD -&gt; test, origin/test)</span><br><span class="line">Author: lpwork &lt;lpwork@foxmail.com&gt;</span><br><span class="line">Date:   Mon Jun 15 11:58:37 2017 +0800</span><br><span class="line"></span><br><span class="line">    add c.txt</span><br><span class="line"></span><br><span class="line">commit 239c69ef6e5ac8a2716bd7f561a6b6aa8fd52074</span><br><span class="line">Author: lpwork &lt;lpwork@foxmail.com&gt;</span><br><span class="line">Date:   Mon Jun 15 11:58:17 2017 +0800</span><br><span class="line"></span><br><span class="line">    add b.txt</span><br><span class="line"></span><br><span class="line">commit 5008e5acb3b437276e3f1796de09071e1ccd7532</span><br><span class="line">Author: lpwork &lt;lpwork@foxmail.com&gt;</span><br><span class="line">Date:   Mon Jun 15 11:57:33 2017 +0800</span><br><span class="line"></span><br><span class="line">    add a.txt</span><br></pre></td></tr></table></figure><p>假如我们想要合并提交文件c.txt和b.txt的两次提交，我们的做法是：</p><ul><li>取得合并提交的前一个提交的id，这里我们取得的是<code>5008e5acb3b437276e3f1796de09071e1ccd7532</code></li><li>执行git rebase</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i 5008e5acb3b437276e3f1796de09071e1ccd7532</span><br></pre></td></tr></table></figure><p>显示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pick 239c69e add b.txt</span><br><span class="line">pick f03350c add c.txt</span><br><span class="line"></span><br><span class="line"># Rebase 5008e5a..f03350c onto 5008e5a (2 commands)</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick = use commit</span><br><span class="line"># r, reword = use commit, but edit the commit message</span><br><span class="line"># e, edit = use commit, but stop for amending</span><br><span class="line"># s, squash = use commit, but meld into previous commit</span><br><span class="line"># f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</span><br><span class="line"># x, exec = run command (the rest of the line) using shell</span><br><span class="line"># d, drop = remove commit</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line">#</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure></p><p>这里我们选择保留如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pick 239c69e add b.txt and c.txt</span><br><span class="line">squash f03350c add c.txt</span><br><span class="line"></span><br><span class="line"># Rebase 5008e5a..f03350c onto 5008e5a (2 commands)</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick = use commit</span><br><span class="line"># r, reword = use commit, but edit the commit message</span><br><span class="line"># e, edit = use commit, but stop for amending</span><br><span class="line"># s, squash = use commit, but meld into previous commit</span><br><span class="line"># f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</span><br><span class="line"># x, exec = run command (the rest of the line) using shell</span><br><span class="line"># d, drop = remove commit</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line">#</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure><p>:wq保存之后，得到如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># This is a combination of 2 commits.</span><br><span class="line"># This is the 1st commit message:</span><br><span class="line"></span><br><span class="line">add b.txt</span><br><span class="line"></span><br><span class="line"># This is the commit message #2:</span><br><span class="line"></span><br><span class="line">add c.txt</span><br><span class="line"></span><br><span class="line"># Please enter the commit message for your changes. Lines starting</span><br><span class="line"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</span><br><span class="line">#</span><br><span class="line"># Date:      Mon Aug 21 16:43:14 2017 +0800</span><br><span class="line">#</span><br><span class="line"># interactive rebase in progress; onto 5008e5a</span><br><span class="line"># Last commands done (2 commands done):</span><br><span class="line">#    reword 239c69e add b.txt and c.txt</span><br><span class="line">#    squash f03350c add c.txt</span><br><span class="line"># No commands remaining.</span><br><span class="line"># You are currently rebasing branch &apos;test2&apos; on &apos;5008e5a&apos;.</span><br><span class="line">#</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#       new file:   b.txt</span><br><span class="line">#       new file:   c.txt</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>这里就是我们要修改的合并的提交日志了。我们修改成如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">add b.txt and c.txt</span><br><span class="line"></span><br><span class="line"># Please enter the commit message for your changes. Lines starting</span><br><span class="line"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</span><br><span class="line">#</span><br><span class="line"># Date:      Mon Aug 21 16:43:14 2017 +0800</span><br><span class="line">#</span><br><span class="line"># interactive rebase in progress; onto 5008e5a</span><br><span class="line"># Last commands done (2 commands done):</span><br><span class="line">#    reword 239c69e add b.txt and c.txt</span><br><span class="line">#    squash f03350c add c.txt</span><br><span class="line"># No commands remaining.</span><br><span class="line"># You are currently rebasing branch &apos;test2&apos; on &apos;5008e5a&apos;.</span><br><span class="line">#</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#       new file:   b.txt</span><br><span class="line">#       new file:   c.txt</span><br><span class="line">#</span><br></pre></td></tr></table></figure></p><p>保存并提交。再次查看git提交日志时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">commit 14d341cd6eddf4e8b04502bcf261d9becfbedd55 (HEAD -&gt; test, origin/test)</span><br><span class="line">Author: lpwork &lt;lpwork@foxmail.com&gt;</span><br><span class="line">Date:   Mon Jun 15 12:23:14 2017 +0800</span><br><span class="line"></span><br><span class="line">    add b.txt and c.txt</span><br><span class="line"></span><br><span class="line">commit 5008e5acb3b437276e3f1796de09071e1ccd7532</span><br><span class="line">Author: lpwork &lt;lpwork@foxmail.com&gt;</span><br><span class="line">Date:   Mon Jun 15 11:57:33 2017 +0800</span><br><span class="line"></span><br><span class="line">    add a.txt</span><br></pre></td></tr></table></figure></p><p>注意此时我们的rebase还只是在我们自己的本地进行了合并，最后还需要push到远程仓库中。</p><blockquote><p>注意： 这里需要说明的是，在很大部分情况下，在本地进行了rebase操作后，push远程仓库都有可能会造成冲突而无法提交。这里的一个做法是使用强制push <code>git push --force</code>。<br>注意，强制push可能会造成别人的提交丢失，请确保你在push前合并完别人的push结果<code>git pull</code>。</p></blockquote><p>通过这样的方式，可以让你重新整理杂乱无章的提交历史，让提交历史更加清晰，同时可以清除一些无用的提交信息，提高历史查询的效率。</p><p>最后需要关注一下rebase提供的一些可选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick = use commit</span><br><span class="line"># r, reword = use commit, but edit the commit message</span><br><span class="line"># e, edit = use commit, but stop for amending</span><br><span class="line"># s, squash = use commit, but meld into previous commit</span><br><span class="line"># f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</span><br><span class="line"># x, exec = run command (the rest of the line) using shell</span><br><span class="line"># d, drop = remove commit</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line">#</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Presto独立服务发现(Discovery Service)</title>
      <link href="/2017/05/31/discovery-service-install-of-presto/"/>
      <url>/2017/05/31/discovery-service-install-of-presto/</url>
      
        <content type="html"><![CDATA[<h1 id="Presto的运行机制"><a href="#Presto的运行机制" class="headerlink" title="Presto的运行机制"></a>Presto的运行机制</h1><p>Presto的运行机制如下：<br><img src="/2017/05/31/discovery-service-install-of-presto/presto-overview.png" title="[presto结构总览]"></p><p>不管是coordinator还是worker配置项中都有一项<code>discovery.uri</code>,这个是一个比较核心的东西，简单来说就是服务发现的地址。</p><p>coordinator和worker都会将自身注册到这个服务发现地址上，供彼此发现对方，coordinator可以通过个发现服务知道有多少worker节点，而worker节点可以通过这个发现服务知道coordinator是谁，这样做的好处是coordinator和worker做到了完全的解耦，彼此都不需要在启动时配置对方，而是通过第三方服务来发现对方。</p><a id="more"></a><h1 id="Presto-On-Yarn的问题"><a href="#Presto-On-Yarn的问题" class="headerlink" title="Presto On Yarn的问题"></a>Presto On Yarn的问题</h1><p>在默认的情况下这个发现服务是内嵌在coordinator中的，也就是coordinator在启动的时候会启动一个内嵌的发现服务，在这种情况下，coordinator将自身注册给自身的发现服务，而worker则将发现服务的地址配置成coordinator的发现服务地址，此时coordinator同时充当presto协调者和服务发现的提供者。</p><p>以上这种情况在一般的情况下可以良好的运行，但是当我们将presto服务迁移到Presto On Yarn时就会遇到一些问题：</p><ul><li><p>presto on yarn是一种动态的运行策略，在yarn上面，哪个节点运行presto的coordinator和worker是不确定的，这会给外部调用presto的程序带来困扰</p><p>外部的程序和presto的交流一般是通过presto提供的客户端来调用，而它的客户端需要事先知道presto的coordinator地址，在presto on yarn的情况下，coordinator的地址是不确定的，有可能会发生变化。</p><p>这种情况下的处理方案是：<b>将presto的服务发现方案外置</b>，将presto的服务发现服务独立于presto的coordinator运行，将presto的coordinator和worker中的<code>discovery.uri</code>配置成外部独立的发现服务地址，在外部提供具有HA的服务发现，提供稳定的发现服务。</p><p>Presto的服务发现是基于airlift的服务发现做的实现，airlift的服务发现可以在<a href="https://github.com/airlift/discovery" target="_blank" rel="noopener">这里</a>查看实现和源码，不过它基本是处于无文档的状态，所以理解要多花些功夫。</p><p>airlift的服务发现的总体思路是基于http提供一个提供服务发现的HA集群，集群之间通过http通信，通过数据同步方式，提供最终一致性的保证。</p><p>这里我们就来说说airlift的服务发现服务的HA安装。</p></li></ul><h1 id="Airlift-Discovery安装"><a href="#Airlift-Discovery安装" class="headerlink" title="Airlift Discovery安装"></a>Airlift Discovery安装</h1><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>下载源码<br>git clone <a href="https://github.com/airlift/discovery.git" target="_blank" rel="noopener">https://github.com/airlift/discovery.git</a></li><li>编译源码<br>mvn clean package -DskipTests=true</li><li>环境安装<br>将target目录下的discovery-server-<version>-SNAPSHOT.tar.gz安装包copy至安装机器上进行解压安装<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2></version></li><li>解压后在解压目录新建etc目录，并在etc目录下新建以下配置文件<ul><li>config.properties</li><li>jvm.config</li><li>log.properties</li><li>node.properties</li><li>service-inventory.json</li></ul></li><li><p>配置文件<br>config.properties文件为主配置文件，主要配置该discovery服务的主要配置信息，如运行环境，服务端口，节点id等信息，配置信息一般情况如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node.environment=test</span><br><span class="line">http-server.http.port=8411</span><br><span class="line">node.id=597A741E-9968-40E2-BB4D-7AF26DE18689</span><br><span class="line">service-inventory.uri=file://&lt;installation-location-of-your-discovery-service&gt;/etc/service-inventory.json</span><br></pre></td></tr></table></figure><p>node.environment指定运行环境<br>http-server.http.port指定服务运行的端口<br>node.id指定该节点的id<br>service-inventory.uri指定了该集群拥有的所有节点信息</p><p>jvm.config文件主要配置服务jvm的配置信息，该配置和presto的配置文件的jvm配置类似，一般情况按如下信息自行进行调整：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-server</span><br><span class="line">-Xmx2G</span><br><span class="line">-XX:+UseG1GC</span><br><span class="line">-XX:G1HeapRegionSize=32M</span><br><span class="line">-XX:+UseGCOverheadLimit</span><br><span class="line">-XX:+ExplicitGCInvokesConcurrent</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:OnOutOfMemoryError=kill -9 %p</span><br></pre></td></tr></table></figure><p>log.properties主要记录的日志级别调整，这里不再叙述<br>node.properties主要记录的是节点相关的配置，类似于config.properties配置，但是不同点在于config.properties强调集群共有的特性，而node.properites强调节点间相同配置项的不同配置值区别<br>service-inventory.json这是一个比较重要的文件，里面记录了整个集群的信息，discovery集群利用这个配置文件获取集群的所有信息，知道集群中所有部署的情况及如何与其它节点进行通信。它的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   &#123;</span><br><span class="line">   &quot;environment&quot;: &quot;test&quot;,</span><br><span class="line">   &quot;services&quot;: [</span><br><span class="line">       &#123;</span><br><span class="line">           &quot;id&quot;: &quot;C8A9EE64-0476-452C-8638-8E72F3EE3CA6&quot;,</span><br><span class="line">           &quot;nodeId&quot;: &quot;597A741E-9968-40E2-BB4D-7AF26DE18689&quot;,</span><br><span class="line">           &quot;type&quot;: &quot;discovery&quot;,</span><br><span class="line">           &quot;pool&quot;: &quot;general&quot;,</span><br><span class="line">           &quot;location&quot;: &quot;/172.17.31.245&quot;,</span><br><span class="line">           &quot;state&quot;: &quot;RUNNING&quot;,</span><br><span class="line">           &quot;properties&quot;: &#123;</span><br><span class="line">               &quot;http&quot;: &quot;http://172.17.31.245:8411&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">           &quot;id&quot;: &quot;370AF416-5F44-47D3-BFB6-D93A92676D49&quot;,</span><br><span class="line">           &quot;nodeId&quot;: &quot;0BA42FDB-5DBA-4A2C-BE26-9596B7B4368E&quot;,</span><br><span class="line">           &quot;type&quot;: &quot;discovery&quot;,</span><br><span class="line">           &quot;pool&quot;: &quot;general&quot;,</span><br><span class="line">           &quot;location&quot;: &quot;/172.17.31.246&quot;,</span><br><span class="line">           &quot;state&quot;: &quot;RUNNING&quot;,</span><br><span class="line">           &quot;properties&quot;: &#123;</span><br><span class="line">               &quot;http&quot;: &quot;http://172.17.31.246:8411&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上面的配置中，集群中有两个节点，并指出了两个节点的节点id信息，以及他们的通信地址<code>properties.http</code>等信息，有了这份信息，集群中的各节点就知道如何同其它节点进行数据交互与同步了。</p></li><li><p>运行集群</p><p>在集群每个节点的安装目录下bin目录中运行: ./launcher start进行服务的启动， ./launcher stop 进行服务的停止 ./launcher restart 进行服务的重启</p></li><li><p>验证服务</p><p>当服务运行成功后，可以通过浏览器进行访问，若配置的端口为8411，则访问发现服务的地址为：<a href="http://localhost:8411/v1/service" target="_blank" rel="noopener">http://localhost:8411/v1/service</a><br>这个地址将返回所有注册到这个发现服务的服务的列表</p></li><li><p>高可用</p><p>因多台机器共同组成了发现服务，发现服务有最终一致性保障，所以只需要访问其中一台就可以，但是为了高可用，可以在发现服务前端加入NGINX作流量分担与负载解决高可用的问题</p></li></ol><h1 id="Presto节点信息注册到发现服务"><a href="#Presto节点信息注册到发现服务" class="headerlink" title="Presto节点信息注册到发现服务"></a>Presto节点信息注册到发现服务</h1><p>  将Presto的节点信息注册到发现服务非常简单，上面也说过了，Presto节点之前是通过自身位集群的coordinator节点充当服务发现者提供服务的，现在只需要将<code>discovery.uri</code>的配置换成外置的airlift服务发现服务地址就可以了用了。在这个示例中我将配置值修改成了’172.17.31.245:8411’,因为是测试环境，不需要过于要求的HA场景，所以我只配置了服务发现集群中的一个节点。</p><h1 id="Presto的客户端集成"><a href="#Presto的客户端集成" class="headerlink" title="Presto的客户端集成"></a>Presto的客户端集成</h1><p>  因Presto的客户端调用需要知道coordinator，而现在Presot On Yarn上了过后，coordinator的地址是不定的，且是注册到服务发现上的，对于Presto客户端想知道明确的coordinator地址需要做一些改变：将调用presto客户端前要先得到coordinator，而要得到coordinator可以通过服务发现获取，看了下airlift这个框架，它自身提供了服务发现的客户端的功能，但是看了有点晕眩，大致思路是实现一个http接口去定期轮询服务发现地址，得到服务地址(coordinator)就可以了，于是我自己实现了一个简易版本的，通过一个服务发现的网关地址，应用启动后通过后台线程每隔10s去轮询一次该服务发现网关，得到更新的coordirnator地址，更新本报的缓存，所有获取coordinator地址都从本地缓存中获取，避免每次的服务发现网关轮询。</p><h1 id="目前运行情况"><a href="#目前运行情况" class="headerlink" title="目前运行情况"></a>目前运行情况</h1><p>  目前运行情况良好，充分解决了Presto On Yarn后的coordinator随时可变的情况，应用能够根据coordinator的变化随时适应变化（10s延时）及时调整，避免因coordinator的变化导致的查询应用不可用问题。</p><h1 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h1><ul><li><a href="https://prestodb.io" target="_blank" rel="noopener">https://prestodb.io</a></li><li><a href="https://prestodb.io/presto-yarn" target="_blank" rel="noopener">https://prestodb.io/presto-yarn</a></li><li><a href="https://github.com/airlift/airlift" target="_blank" rel="noopener">https://github.com/airlift/airlift</a></li><li><a href="https://github.com/airlift/discovery" target="_blank" rel="noopener">https://github.com/airlift/discovery</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> presto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于YARN-Based集群的presto自动安装(Presto On YARN)</title>
      <link href="/2017/05/23/automated-installation-on-a-yarn-based-cluster/"/>
      <url>/2017/05/23/automated-installation-on-a-yarn-based-cluster/</url>
      
        <content type="html"><![CDATA[<p>如果你正计划使用HDP的发行版，那么你可以使用Ambari和Apache Slider来执行基于YARN的Presto的自动安装和集成，在安装过程中，Apache Slider和Presto的包都会被安装。</p><h1 id="部署Presto到基于YARN的集群"><a href="#部署Presto到基于YARN的集群" class="headerlink" title="部署Presto到基于YARN的集群"></a>部署Presto到基于YARN的集群</h1><p>安装部署的前提是假设你有一些关于Presto的基础知识以及了解它的一些配置文件。所有的例子引用都来至于：<a href="https://github.com/prestodb/presto-yarn/" target="_blank" rel="noopener">https://github.com/prestodb/presto-yarn/</a></p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>基于HDP 2.2+ 或者 CDH 5.4+ 的集群</li><li>Apache Slider 0.80.0（可以从这个地址<a href="https://slider.incubator.apache.org/" target="_blank" rel="noopener">下载</a>）</li><li>JDK 1.8</li><li>Zookeeper</li><li>openssl &gt;= 1.0.1e-16</li><li>Ambari 2.1</li></ul><a id="more"></a><h2 id="Presto安装目录结构"><a href="#Presto安装目录结构" class="headerlink" title="Presto安装目录结构"></a>Presto安装目录结构</h2><p>当你使用Ambari Slider View在一个YARN集群上安装Presto的时候，Presto的安装目录不同于标准的目录，这里会有一些区别。</p><p>如果你使用Slider Scripts或者使用Ambari slider view安装Presto到YARN集群，Presto将会通过使用Presto tarball包安装（并不是rpm包）。安装发生在YARN应用被启动时并且你可以在你的YARN nodemanager节点上找到Presto server的安装目录，该目录是由<code>yarn.nodemanager.local-dirs</code>该参数指定的。 比如你的<code>yarn.nodemanager.local-dirs</code>参数指定为/mnt/hadoop/nm-local-dirs，并且<code>app_user</code>为yarn，那么你就会发现Presto被安装在了/mnt/hadoop-hdfs/nm-local-dir/usercache/yarn/appcache/application_<id>/container_<id>/app/install/presto-server-<version>，这个路径的第一部分（直到container_id）在Slider中被称作AGENT_WORK_ROOT，那么这么来说，Presto就是被安装在<code>AGENT_WORK_ROOT/app/install/presto-server-&lt;version&gt;</code> 这里。</version></id></id></p><p>对于正常情况下的Presto安装，会将presto的catalog、plugin以及lib目录安装在presto安装的主目录下。<br>同样的在这里，catalog目录会是在<code>AGENT_WORK_ROOT/app/install/presto-server-&lt;version&gt;/etc/catalog</code>，plugin和lib目录会是分别在<code>AGENT_WORK_ROOT/app/install/presto-server-&lt;version&gt;/plugin</code>和<code>AGENT_WORK_ROOT/app/install/presto-server-&lt;version&gt;/lib</code>，用于启动Presto服务的脚本会是在<code>AGENT_WORK_ROOT/app/install/presto-server-&lt;version&gt;/bin</code>.</p><p>Presto的日志目录是基于你配置的<code>data directory</code>目录下的， 如果你在<code>appConfig.json</code>配置成<code>/var/lib/presto/data</code>，那么你就会得到presto的日志目录<code>/var/lib/presto/data/var/log/</code></p><h2 id="Presto安装配置选项"><a href="#Presto安装配置选项" class="headerlink" title="Presto安装配置选项"></a>Presto安装配置选项</h2><p>在安装过程中，Ambari Slider View允许你设置Presto运行的必要参数。</p><h2 id="使用Ambari-Slider-View来安装Presto到YARN集群上"><a href="#使用Ambari-Slider-View来安装Presto到YARN集群上" class="headerlink" title="使用Ambari Slider View来安装Presto到YARN集群上"></a>使用Ambari Slider View来安装Presto到YARN集群上</h2><p>Ambari支持通过Slider View部署Slider应用包并提供Slider的集成。 Slider View for Ambari允许你通过Ambari WEB控制台部署和管理Slider应用。</p><p>使用Ambari Slider View安装Presto到YARN集群的步骤如下：</p><p>1、安装Ambari，如果没有安装，这里有一些<a href="http://docs.hortonworks.com/HDPDocuments/Ambari-2.1.0.0/bk_Installing_HDP_AMB/content/ch_Installing_Ambari.html" target="_blank" rel="noopener">教程</a></p><p>2、下载<a href="https://slider.incubator.apache.org/" target="_blank" rel="noopener">Apache Slider</a><br>3、复制Presto应用包<code>presto-yarn-package-&lt;version&gt;-&lt;presto-version&gt;.zip</code>到<code>/var/lib/ambari-server/resources/apps/</code>(你的ambari服务节点上)<br>4、重启Ambari服务器<br>5、重新登录Ambari服务器<br>6、配置Ambari的中间过程略过…<br>7、配置和自定义服务，并安装它们，Slider的最小服务集是：HDFS,YARN,Zookeeper。当然你也必须选择安装Slider。<br>8、对于Slider客户端安装，你需要更新它的配置如果你不是使用默认配置安装的Hadoop和Zookeeper。因此<code>slider-env.sh</code>应该需要指出你的<code>JAVA_HOME</code>和<code>HADOOP_CONF_DIR</code></p><p><code>export JAVA_HOME=/usr/lib/jvm/javaexport HADOOP_CONF_DIR=/etc/hadoop/conf</code><br>9、对于Zookeeper，如果你使用了一个不同的区别于默认的<code>/usr/lib/zookeeper</code>的目录：</p><ul><li>那么请在<code>slider-client</code>节添加一个自定义属性<code>zk.home</code>,值是你的zookeeper路径。</li><li>如果zookeeper不是使用的默认端口2181，那么你还需要指定<code>slider.zookeeper.quorum</code>,形式为<code>node:port</code>。</li></ul><p>10、当所的有服务都安装完毕并且运行起来后，你就可以在Ambari中配置Slider来创建和管理你的应用了。</p><ul><li>点击<code>Admin</code>（左上角）-&gt; Manage Ambari</li><li>从左侧面板中选择<code>Views</code></li><li>创建Slider View，填入必要的字段。 <code>ambari.server.url</code>格式为：<code>http://&lt;ambari-server-url&gt;:8080/api/v1/clusters/&lt;clustername&gt;</code>，其中clustername是你Ambari集群的名字。</li><li>选择右上角的<code>Views</code>控制按钮</li><li>选择你在上一步创建的实例（例如：‘Slider’）</li><li>点击<code>Create App</code>来创建一个新的Presto YARN应用</li></ul><p>11、提供Presto服务详细配置，默认情况下，UI会从<code>*-default.json</code>文件中计算读取，这些文件都存在于你的<code>presto-yarn-package-*.zip</code>文件中。<br>12、应用名必须是小写的，例如：presto1<br>13、你可以设置一些配置值，比如你想给presto设置一个connector，那么只需要更新<code>global.catalog</code>的属性值就可以了，下面这个链接是对各个配置值的解释。<br><a href="https://prestodb.io/presto-yarn/installation-yarn-configuration-options.html" target="_blank" rel="noopener">Presto Configuration Options for YARN-Based Clusters</a><br>14、为Slider准备HDFS。HDFS的用户目录应该和你的配置文件中设置的<code>global.app_user</code>字段内容一致。假如app_user被设置成yarn，那么操作就会像下面这样：<br>su hdfs hdfs dfs -mkdir -p /user/yarn<br>su hdfs hdfs dfs -chown yarn:yarn /user/yarn<br>15、将配置中的<code>global.presto_server_port</code>从8080改成其它值，比如8089，因为8080可能已经被Ambari或者其它服务占用。总之是需要找到一个可用的端口。<br>16、提前在每个节点上创建好presto的本地目录（目录配置在<code>appConfig-default.json</code>中，例如：/var/lib/presto/），并且该目录的拥有者必须是<code>global.app_user</code>的配置值，不然Slider会因为权限问题不能成功启动Presto服务<br>mkdir -p /var/lib/presto/data<br>chown -R yarn:hadoop /var/lib/presto/data<br>17、如果你想添加一些额外的配置属性，可以使用自定义属性那节，额外的属性目前支持如下：</p><ul><li>site.global.plugin</li><li>site.global.additional_config_properties</li><li>site.global.additional_node_properties<br>以上的参数格式请参考(Presto Configuration Options for YARN-Based Clusters)[<a href="https://prestodb.io/presto-yarn/installation-yarn-configuration-options.html]" target="_blank" rel="noopener">https://prestodb.io/presto-yarn/installation-yarn-configuration-options.html]</a></li></ul><p>18、点击完成。这步等效于Slider的bin/slider脚本中’package install’以及’create’。 如果操作成功，你就会看到YARN应用被成功拉起，你可以操作如下：</p><ul><li>点击<code>app launched</code>，查看Slider view的状态</li><li>点击<code>Quick Links</code>，这会带你到YARN的WEBUI中</li></ul><p>19、如果部署失败了，就需要检查一下任务的历史日志了，或者看下节点的本地日志，可以参考(Debugging and Logging for YARN-Based Clusters)[<a href="https://prestodb.io/presto-yarn/installation-yarn-debugging-logging.html]" target="_blank" rel="noopener">https://prestodb.io/presto-yarn/installation-yarn-debugging-logging.html]</a><br>20、你可以在UI界面上管理应用的生命周期（如：<code>start</code>,<code>stop</code>,<code>flex</code>,<code>destroy</code>等）</p><h1 id="额外的配置选项"><a href="#额外的配置选项" class="headerlink" title="额外的配置选项"></a>额外的配置选项</h1><p>当你安装完Presto和Slider后，你可以重新配置Presto的配置项或者添加更多的配置</p><h2 id="在Slider-View中重新配置Presto"><a href="#在Slider-View中重新配置Presto" class="headerlink" title="在Slider View中重新配置Presto"></a>在Slider View中重新配置Presto</h2><p>在你启动Presto后，你也可以更新它的配置，例如，你想添加一个新的connector。<br>1、在Slider View的实例界面上点击<code>Actions</code><br>2、停止正在运行的Presto应用<br>3、点击<code>Destory</code>来删除掉在Slider中已经存在的实例<br>4、点击<code>Create App</code>按钮重新创建一个新实例，并使用新的配置值</p><h2 id="高级配置选项"><a href="#高级配置选项" class="headerlink" title="高级配置选项"></a>高级配置选项</h2><ul><li>配置内存、CPU、以及YARN的CGroups</li><li>失败策略</li><li>YARN Lable<br>更多信息，参见<a href="https://prestodb.io/presto-yarn/installation-yarn-configuration-options-advanced.html" target="_blank" rel="noopener">Advanced Configuration Options for YARN-Based Clusters</a></li></ul><h1 id="调试和日志"><a href="#调试和日志" class="headerlink" title="调试和日志"></a>调试和日志</h1><p>更多信息，参见：<a href="https://prestodb.io/presto-yarn/installation-yarn-debugging-logging.html" target="_blank" rel="noopener">Debugging and Logging for YARN-Based Clusters</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://slider.incubator.apache.org/docs/getting_started.html" target="_blank" rel="noopener">http://slider.incubator.apache.org/docs/getting_started.html</a></li><li><a href="http://docs.hortonworks.com/HDPDocuments/Ambari-2.0.1.0/bk_Installing_HDP_AMB/content/ch_Installing_Ambari.html" target="_blank" rel="noopener">http://docs.hortonworks.com/HDPDocuments/Ambari-2.0.1.0/bk_Installing_HDP_AMB/content/ch_Installing_Ambari.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 翻译文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> presto </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson关于autoType is not support问题解析</title>
      <link href="/2017/05/11/autotype-not-support-with-fastjson/"/>
      <url>/2017/05/11/autotype-not-support-with-fastjson/</url>
      
        <content type="html"><![CDATA[<p>在做大数据查询系统的过程中，需要对Presto对正在进行的查询进行管理，允许用户进行kill。今天有用户反馈线上的任务无法kill，通过查看线上日志得知在解析json的时候报了一个错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.fastjson.JSONException: autoType is not support. output</span><br><span class="line">   at com.alibaba.fastjson.parser.ParserConfig.checkAutoType(ParserConfig.java:888)</span><br><span class="line">   at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:325)</span><br><span class="line">   at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:520)</span><br><span class="line">   at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1335)</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure></p><p>从上图可以看出错误代码出在了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QueryVO query = JSON.parseObject(result, QueryVO.class);</span><br></pre></td></tr></table></figure></p><p>根据错误堆栈，错误发生在323行：</p><img src="/2017/05/11/autotype-not-support-with-fastjson/DefaultJSONParser.png" title="[DefaultJSONParser]"><a id="more"></a><p>即在这里的判断如果json的key的内容等于‘@type’，并且并没有禁用DisableSpecialKeyDetect这个关键字检测，则会进行特殊类型反序列化处理，也就是325行，在这里fastjson自己定义了一个特殊的关键字‘@type’用于保留反序列化时类型信息，而我们返回的json内容中恰好就含有这样的关键字，fastjson当成了自己的预定义解析类型进行解析，故会报出刚才的错误。</p><p>根据以上代码的提示，可以在进行JSON解析的时候，将Feature.DisableSpecialKeyDetect传入解析器中，设置禁用关键字解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QueryVO query = JSON.parseObject(result, QueryVO.class, Feature.DisableSpecialKeyDetect);</span><br></pre></td></tr></table></figure><p>如此便解决了问题。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解析 </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive获取查询日志的问题解析</title>
      <link href="/2017/05/04/hive-query-log-problem-analysis/"/>
      <url>/2017/05/04/hive-query-log-problem-analysis/</url>
      
        <content type="html"><![CDATA[<h1 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h1><p>最近这段时间一直在做数据查询系统的需求，最近接到一个需求：因为HIVE查询一般需要比较久的查询时间，这期间查询人员需要知道查询的进度，需要在界面上进行进度的展示。</p><h1 id="探路过程"><a href="#探路过程" class="headerlink" title="探路过程"></a>探路过程</h1><p>我们查询系统连接HIVE使用的是标准的JDBC接口，在标准的JDBC接口中并没有提供这样的一个获取查询日志的接口。翻阅了很多的资料后发现其实在HIVE Server的Thrift接口中是有提供这样的接口的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getQueryLog</span><span class="params">(<span class="keyword">boolean</span> incremental, <span class="keyword">int</span> fetchSize)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException, ClosedOrCancelledStatementException </span>&#123;</span><br><span class="line">    checkConnection(<span class="string">"getQueryLog"</span>);</span><br><span class="line">    <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ClosedOrCancelledStatementException(<span class="string">"Method getQueryLog() failed. The "</span> +</span><br><span class="line">          <span class="string">"statement has been closed or cancelled."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; logs = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    TFetchResultsResp tFetchResultsResp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (stmtHandle != <span class="keyword">null</span>) &#123;</span><br><span class="line">        TFetchResultsReq tFetchResultsReq = <span class="keyword">new</span> TFetchResultsReq(stmtHandle,</span><br><span class="line">            getFetchOrientation(incremental), fetchSize);</span><br><span class="line">        tFetchResultsReq.setFetchType((<span class="keyword">short</span>)<span class="number">1</span>);</span><br><span class="line">        tFetchResultsResp = client.FetchResults(tFetchResultsReq);</span><br><span class="line">        Utils.verifySuccessWithInfo(tFetchResultsResp.getStatus());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isQueryClosed) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> ClosedOrCancelledStatementException(<span class="string">"Method getQueryLog() failed. The "</span> +</span><br><span class="line">              <span class="string">"statement has been closed or cancelled."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isExecuteStatementFailed) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"Method getQueryLog() failed. Because the stmtHandle in "</span> +</span><br><span class="line">              <span class="string">"HiveStatement is null and the statement execution might fail."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> logs;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"Error when getting query log: "</span> + e, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RowSet rowSet = RowSetFactory.create(tFetchResultsResp.getResults(),</span><br><span class="line">        connection.getProtocol());</span><br><span class="line">    <span class="keyword">for</span> (Object[] row : rowSet) &#123;</span><br><span class="line">      logs.add(String.valueOf(row[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> logs;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上取至HIVE的JDBC接口实现<code>HiveStatement</code>这个类。这个类是标准<code>java.sql.Statement</code>的实现，但是<code>getQueryLog</code>这个方法并不是标准的JDBC方法，因为在我们的程序中运行的就是HIVE查询，所以我们可以在程序中进行强转得到HiveStatement这个类并调用这个方法获取到查询日志。 getQueryLog 这个方法中用到了整个HiveStatement中的一些变量，所以我们要进行HIVE查询日志的获取必须要对HiveStatement对象进行关联，同时一边在执行HIVE查询，一边还要从另一个线程中获取HIVE查询的日志过程。</p><a id="more"></a><h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><ul><li><p>前端查询页面在进行查询提交时同时生成一个UUID类似的唯一查询ID一并提交到查询后台</p></li><li><p>程序接到HIVE查询请求后，将HIVE查询请求通过标准的JDBC的方式进行提交，需要注意的这期间通过HiveConnection获取到的Statement对象需要被缓存到自己创建的一个HiveStatementHolderService类里并和第1步生成的唯一ID关联，以便于上面提到的日志线程池进行日志查询</p></li><li><p>为了不影响HIVE查询线程，HIVE的执行日志查询放到另一个线程(池)中进行</p></li><li><p>通过定时调度轮询，日志查询线程通过HiveStatement的<code>getQueryLogs</code>查询到日志后将日志写入集中缓存如redis有序集合中，key为查询ID，同时为了redis内存回收可以设置一个过期时间</p></li><li><p>查询页面在提交HIVE查询后，通过定时轮询的方式，携带查询提交时的查询ID轮询HiveStatementHolderService服务，HiveStatementHolderService服务根据查询ID到对应的redis中取得对应的日志序列集合，并返回给查询展示端</p></li><li><p>将HIVE查询结束后，将Statement从HiveStatementHolderService中移除掉</p></li></ul><h1 id="暴露的问题"><a href="#暴露的问题" class="headerlink" title="暴露的问题"></a>暴露的问题</h1><p>一切都感觉很美好，但是现实呢？当我深入到HiveStatement内部，我发现了问题：<b>HiveStatement并不是一个线程安全的类！</b>也就是说这个类的实例在多线程环境下使用并不安全，可能会造成多线程访问出现数据上的问题或者报错，具体原因就是该类的各个方法，以及各个判断中都使用了类的局部属性，而这些属性的获取和设值并没有经过线程同步，所以可能会存在线程不同步的一些问题。基于这个问题我也google了一下，发现网上也有相关的issue：</p><p><a href="https://issues.apache.org/jira/browse/HIVE-16451" target="_blank" rel="noopener">HIVE-16451</a></p><blockquote><p>Thanks for finding this out Peter Vary. Although I didn’t quite get how the patch fixes the race condition. The way I understand the issue is that there is a Logging thread and the thread executing the HiveStatement. Both these threads are accessing isLogBeingGenerated, isCancelled, isQueryClosed flags in the same HiveStatement object. None of these getters and setters are thread safe. I think there could be more undiscovered race-conditions in this execution path.</p></blockquote><p>提到了HiveStatement的线程安全问题</p><p><a href="https://issues.apache.org/jira/browse/HIVE-16517" target="_blank" rel="noopener">HIVE-16517</a></p><blockquote><p>BeeLine, and Commands classes shares one HiveStatement between multiple threads for querying the logs, and running the queries.<br>We can not make the HiveStatement thread safe, but we should at least make sure that calling getQueryLog will not cause problems if it is called parallel with any of the followings: cancel, close, execute, executeAsync, executeQuery, executeUpdate, getUpdateCount and more interestingly for the HiveQueryResultSet.next too.</p></blockquote><p>上面更是提到了queryLog的获取存在线程不同步的问题</p><p><a href="https://issues.apache.org/jira/browse/HIVE-15940" target="_blank" rel="noopener">HIVE-15940</a><br>最后这个ISSUE提出了后续可能的一个解决方案：Merge the query log operation as part of the getOperationStatus which also gets the Progress update.<br>将查询日志作为<code>getOperationStatus</code>调用的一部分，具体的怎么设计估计还得等官方的具体实现了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前看来，此方案并没有完美，HiveStatement存在线程安全问题，不过我们应该可以暂时忍受一些线程不同步带来的很多问题，毕竟只是一个日志显示的问题，哪怕出错，报出什么异常，我们也可以暂时用粗暴的方式来解决：一旦出现异常就直接把该Statement的日志获取给停掉。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> bug </tag>
            
            <tag> HIVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot文件上传解析</title>
      <link href="/2017/05/02/spring-boot-fileupload-problem-analysis/"/>
      <url>/2017/05/02/spring-boot-fileupload-problem-analysis/</url>
      
        <content type="html"><![CDATA[<p>在以往的开发过程中，Spring体系的文件上传一直使用的是commons-fileupload，在我们的项目中也是一样的，这两天在做公司的大数据查询平台，其中在做大文件上传时遇到了一些问题，记录如下：</p><h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>在开发环境、测试环境中，我们的环境是直接部署的jetty，也就是所有的访问直接经由浏览器后到达jetty服务器，运行良好。</p><p>但是当程序上到预发布环境时，文件上传出现了问题，文件上传不成功。服务器返回了一个错误，大体意思就是文件上传的请求体大于服务器端的最大设置，从响应的header看是nginx响应回来的，初步定位到是nginx文件大小上传受限，运维帮助修改了nginx配置后，这个错误不再出现。然而又出现了新的问题，Java程序在上传文件的过程中内存溢出了！</p><img src="/2017/05/02/spring-boot-fileupload-problem-analysis/jetty.jpeg" title="[Jetty内存溢出]"><p>都知道在springmvc中，上传文件的话如果太大会写入临时磁盘文件来避免内存溢出的问题。当然我们的程序中也设置了：</p><img src="/2017/05/02/spring-boot-fileupload-problem-analysis/应用配置1.png" title="[应用配置]"><p>以上的配置信息的解析是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件上传的最大大小为256M</span><br><span class="line">HTTP请求的最大大小为257M，因为HTTP请求包含了文件上传，故要大于文件上传大小。</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>一直以为该配置是commons-fileupload的组件的配置，但是从报错的信息来看，似乎并没有写入到文件中，而是不断地在内存中写入堆积，导致内存不断被占用导致最终的内存溢出。</p><p>而且从报错的地方看是调用了jetty的Multipart的解析器，而并没有看到有使用到commons-fileupload的文件上传解析，出于解决问题的必要，我在项目中强行依赖了jetty的包，然后在IDE中打开了内存溢出部位的源码：</p><img src="/2017/05/02/spring-boot-fileupload-problem-analysis/jetty-multipart-write.png" title="[Jetty处理文件上传]"><p>上图中write方法负责文件上传请求解析过程中数据的管道写入，这个方法的大体意思是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果设置了最大的文件上传大小，并且读取的实际大小大于了最大限制，则抛出异常</span><br><span class="line">如果设置了文件上传大小因子fileSizeThreshold(大于0),并且读取的实际大小大于fileSizeThreshold，并且文件为空，那么就初始化一个文件。</span><br></pre></td></tr></table></figure></p><p>比较吸引人的是有一个“createFile”函数的调用，我在整个类中找了一遍，发现有几个地方有调用：</p><p>在parse方法中有创建MultiPart类的调用：</p><img src="/2017/05/02/spring-boot-fileupload-problem-analysis/multipart-create.png" title="[MultipartInputStreamParser.parse方法]"><p>以及MultiPart内部类的open方法：</p><img src="/2017/05/02/spring-boot-fileupload-problem-analysis/multipart-open.png" title="[MultiPart.open方法]"><p>isWriteFilesWithFilenames() 是一个属性值判断，在MultiPartInputStreamParser类的初始化过程中并没有对此进行设值，故可以判断该处返回false，反推可以知道在这里并没有调用createFile()这个函数。<br>同时对_out对象进行了初始化，默认是初始化为一个ByteArrayOutputStream2的内存缓冲。</p><p>那么调用createFile()这个函数的地方就只剩下write方法了。</p><p>我们再来看看createFile这个方法的实现：</p><img src="/2017/05/02/spring-boot-fileupload-problem-analysis/multipart-createfile.png" title="[MultipartInputStreamParser.createFile方法]"><p>在这里方法里面，对parser的_file文件对象进行了初始化，同时该该文件包装了带缓冲的输出流bos对象，如果之前有在_out中的缓冲数据，则将缓冲数据写入到bos对象中，最后，最关键的一步：将_out对象原有的引用替换为bos对象，即将输出流指向了文件输出。</p><h1 id="柳暗花明"><a href="#柳暗花明" class="headerlink" title="柳暗花明"></a>柳暗花明</h1><p>到这里，整个文件上传的线条都非常明显了：</p><p><b><br>1、Jetty检测到文件上传标识时(multipart)，实例化MultiPartInputStreamParser，并调用parse方法进行解析。<br>2、parse方法进行一系列的逻辑处理，并初始化MultiPart，调用MultiPart对象的open方法，open方法先将_out输出流先初始化为内存缓冲流。<br>3、parse方法完成一系列初始化后，进行上传数据读取，并调用MultiPart对象的写入方法write，并在write方法中进行了逻辑判断与处理：当内存缓冲达到最大值时，改为写入文件的方式（防止内存占用过大）<br></b></p><p>那么现在最大的问题是内存溢出了，那么最大的可能性就是write的时候并没有引导进入createFile这个调用，而是一直在向内存缓冲中写入数据，导致的内存溢出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (MultiPartInputStreamParser.this._config.getFileSizeThreshold() &gt; 0 &amp;&amp; _size + length &gt; MultiPartInputStreamParser.this._config.getFileSizeThreshold() &amp;&amp; _file==null)</span><br></pre></td></tr></table></figure><p>这个条件中唯一的可能性就是MultipartConfig中并没有对fileSizeThreshold进行设值。</p><p>到此问题已经浮现，那么现实中就是要找到jetty的配置，并进行设值处理。这个值的配置我其实找了好久，包括翻看了jetty的etc目录下的所有文件。</p><p>最后发现，其实这是Servlet 3.0的文件上传规范：<a href="http://www.blogjava.net/yongboy/archive/2011/01/15/346202.html" target="_blank" rel="noopener">http://www.blogjava.net/yongboy/archive/2011/01/15/346202.html</a></p><p>应用进行设置后，所有符合Servlet 3.0规范的WEB服务器会自动加载这个配置。但是我想Jetty中应该也是可以配置的，具体的细节就没有去考究了。</p><h1 id="锦上添花"><a href="#锦上添花" class="headerlink" title="锦上添花"></a>锦上添花</h1><p>而springboot是直接支持修改这个参数的：</p><img src="/2017/05/02/spring-boot-fileupload-problem-analysis/应用配置.png" title="[应用配置]"><h1 id="峰回路转"><a href="#峰回路转" class="headerlink" title="峰回路转"></a>峰回路转</h1><p>我翻看了springboot的文档时，文档上的错误注释误导了我：</p><img src="/2017/05/02/spring-boot-fileupload-problem-analysis/springboot文档.png" title="[springboot文档]"><p>上图红圈中的文字表述： file-size-threshold指明了上传内容会被写入到文件中的最大因子，默认为0，这表示上传内容会被立即写入到磁盘文件中。</p><p>我之前的配置中并没有配置file-size-threshold，然而默认值可以认为是都是写入文件。这并不符合我现在看到的现象，最后在我怀疑的精神下，我试着将该配置修改为file-size-threshold=1MB后，发到预发布环境验证，居然一切OK了。</p><p>也由此反证官方代码注释文档存在错误引导，并且实际上的Jetty代码中也体现了当设置为0时并不会创建文件，而一直写入内存缓冲导致内存溢出的问题。</p><p>为此我也给官方提交了一个<a href="https://github.com/spring-projects/spring-boot/issues/9073" target="_blank" rel="noopener">issue</a>，等待官方的答复。</p><p><hr>20170504 更新<br>官方回复了，确实存在这样的问题：</p><blockquote><p>This is somewhat complicated as the behaviour with a value of zero varies by container:</p><p>Tomcat will write to disk immediately<br>Jetty will never write to disk<br>Undertow ignores the file size threshold entirely<br>So the javadoc is right if you’re using Tomcat, but wrong if you’re using Jetty or Undertow.</p></blockquote><p>所以也警示我们，虽然大厂的开源东西比较可靠，但是也要有怀疑精神！</p><p>还有值得一说的就是，我最初在使用springboot的时候，引入了commons-fileupload包，我一直以为springboot使用的是这个文件上传包，直到内存溢出错误发生时，我才发现这个包根本没有用到。而springboot使用到了的是web容器Servlet 3.0自带的文件上传解析。这个配置从springboot的配置项：spring.http.multipart.enabled（默认为true）可以设置开启或者关闭。在没有显式设置的情况下，这个选项是默认开启的，也就有了我上面的问题的出现。</p><h1 id="延伸思考"><a href="#延伸思考" class="headerlink" title="延伸思考"></a>延伸思考</h1><p>那么问题又来了，如何让springboot使用commons-fileupload组件进行文件上传呢。这里我就不多讲了，通过网上我已经搜索到了比较多的资料：</p><p>1、<a href="https://github.com/bobbylight/file-upload-example" target="_blank" rel="noopener">https://github.com/bobbylight/file-upload-example</a><br>2、<a href="http://stackoverflow.com/questions/32782026/springboot-large-streaming-file-upload-using-apache-commons-fileupload" target="_blank" rel="noopener">http://stackoverflow.com/questions/32782026/springboot-large-streaming-file-upload-using-apache-commons-fileupload</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>产生问题的原因很多，自己也有原因，妄自认为和springmvc的文件上传没有区别。归根到底还是对springboot的文档和机制不熟悉。对springboot的使用还没有太深入，这个有待加强。</p><h2 id="文件上传几大限制"><a href="#文件上传几大限制" class="headerlink" title="文件上传几大限制"></a>文件上传几大限制</h2><ul><li>负载均衡器（反向代理）限制： 一些负载均衡器或者反向代理服务器存在请求大小最大限制</li><li>应用服务器限制： 一些WEB应用服务器存在请求最大大小限制</li><li>应用程序限制： 应用程序中进行了上传大小限制</li></ul><h2 id="SpringBoot文件上传"><a href="#SpringBoot文件上传" class="headerlink" title="SpringBoot文件上传"></a>SpringBoot文件上传</h2><p>SpringBoot默认自己开启了Servlet3.0规范的文件上传，不再需要commons-fileupload等第三方文件上传包<br>同时配置项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.http.enabled=true （默认为true）</span><br><span class="line">spring.http.multipart.max-request-size=     #这里设置最大请求大小，该大小必须大于max-file-size</span><br><span class="line">spring.http.multipart.max-file-size=        #这里设置最大的文件上传大小</span><br><span class="line">spring.http.multipart.file-size-threshold=  #这里设置当文件大小超过多大后，由内存缓冲改由写入磁盘文件</span><br></pre></td></tr></table></figure></p><h2 id="SpringBoot使用CommonsFileUpload"><a href="#SpringBoot使用CommonsFileUpload" class="headerlink" title="SpringBoot使用CommonsFileUpload"></a>SpringBoot使用CommonsFileUpload</h2><p>使用方式见文末所说。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.http.enabled=false</span><br></pre></td></tr></table></figure></p><p>并引入Commons Fileupload包，并进行相关初始化。</p><h2 id="关于怀疑精神"><a href="#关于怀疑精神" class="headerlink" title="关于怀疑精神"></a>关于怀疑精神</h2><p>任何时候都要对开源精神充满敬畏，同时少不了怀疑探索精神！</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解析 </tag>
            
            <tag> 参与开源 </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java输出csv文件中文乱码的问题</title>
      <link href="/2017/04/19/java-csv-encoding-problem/"/>
      <url>/2017/04/19/java-csv-encoding-problem/</url>
      
        <content type="html"><![CDATA[<p>在开发程序的时候，通过java程序输出csv文件，采用utf-8编码，然后用excel打开，发现文件中的中文全部乱码了。</p><p>在网上搜索了各种手工解决办法，无外乎就是将文件打开另存为“ANSI”格式。</p><p>然而真正程序能解决的是如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在文件中增加BOM，详细说明可以Google,该处的byte[] 可以针对不同编码进行修改</span></span><br><span class="line">out.write(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; (<span class="keyword">byte</span>) <span class="number">0xEF</span>, (<span class="keyword">byte</span>) <span class="number">0xBB</span>,(<span class="keyword">byte</span>) <span class="number">0xBF</span> &#125;);</span><br></pre></td></tr></table></figure><p>在文件的输出流中增加BOM信息，中文乱码得以解决。</p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最佳实践 </tag>
            
            <tag> 基础问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下某些软件内复制粘贴失效的问题</title>
      <link href="/2017/04/11/mac-quick-key/"/>
      <url>/2017/04/11/mac-quick-key/</url>
      
        <content type="html"><![CDATA[<p>之前一直使用一款叫做switchhosts！的host管理软件，但是唯一的问题就是在软件里面复制粘贴失效，问了作者，作者说没问题。小白的我折腾了好久才知道了方法:</p><p>快捷键冲突：系统偏好设置－键盘－快捷键－恢复成默认</p><img src="/2017/04/11/mac-quick-key/mac-quick-key.png" title="[Mac快捷键设置]">]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Ranger在HDFS中的最佳实践</title>
      <link href="/2017/04/10/best-practices-in-hdfs-authorization-with-apache-ranger/"/>
      <url>/2017/04/10/best-practices-in-hdfs-authorization-with-apache-ranger/</url>
      
        <content type="html"><![CDATA[<p>HDFS对于任何Hadoop大数据平台来说都是核心组成部分，为了加强对Hadoop平台的数据保护，将安全控制深入到HDFS层是非常有必要的。HDFS本身提供了Kerberos认证，并且提供了基于POSIX风格的权限和HDFS——ACL控制，当然它也可以使用基于Apache Ranger的权限控制体系。</p><p>Apache Ranger (<a href="http://hortonworks.com/hadoop/ranger/" target="_blank" rel="noopener">http://hortonworks.com/hadoop/ranger/</a>) 是一个集中式的Hadoop体系的安全管理解决方案，它提供给管理者在HDFS或者其它Hadoop体系组件上创建和应用安全策略的功能。</p><h1 id="Ranger是怎么在HDFS上工作的？"><a href="#Ranger是怎么在HDFS上工作的？" class="headerlink" title="Ranger是怎么在HDFS上工作的？"></a>Ranger是怎么在HDFS上工作的？</h1><p>为了在HDP发行版中加强安全性，建议安装和配置Kerberos, Apache Knox和Apache Ranger。</p><p><b><br>Apache Ranger提供了一个和HDFS原生权限相匹配适应的授权模型。 HDFS Ranger插件会首先检测是否存在对应的授权策略对应用户授权，如果存在那么用户权限检测通过。如果没有这样的策略，那么Ranger插件会启用HDFS原生的权限体系进行权限检查（POSIX or HDFS ACL）。这种模型在Ranger中适用于HDFS和YARN服务。<br></b></p><img src="/2017/04/10/best-practices-in-hdfs-authorization-with-apache-ranger/hdfs-ranger-authorization-model.png" title="[HDFS Ranger授权模型]"><a id="more"></a><p>对于其它服务，比如Hive或者HBase，Ranger是作为唯一的有效授权依据，在HDP发行版中，使用Ambari配置HDFS使用Ranger的路径如下：Ambari → Ranger → HDFS config → Advanced ranger-hdfs-security</p><img src="/2017/04/10/best-practices-in-hdfs-authorization-with-apache-ranger/ambari-hdfs-ranger-config.png" title="[HDFS Ranger配置]"><p>基于Ranger的这种授权模型，用户可以非常安全的将Ranger添加到已经存在的大数据集群中，而该集群可能之前一直使用的是基于POSIX的权限体系。建议对于所有的部署，这个选项都设置成true。</p><p><b><br>Ranger的用户界面可以让管理者非常容易地找到用户的授权关系（Ranger policy or native HDFS）</b> 用户可以方便的查看审计内容（路径为：Ranger→ Audit），如果在界面上“Access Enforcer”列的内容为“Ranger-acl”，那说明Ranger的策略被应用到了用户身上。如果“Access Enforcer”列的内容为“Hadoop-acl”,表示该访问是由HDFS原生的POSIX权限和HDFS ACL提供的。</p><img src="/2017/04/10/best-practices-in-hdfs-authorization-with-apache-ranger/ranger-audit.png" title="[Ranger审计日志]"><p><em>Having a federated authorization model may create a challenge for security administrators looking to plan a security model for HDFS.</em></p><h1 id="如何确保安全"><a href="#如何确保安全" class="headerlink" title="如何确保安全"></a>如何确保安全</h1><p>当Ranger和Hadoop都安装完后，建议管理员按下面的步骤进行配置：</p><ul><li>Change HDFS umask to 077</li><li>Identify directory which can be managed by Ranger policies</li><li>Identify directories which need to be managed by HDFS native permissions</li><li>Enable Ranger policy to audit all records</li></ul><p>改变HDFS掩码为077，确定哪些目录由Ranger授权管理，哪些目录由HDFS原生权限控制。启用Ranger的审计功能</p><p>下面是详细步骤：</p><ul><li>Change HDFS umask to 077 from 022. This will prevent any new files or folders to be accessed by anyone other than the owner<br>管理员可以在Ambari中这样操作：<img src="/2017/04/10/best-practices-in-hdfs-authorization-with-apache-ranger/hdfs-umask.png" title="[HDFS 掩码设置]"></li></ul><p>在HDFS中默认的掩码为022，在这种情况下，所有的用户都具有所有HDFS文件系统文件和文件夹的读取权限。 你可以通过以下命令进行检查：</p><blockquote></blockquote><p>$ hdfs dfs -ls /apps<br>Found 3 items<br>drwxrwxrwx   – falcon hdfs       0 2015-11-30 08:02 /apps/falcon<br>drwxr-xr-x   – hdfs   hdfs           0 2015-11-30 07:56 /apps/hbase<br>drwxr-xr-x   – hdfs   hdfs           0 2015-11-30 08:01 /apps/hive</p><ul><li>指定哪些目录由Ranger授权</li></ul><p><b>建议这些目录由Ranger来进行管理和授权（/app/hive,/apps/Hbase以及一些自定义的数据目录）</b> HDFS本身的授权模型对于这些需求来说显得捉襟见肘。 可以使用chmod修改默认权限，例如：</p><blockquote></blockquote><p>$ hdfs dfs -chmod -R 000 /apps/hive<br>$ hdfs dfs -chown -R hdfs:hdfs /apps/hive<br>$ hdfs dfs -ls /apps/hive<br>Found 1 items<br>d———   – hdfs hdfs          0 2015-11-30 08:01 /apps/hive/warehouse</p><p>Ranger可以给用户进行显式的授权，例如：<br><img src="/2017/04/10/best-practices-in-hdfs-authorization-with-apache-ranger/ranger-authorize.png" title="[Ranger授权]"></p><p>管理员可以照着这个图对其它目录进行用户授权，你可以通过以下方式进行授权验证：</p><ul><li>Connect to HiveServer2 using beeline</li><li>Create a table<ul><li>create table employee( id int, name String, ssn String);</li></ul></li><li><p>Go to ranger, and check the HDFS access audit. The enforcer should be ‘ranger-acl’</p><img src="/2017/04/10/best-practices-in-hdfs-authorization-with-apache-ranger/ranger-audit2.png" title="[审计日志]"></li></ul><ul><li>指定哪些目录由HDFS原生权限控制</li></ul><p>建议让HDFS原生权限管理/tmp和/user目录。这些目录通常被各种应用使用于创建用户级的目录。这里你也需要设置/user目录的权限为“700”:</p><blockquote><p>$ hdfs dfs -ls /user<br>Found 4 items<br>drwxrwx—   – ambari-qa hdfs          0 2015-11-30 07:56 /user/ambari-qa<br>drwxr-xr-x   – hcat      hdfs          0 2015-11-30 08:01 /user/hcat<br>drwxr-xr-x   – hive      hdfs          0 2015-11-30 08:01 /user/hive<br>drwxrwxr-x   – oozie     hdfs          0 2015-11-30 08:02 /user/oozie</p></blockquote><blockquote><p>$ hdfs dfs -chmod -R 700 /user/*<br>$ hdfs dfs -ls /user<br>Found 4 items<br>drwx——   – ambari-qa hdfs          0 2015-11-30 07:56 /user/ambari-qa<br>drwx——   – hcat      hdfs          0 2015-11-30 08:01 /user/hcat<br>drwx——   – hive      hdfs          0 2015-11-30 08:01 /user/hive<br>drwx——   – oozie     hdfs          0 2015-11-30 08:02 /user/oozie</p></blockquote><ul><li>确保所有的HDFS数据操作都是被审计的<br>当Ranger是通过Ambari安装时，它会创建一个默认的策略，该策略允许所有的目录和文件访问并开启审计功能。这个策略同时也应用于Ambari冒烟测试用户“ambari-qa”用来验证HDFS服务的可用性。如果管理员禁用或者删除了该策略，那么需要创建一个类似的策略来允许审计所有的文件和目录。</li></ul><img src="/2017/04/10/best-practices-in-hdfs-authorization-with-apache-ranger/ranger-policy.png" title="[审计日志]"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>保证HDFS的安全性是保证Hadoop安全性的起点。 Ranger为HDFS提供了一个集中统一管理安全策略的接口。建议管理员合理使用Ranger以及HDFS本身的权限机制来全程覆盖HDFS的授权管理。</p><p>本文英文原文：<a href="https://hortonworks.com/blog/best-practices-in-hdfs-authorization-with-apache-ranger/" target="_blank" rel="noopener">https://hortonworks.com/blog/best-practices-in-hdfs-authorization-with-apache-ranger/</a></p>]]></content>
      
      
      <categories>
          
          <category> 翻译文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ranger </tag>
            
            <tag> hdfs </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 最佳实践 </tag>
            
            <tag> hortonworks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ranger自定义插件开发</title>
      <link href="/2017/01/23/how-to-add-a-custom-plugin-in-ranger/"/>
      <url>/2017/01/23/how-to-add-a-custom-plugin-in-ranger/</url>
      
        <content type="html"><![CDATA[<blockquote><p>英文链接：<a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=53741207" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=53741207</a></p></blockquote><h1 id="Ranger简介"><a href="#Ranger简介" class="headerlink" title="Ranger简介"></a>Ranger简介</h1><p>Apache Ranger为Hadoop体系提供了统一的安全体系，包括细致的访问控制和统一的审计。 Apache Ranger 0.4版本为很多服务提供了授权和审核，这些服务包括： HDFS, HBase, Hive, Knox和Storm。如果要添加更多的服务支持就需要多个模块的修改，包括UI，API，数据库schema等等。</p><p>Apache Ranger 0.5版本支持了一个统一的模型来更好地支持新组件的接入，而这些接入并不需要改变Ranger的代码。这篇文章主要阐述了自定义Ranger组件的编程模型以及步骤。</p><h1 id="创建自定义授权插件"><a href="#创建自定义授权插件" class="headerlink" title="创建自定义授权插件"></a>创建自定义授权插件</h1><p>这节将提供的是一个创建授权插件的高阶视图。 更多的每一步细节都会在后面的步骤中说明。</p><h2 id="定义服务类型-Service-type"><a href="#定义服务类型-Service-type" class="headerlink" title="定义服务类型(Service-type)"></a>定义服务类型(Service-type)</h2><ol><li><p>创建一个JSON格式的文件，包含以下内容：</p><ul><li>资源,比如：database,table,column等</li><li>访问类型,比如：select, update, create, drop等</li><li>连接服务的配置,比如：JDBC URL,JDBC driver,credentials等</li></ul></li><li><p>加载JSON文件到Ranger中</p></li></ol><a id="more"></a><h2 id="Ranger授权插件开发"><a href="#Ranger授权插件开发" class="headerlink" title="Ranger授权插件开发"></a>Ranger授权插件开发</h2><h3 id="服务初始化"><a href="#服务初始化" class="headerlink" title="服务初始化"></a>服务初始化</h3><ol><li>创建一个静态的（或者全局的）<code>RangerBasePlugin</code>实例（或者继承至它的一个实例），并提供一个方便后面授权使用的引用</li><li>调用该实例的<code>init()</code>方法。这个步骤将会初始化policy-engine，它会从Ranger Admin拉取安全策略，并启动一个后台线程用于周期性的从Ranger Admin更新安全策略。</li><li>在插件实例中注册一个审计处理器，比如：<code>RangerDefaultAuditHandler</code>。 插件将会使用这个审计处理器生成资源访问的审计日志。</li></ol><h3 id="资源授权访问"><a href="#资源授权访问" class="headerlink" title="资源授权访问"></a>资源授权访问</h3><ol><li>创建一个<code>RangerAccessRequest</code>实现的实例，该实例拥有资源、访问类型、用户等需要被授权的细节逻辑，这个实现类可以参考<code>RangerAccessRequestImpl</code>。</li><li>调用前面创建的插件实例方法<code>isAccessAllowed()</code>。</li><li>根据返回的结果决定允许还是拒绝操作。</li></ol><h3 id="资源查找"><a href="#资源查找" class="headerlink" title="资源查找"></a>资源查找</h3><ol><li>继承<code>RangerBaseService</code>类，实现<code>lookupResource()</code>和<code>validateConfig()</code>方法。</li><li>为这个类提供一个在服务定义中的名字。</li><li>将包含该实现的类的类库（jar包文件）以及该类库依赖的其它类库拷贝到Ranger Admin的<code>ranger-plugins/&lt;service-type&gt;</code>目录</li></ol><h2 id="安装插件到服务中"><a href="#安装插件到服务中" class="headerlink" title="安装插件到服务中"></a>安装插件到服务中</h2><p>要想访问授权生效，Ranger插件必须先进行安装和配置。 请参看查看相关文档，如何注册一个授权（authorizer）。</p><h1 id="服务类型"><a href="#服务类型" class="headerlink" title="服务类型"></a>服务类型</h1><h2 id="服务类型定义"><a href="#服务类型定义" class="headerlink" title="服务类型定义"></a>服务类型定义</h2><p>一个服务的资源，如：资源访问类型（read/write/create/delete/submit/…）, 连接服务的配置信息（url/username/password/…）,在策略计算时的自定义的一些条件（IP range等）。这些都需要定义在JSON文件中，最新的服务类型定义格式请查看最新的文档<a href="https://github.com/apache/incubator-ranger/blob/master/agents-common/src/main/resources/service-defs/" target="_blank" rel="noopener">服务定义格式</a></p><h2 id="例子-YARN服务类型定义"><a href="#例子-YARN服务类型定义" class="headerlink" title="例子-YARN服务类型定义"></a>例子-YARN服务类型定义</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"yarn"</span>,</span><br><span class="line"> <span class="attr">"implClass"</span>: <span class="string">"org.apache.ranger.services.yarn.RangerServiceYarn"</span>,</span><br><span class="line"> <span class="attr">"label"</span>: <span class="string">"YARN"</span>,</span><br><span class="line"> <span class="attr">"description"</span>: <span class="string">"YARN"</span>,</span><br><span class="line"> <span class="attr">"guid"</span>: <span class="string">"5b710438-edcf-4e20-834c-a9a267b5b963"</span>,</span><br><span class="line">  <span class="attr">"resources"</span>:</span><br><span class="line"> [</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"queue"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">   <span class="attr">"level"</span>: <span class="number">10</span>,</span><br><span class="line">   <span class="attr">"mandatory"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"lookupSupported"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"recursiveSupported"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"matcher"</span>: <span class="string">"org.apache.ranger.plugin.resourcematcher.RangerPathResourceMatcher"</span>,</span><br><span class="line">   <span class="attr">"matcherOptions"</span>: &#123;<span class="attr">"wildCard"</span>:<span class="literal">true</span>, <span class="attr">"ignoreCase"</span>:<span class="literal">true</span>, <span class="attr">"pathSeparatorChar"</span>:<span class="string">"."</span>&#125;,</span><br><span class="line">   <span class="attr">"label"</span>: <span class="string">"Queue"</span>,</span><br><span class="line">   <span class="attr">"description"</span>: <span class="string">"Queue"</span></span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">"accessTypes"</span>:</span><br><span class="line"> [</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"submit-app"</span>,</span><br><span class="line">   <span class="attr">"label"</span>: <span class="string">"submit-app"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"admin-queue"</span>,</span><br><span class="line">   <span class="attr">"label"</span>: <span class="string">"admin-queue"</span></span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"></span><br><span class="line"> <span class="attr">"configs"</span>:</span><br><span class="line"> [</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"username"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">   <span class="attr">"mandatory"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"label"</span>: <span class="string">"Username"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"password"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"password"</span>,</span><br><span class="line">   <span class="attr">"mandatory"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"label"</span>: <span class="string">"Password"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"yarn.url"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">   <span class="attr">"mandatory"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"label"</span>: <span class="string">"YARN REST URL"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"commonNameForCertificate"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">   <span class="attr">"mandatory"</span>: <span class="literal">false</span>,</span><br><span class="line">   <span class="attr">"label"</span>: <span class="string">"Common Name for Certificate"</span></span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"></span><br><span class="line"> <span class="attr">"policyConditions"</span>:</span><br><span class="line"> [</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"ip-range"</span>,</span><br><span class="line">   <span class="attr">"evaluator"</span>: <span class="string">"org.apache.ranger.plugin.conditionevaluator.RangerIpMatcher"</span>,</span><br><span class="line">   <span class="attr">"label"</span>: <span class="string">"IP Address Range"</span>,</span><br><span class="line">   <span class="attr">"description"</span>: <span class="string">"IP Address Range"</span></span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册服务类型"><a href="#注册服务类型" class="headerlink" title="注册服务类型"></a>注册服务类型</h2><p>服务类型注册必须使用Ranger Admin提供的RESTFUL API来进行。 服务类型一旦注册成功，Ranger Admin就会提供一个创建服务的UI页面(在以前的发行版中叫做repositories)以及该服务的策略。 Ranger插件使用服务定义和策略来确定一个访问请求应该被允许还是被拒绝。 Ranger Admin提供的REST API可以通过<code>curl</code>这个小命令行工具调用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u admin:admin -X POST -H &quot;Accept: application/json&quot; -H &quot;Content-Type: application/json&quot; –d @ranger-servicedef-yarn.json http://ranger-admin-host:port/service/plugins/definitions</span><br></pre></td></tr></table></figure></p><h1 id="Ranger插件开发"><a href="#Ranger插件开发" class="headerlink" title="Ranger插件开发"></a>Ranger插件开发</h1><h2 id="Ranger-Authorizer"><a href="#Ranger-Authorizer" class="headerlink" title="Ranger Authorizer"></a>Ranger Authorizer</h2><p>Ranger服务授权体系主要是通过以下方式实现的：提供一个lib，该lib实现了服务钩子(hook)拦截资源访问，并调用Ranger API获得授权以及记录审计日志。 当在某个服务里面安装ranger插件时，这些钩子会被自动注册到服务中。在这节中，我们会深入YARN ranger插件的实现细节（YARN服务类型定义已经在前面一节中做过了）。</p><p>在服务的初始化过程中，一个静态（或者全局的）<code>RangerBasePlugin</code>实例应该被创建出来， 该实例的引用也应该被提供出来，以方便后续访问授权请求的使用。</p><p>在初始化过程中，插件将会从本地缓存中加载策略（如果本地存在的话），并启动一个策略更新器用于从Ranger Admin中拉取更新后的策略。</p><p>YARN服务需要授权服务实现<code>YarnAuthorizationProvider</code>接口。 Ranger YARN插件实现了<code>init()</code>和<code>checkPermission()</code>方法用于提供授权和YARN队列的访问审计。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RangerYarnAuthorizer</span> <span class="keyword">extends</span> <span class="title">YarnAuthorizationProvider</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> RangerBasePlugin plugin = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Configuration conf)</span> </span>&#123;</span><br><span class="line">  plugin = <span class="keyword">new</span> RangerBasePlugin(<span class="string">"yarn"</span>, <span class="string">"yarn"</span>);</span><br><span class="line">  plugin.init(); <span class="comment">// this will initialize policy engine and policy refresher</span></span><br><span class="line">  plugin.setDefaultAuditHandler(<span class="keyword">new</span> RangerDefaultAuditHandler());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPermission</span><span class="params">(AccessType accessType, PrivilegedEntity entity, UserGroupInformation ugi)</span> </span>&#123;</span><br><span class="line">  RangerAccessRequestImpl request  = <span class="keyword">new</span> RangerAccessRequestImpl();</span><br><span class="line">  RangerResourceImpl      resource = <span class="keyword">new</span> RangerResourceImpl();</span><br><span class="line"></span><br><span class="line">  resource.setValue(<span class="string">"queue"</span>, entity.getName());</span><br><span class="line">   request.setResource(resource);</span><br><span class="line">   request.setAccessType(getRangerAccessType(accessType));</span><br><span class="line">   request.setUser(ugi.getShortUserName());</span><br><span class="line">   request.setUserGroups(Sets.newHashSet(ugi.getGroupNames()));</span><br><span class="line">   request.setAccessTime(<span class="keyword">new</span> Date());</span><br><span class="line">   request.setClientIPAddress(getRemoteIp());</span><br><span class="line">  RangerAccessResult result = plugin.isAccessAllowed(request);</span><br><span class="line">  <span class="keyword">return</span> result == <span class="keyword">null</span> ? <span class="keyword">false</span> : result.getIsAllowed();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="资源查找-1"><a href="#资源查找-1" class="headerlink" title="资源查找"></a>资源查找</h2><p>在Ranger Admin中构建策略的时候，用户会输入需要保护的资源的名字。为了让用户使用更方便，Ranager Admin提供了一自动完成特性，该特性会根据输入的内容查询服务中可用的匹配资源。</p><p>lookup的实现是针对被访问的资源中的服务。它涉及服务提供的API以及检索可用的资源。为了完成<code>autocomplete</code>特性，Ranger Admin要求插件提供<code>RangerBaseService</code>的一个具体实现。这个实现类必须在Ranger的服务类型中注册，并且要保证该类库已经放置到了Ranger Admin的类路径下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RangerServiceYarn</span> <span class="keyword">extends</span> <span class="title">RangerBaseService</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title">validateConfig</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> connect to YARN resource manager; throw Exception on failure</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">lookupResource</span><span class="params">(ResourceLookupContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> retrieve the resource list from YARN resource manager using REST API</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="安装和配置插件"><a href="#安装和配置插件" class="headerlink" title="安装和配置插件"></a>安装和配置插件</h1><p>以下的实现了Ranger插件的jar文件必须保证已经放置在了服务的类路径下（如YARN）：</p><ul><li>ranger-plugins-audit-&lt;version&gt;.jar</li><li>ranger-plugins-common-&lt;version&gt;.jar</li><li>ranger-plugins-cred-&lt;version&gt;.jar</li></ul><p>Ranger插件在初始化的时候会读取以下文件，也请确保以下文件已经放置在了服务的类路径下：</p><ul><li>ranger-&lt;serviceType&gt;-audit.xml</li><li>ranger-&lt;serviceType&gt;-security.xml</li><li>ranger-policymgr-ssl.xml</li></ul><p>Ranger插件需要以下配置才能正常运行，这些配置属性通常在ranger-&lt;serviceType&gt;-security.xml中。</p><table><thead><tr><th style="text-align:center">配置</th><th style="text-align:center">默认值</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">ranger.plugin.&lt;serviceType&gt;.service.name</td><td style="text-align:center">No default value. This configuration must be provided.</td><td style="text-align:center">Name of the service containing policies for the plugin</td></tr><tr><td style="text-align:center">ranger.plugin.&lt;serviceType&gt;.policy.source.impl</td><td style="text-align:center">org.apache.ranger.admin.client.RangerAdminRESTClient</td><td style="text-align:center">Name of the class used to retrieve policies.</td></tr><tr><td style="text-align:center">ranger.plugin.&lt;serviceType&gt;.policy.rest.url</td><td style="text-align:center">No default value.</td><td style="text-align:center">URL to Ranger Admin</td></tr><tr><td style="text-align:center">ranger.plugin.&lt;serviceType&gt;.policy.rest.ssl.config.file</td><td style="text-align:center">No default value. This configuration must be provided if SSL is enabled between plugin and Ranger Admin.</td><td style="text-align:center">Path to the file containing SSL details to contact Ranger Admin</td></tr><tr><td style="text-align:center">ranger.plugin.&lt;serviceType&gt;.policy.cache.dir</td><td style="text-align:center">No default value. If no valid value is specified, local caching of policies will not be done.</td><td style="text-align:center">Directory where Ranger policies are cached after successful retrieval from the source</td></tr><tr><td style="text-align:center">ranger.plugin.&lt;serviceType&gt;.policy.pollIntervalMs</td><td style="text-align:center">30000</td><td style="text-align:center">How often to poll for changes in policies?</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 翻译文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ranger </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PrestoDB自定义函数开发指南</title>
      <link href="/2017/01/19/user-guide-of-prestodb-udf/"/>
      <url>/2017/01/19/user-guide-of-prestodb-udf/</url>
      
        <content type="html"><![CDATA[<h1 id="Presto-自定义函数开发（译）"><a href="#Presto-自定义函数开发（译）" class="headerlink" title="Presto 自定义函数开发（译）"></a>Presto 自定义函数开发（译）</h1><font color="red">本文是基于Presto 0.160版本翻译,最新版的内容请参看最新版文档</font><p>英文原文:</p><blockquote><p><a href="https://prestodb.io/docs/current/develop/functions.html" target="_blank" rel="noopener">https://prestodb.io/docs/current/develop/functions.html</a></p></blockquote><p>Presto是一个开源的分布式SQL查询引擎，适用于交互式分析查询，数据量支持GB到PB字节。</p><p>Presto的设计和编写完全是为了解决像Facebook这样规模的商业数据仓库的交互式分析和处理速度的问题。</p><p>Presto本身自带了一些功能函数，对于我们在做SQL查询时非常方便，但是有些时候这些内建的功能函数并不能完全满足我们的需求，又或者是我们逻辑中有一些共性的部分，需要将这些共性的部分提炼出来形成公共的函数库。Presto为我们提供了这套自定义函数的机制。</p><h2 id="插件实现"><a href="#插件实现" class="headerlink" title="插件实现"></a>插件实现</h2><p>该函数框架用于实现SQL功能函数。Presto包含了一定数量的内建函数支持。 为了实现更多的功能函数,你可以自己写一个插件,实现<code>getFunctions()</code>,让这个插件实现更多的功能函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleFunctionsPlugin</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Plugin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getFunctions()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImmutableSet.&lt;Class&lt;?&gt;&gt;builder()</span><br><span class="line">                .add(ExampleNullFunction.class)</span><br><span class="line">                .add(IsNullFunction.class)</span><br><span class="line">                .add(IsEqualOrNullFunction.class)</span><br><span class="line">                .add(ExampleStringFunction.class)</span><br><span class="line">                .add(ExampleAverageFunction.class)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: <code>ImmutableSet</code>是一个Guava类库的一个工具类, <code>getFunctions()</code>方法包含了本掼中所有的我们将要实现的功能函数。</p><p>如果想要查看完整的代码例子,可以查看presto的功能模块<code>presto-ml</code>(用于机器学习)或者<code>presto-teradata-functions</code>(Teradata-compatible functions), 以上两个包都是presto源代码包中。</p><a id="more"></a><h2 id="标量函数实现"><a href="#标量函数实现" class="headerlink" title="标量函数实现"></a>标量函数实现</h2><p>函数框架使用注解来表示相关的函数信息,如: 名称、描述、返回类型和参数类型。 以下的例子是一个实现<code>is_null</code>的功能函数例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleNullFunction</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@ScalarFunction</span>(<span class="string">"is_null"</span>)</span><br><span class="line">    <span class="meta">@Description</span>(<span class="string">"Returns TRUE if the argument is NULL"</span>)</span><br><span class="line">    <span class="meta">@SqlType</span>(StandardTypes.BOOLEAN)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">(@SqlNullable @SqlType(StandardTypes.VARCHAR)</span> Slice string)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (string == <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该函数<code>is_null</code>只需要一个<code>VARCHAR</code>类型的参数,并且返回一个<code>BOOLEAN</code>类型的结果,判断给定的参数是否为<code>NULL</code>。 这里需要注意的是提供给函数的参数是一个<code>Slice</code>类型。<code>VARCHAR</code>使用<code>Slice</code>,<br>而不使用<code>String</code>（原生的容器类型）,这个类型是对<code>byte[]</code>的包装。</p><ul><li><p><code>@SqlType</code>:</p><p> <code>@SqlType</code>注解用于申明返回类型和参数类型。注意Java代码的参数和返回类型必须和注释中申明的类型一致。</p></li><li><p><code>@SqlNullable</code>:</p><p> <code>@SqlNullable</code>注解表明参数可以为空。 如果没有这个注解, 任何一个参数为<code>NULL</code>,那么该函数都会返回<code>NULL</code>。当类型有对应的原始类型时,比如:<code>BigintType</code>,如果要使用<code>@SqlNullable</code>请使用包装类型,<br> 当参数不为<code>NULL</code>时,如果函数想要返回<code>NULL</code>,则必须在函数上申明<code>@SqlNullable</code>。</p></li></ul><h2 id="参数化标量函数"><a href="#参数化标量函数" class="headerlink" title="参数化标量函数"></a>参数化标量函数</h2><p>拥有类型参数的标量函数会增加额外的复杂度。下面我们将演示如果将上面的例子能够适应任何类型:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ScalarFunction</span>(name = <span class="string">"is_null"</span>)</span><br><span class="line"><span class="meta">@Description</span>(<span class="string">"Returns TRUE if the argument is NULL"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IsNullFunction</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@TypeParameter</span>(<span class="string">"T"</span>)</span><br><span class="line">    <span class="meta">@SqlType</span>(StandardTypes.BOOLEAN)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNullSlice</span><span class="params">(@SqlNullable @SqlType(<span class="string">"T"</span>)</span> Slice value)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (value == <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TypeParameter</span>(<span class="string">"T"</span>)</span><br><span class="line">    <span class="meta">@SqlType</span>(StandardTypes.BOOLEAN)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNullLong</span><span class="params">(@SqlNullable @SqlType(<span class="string">"T"</span>)</span> Long value)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (value == <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TypeParameter</span>(<span class="string">"T"</span>)</span><br><span class="line">    <span class="meta">@SqlType</span>(StandardTypes.BOOLEAN)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNullDouble</span><span class="params">(@SqlNullable @SqlType(<span class="string">"T"</span>)</span> Double value)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (value == <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...and so on for each native container type</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>@TypeParameter</code>:</p><p> <code>@TypeParameter</code>注解用于申明哪些类型可以被用于<code>@SqlType</code>注解或者函数的返回类型。 它也可以用于注解一个参数的类型<code>Type</code>. 在运行时,引擎会将正确的类型绑定到该参数上。 <code>@OperatorDependency</code><br> 可以用于申明一个参数需要另一个额外的功能函数用于操作。 例如,下面的功能函数只会绑定到拥有一个<code>equals</code>方法的类型上:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ScalarFunction</span>(name = <span class="string">"is_equal_or_null"</span>)</span><br><span class="line"><span class="meta">@Description</span>(<span class="string">"Returns TRUE if arguments are equal or both NULL"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IsEqualOrNullFunction</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@TypeParameter</span>(<span class="string">"T"</span>)</span><br><span class="line">    <span class="meta">@SqlType</span>(StandardTypes.BOOLEAN)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEqualOrNullSlice</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @OperatorDependency(operator = OperatorType.EQUAL, returnType = StandardTypes.BOOLEAN, argumentTypes = &#123;<span class="string">"T"</span>, <span class="string">"T"</span>&#125;)</span> MethodHandle equals,</span></span><br><span class="line"><span class="function">            @SqlNullable @<span class="title">SqlType</span><span class="params">(<span class="string">"T"</span>)</span> Slice value1,</span></span><br><span class="line"><span class="function">            @SqlNullable @<span class="title">SqlType</span><span class="params">(<span class="string">"T"</span>)</span> Slice value2)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value1 == <span class="keyword">null</span> &amp;&amp; value2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (value1 == <span class="keyword">null</span> || value2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">boolean</span>) equals.invokeExact(value1, value2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...and so on for each native container type</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 另一个标量函数的例子</p><p> 下面的<code>lowercaser</code>函数需要一个<code>VARCHAR</code>参数,并且返回<code>VARCHAR</code>的结果, 目的是转换参数字符到小写形式:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleStringFunction</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@ScalarFunction</span>(<span class="string">"lowercaser"</span>)</span><br><span class="line">    <span class="meta">@Description</span>(<span class="string">"converts the string to alternating case"</span>)</span><br><span class="line">    <span class="meta">@SqlType</span>(StandardTypes.VARCHAR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Slice <span class="title">lowercaser</span><span class="params">(@SqlType(StandardTypes.VARCHAR)</span> Slice slice)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String argument = slice.toStringUtf8();</span><br><span class="line">        <span class="keyword">return</span> Slices.utf8Slice(argument.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 对于常见的字符串函数（包括转换小写）, Slice类型也提供了直接基于底层<code>byte[]</code>的实现来提供更好的性能。 这个功能函数没有使用<code>@SqlNullable</code>注解,意味着如果参数为<code>NULL</code>,那么返回结果会自动变成<code>NULL</code>（函数不会被调用）。</p></li></ul><h2 id="聚合函数实现"><a href="#聚合函数实现" class="headerlink" title="聚合函数实现"></a>聚合函数实现</h2><p>聚合函数使用和标量函数相似的框架,但是更加复杂一点。</p><ul><li><p><code>AccumulatorState</code>:</p><p> 所有的聚合函数聚集input rows到一个state对象中。这个对象必须实现<code>AccumulatorState</code>这个接口。对于简单聚合, 仅仅需求继承<code>AccumulatorState</code>来创建一个带getter和setter方法的新接口就可以了, 框架会帮你<br> 生成实现代码和序列化器。 如果你需要一个更复杂的state对象, 你需要实现<code>AccumulatorStateFactory</code>和<code>AccumulatorStateSerializer</code>,<br> 并通过<code>AccumulatorStateMetadata</code>这个注解来标注。下面的代码实现了聚合函数<code>avg_double</code>用于计算<code>double</code>类型的列:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AggregationFunction</span>(<span class="string">"avg_double"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AverageAggregation</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@InputFunction</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(LongAndDoubleState state, @SqlType(StandardTypes.DOUBLE)</span> <span class="keyword">double</span> value)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        state.setLong(state.getLong() + <span class="number">1</span>);</span><br><span class="line">        state.setDouble(state.getDouble() + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CombineFunction</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">combine</span><span class="params">(LongAndDoubleState state, LongAndDoubleState otherState)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        state.setLong(state.getLong() + otherState.getLong());</span><br><span class="line">        state.setDouble(state.getDouble() + otherState.getDouble());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OutputFunction</span>(StandardTypes.DOUBLE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(LongAndDoubleState state, BlockBuilder out)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> count = state.getLong();</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            out.appendNull();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> value = state.getDouble();</span><br><span class="line">            DOUBLE.writeDouble(out, value / count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 有两部分: 每一行的sum和总行数. <code>LongAndDoubleState</code>一个继承至<code>AccumulatorState</code>的接口:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LongAndDoubleState</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AccumulatorState</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getLong</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setLong</span><span class="params">(<span class="keyword">long</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getDouble</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDouble</span><span class="params">(<span class="keyword">double</span> value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 就像上面看到的, 对于简单的<code>AccumulatorState</code>对象, 只需要简单定义一个接口,并写上getter和setter方法,后面的事就由框架帮你实现了。</p></li></ul><p>深入了解各种注解对于聚合函数开发的用途:</p><ul><li><p><code>@InputFunction</code>:</p><p> <code>@InputFunction</code>注解申明哪个function应该来接收输入的rows并且将它们存储在<code>AccumulatorState</code>对象里. 这有点类似于标量函数（你必须给参数指定<code>@SqlType</code>）,<br> 不同的于上面标量的例子（<code>Slice</code>用于存储<code>VARCHAR</code>）,原始类型<code>double</code>用于参数输入, 在这个例子中, 输入函数(input function)简单地跟踪记录的行数（通过setLong()函数）和 总值(通过setDouble()函数)。</p></li><li><p><code>@CombineFunction</code>:</p><p> <code>@CombineFunction</code>注解用于申明哪个function用于合并两个state对象。该函数用于合并分区的聚合state,它将两个state对象合并到第一个（在上面的例子中, 就是把它们相加）。</p></li><li><p><code>@OutputFunction</code>:</p><p> <code>@OutputFunction</code>是聚合操作最后一个被调用的function,它携带最终的state对象(所有的分区state的结果)并且将这个结果写入到<code>BlockBuilder</code>。<br> 序列化是在哪里发生的呢? 并且什么是<code>GroupedAccumulatorState</code>?</p><p> <code>@InputFunction</code>和<code>@CombineFunction</code>通常运行在不同的worker机器上, 所以state对象被聚合框架序列化并且在worker机器之间进行传输。<code>GroupedAccumulatorState</code>被用于<code>GROUP BY</code>聚合,<br> 并且框架会自动为你生成实现,你不需要指定一个<code>AccumulatorStateFactory</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 翻译文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> presto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka顺序消息</title>
      <link href="/2017/01/17/sequence-message-in-kafka/"/>
      <url>/2017/01/17/sequence-message-in-kafka/</url>
      
        <content type="html"><![CDATA[<p>顺序消息包括以下两方面：</p><ul><li>全局顺序</li><li>局部顺序</li></ul><h2 id="全局顺序"><a href="#全局顺序" class="headerlink" title="全局顺序"></a>全局顺序</h2><p>全局顺序就目前的应用范围来讲，可以列举出来的也就限于binlog日志传输，如mysql binlog日志传输要求全局的顺序，不能有任何的乱序。这种的解决办法通常是最为保守的方式：</p><ol><li>全局使用一个生产者</li><li>全局使用一个消费者（并严格到一个消费线程）</li><li>全局使用一个分区（当然不同的表可以使用不同的分区或者topic实现隔离与扩展）</li></ol><h2 id="局部顺序"><a href="#局部顺序" class="headerlink" title="局部顺序"></a>局部顺序</h2><p>其实在大部分业务场景下，只需要保证消息局部有序即可，什么是局部有序？局部有序是指在某个业务功能场景下保证消息的发送和接收顺序是一致的。如：订单场景，要求订单的创建、付款、发货、收货、完成消息在同一订单下是有序发生的，即消费者在接收消息时需要保证在接收到订单发货前一定收到了订单创建和付款消息。</p><p>针对这种场景的处理思路是：针对部分消息有序（message.key相同的message要保证消费顺序）场景，可以在producer往kafka插入数据时控制，同一key分发到同一partition上面。因为每个partition是固定分配给某个消费者线程进行消费的，所以对于在同一个分区的消息来说，是严格有序的（在kafka 0.10.x以前的版本中，kafka因消费者重启或者宕机可能会导致分区的重新分配消费，可能会导致乱序的发生，0.10.x版本进行了优化，减少重新分配的可能性）。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="消息重试对顺序消息的影响"><a href="#消息重试对顺序消息的影响" class="headerlink" title="消息重试对顺序消息的影响"></a>消息重试对顺序消息的影响</h3><p>对于一个有着先后顺序的消息A、B，正常情况下应该是A先发送完成后再发送B，但是在异常情况下，在A发送失败的情况下，B发送成功，而A由于重试机制在B发送完成之后重试发送成功了。<br>这时对于本身顺序为AB的消息顺序变成了BA</p><h3 id="消息producer发送逻辑的控制"><a href="#消息producer发送逻辑的控制" class="headerlink" title="消息producer发送逻辑的控制"></a>消息producer发送逻辑的控制</h3><p>消息producer在发送消息的时候，对于同一个broker连接是存在多个未确认的消息在同时发送的，也就是存在上面场景说到的情况，虽然A和B消息是顺序的，但是由于存在未知的确认关系，有可能存在A发送失败，B发送成功，A需要重试的时候顺序关系就变成了BA。简之一句就是在发送B时A的发送状态是未知的。<br>针对以上的问题，严格的顺序消费还需要以下参数支持：max.in.flight.requests.per.connection<br>这个参数官方文档的解释是：</p><blockquote><p>The maximum number of unacknowledged requests the client will send on a single connection before blocking. Note that if this setting is set to be greater than 1 and there are failed sends, there is a risk of message re-ordering due to retries (i.e., if retries are enabled).</p></blockquote><p>大体意思是：</p><blockquote><p>在发送阻塞前对于每个连接，正在发送但是发送状态未知的最大消息数量。如果设置大于1，那么就有可能存在有发送失败的情况下，因为重试发送导致的消息乱序问题。<br>所以我们应该将其设置为1，保证在后一条消息发送前，前一条的消息状态已经是可知的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>metrics系列之quickstart</title>
      <link href="/2017/01/15/dropwizard-metrics-series-quickstart/"/>
      <url>/2017/01/15/dropwizard-metrics-series-quickstart/</url>
      
        <content type="html"><![CDATA[<p>dropwizard/metrics</p><p>Metrics是一个Java库，它能在你的生产环境中，为你的代码中提供无与伦比的洞察力。</p><p>Metrics提供了一个强大的工具包，用于测量生产环境中关键组件的行为。</p><p>它提供了常见模块支持，如：Jetty，Logback，Log4j，Apache HttpClient，Ehcache，JDBI，Jersey和报告后端（如Ganglia和Graphite）的公共库的模块，Metrics为您提供全栈可见性。</p><h1 id="QuickStarted"><a href="#QuickStarted" class="headerlink" title="QuickStarted"></a>QuickStarted</h1><p>下面是我们开始一个quickstart的步骤</p><h2 id="Setting-Up-Maven"><a href="#Setting-Up-Maven" class="headerlink" title="Setting Up Maven"></a>Setting Up Maven</h2><p>需要加入maven依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.dropwizard.metrics<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>metrics-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;metrics.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注意：你要确保metrics.version属性已经在你的pom文件中被定义，当前的版本是3.1.0</p></blockquote><p>好的，现在是时候开始为你的程序提供指标化的数据了</p><a id="more"></a><h2 id="Meters"><a href="#Meters" class="headerlink" title="Meters"></a>Meters</h2><p>一个Meter负责测量一类事件的速率（比如：请求速率/ requests per sencond）, 它提供了1分钟，5分钟，15分钟的平均值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Meter requests = metrics.meter(<span class="string">"requests"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request, Response response)</span> </span>&#123;</span><br><span class="line">    requests.mark();</span><br><span class="line">    <span class="comment">// etc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个meter将会测量请求速率，单位为requests per seconds</p><h2 id="Console-Reporter"><a href="#Console-Reporter" class="headerlink" title="Console Reporter"></a>Console Reporter</h2><p>就如听起来的一样，它会将结果汇报给标准输出，这个报告会每隔1秒钟打印一次<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)</span><br><span class="line">       .convertRatesTo(TimeUnit.SECONDS)</span><br><span class="line">       .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class="line">       .build();</span><br><span class="line">   reporter.start(<span class="number">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure></p><p>so，完整的示例看起来是这个样子的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sample;</span><br><span class="line">  <span class="keyword">import</span> com.codahale.metrics.*;</span><br><span class="line">  <span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetStarted</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> MetricRegistry metrics = <span class="keyword">new</span> MetricRegistry();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      startReport();</span><br><span class="line">      Meter requests = metrics.meter(<span class="string">"requests"</span>);</span><br><span class="line">      requests.mark();</span><br><span class="line">      wait5Seconds();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)</span><br><span class="line">          .convertRatesTo(TimeUnit.SECONDS)</span><br><span class="line">          .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class="line">          .build();</span><br><span class="line">      reporter.start(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wait5Seconds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>(InterruptedException e) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>pom文件的定义：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>somegroup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Example project for Metrics<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">metrics.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">metrics.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.dropwizard.metrics<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>metrics-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;metrics.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>运行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package exec:java -Dexec.mainClass=sample.GetStarted</span><br></pre></td></tr></table></figure></p><h2 id="The-Registry"><a href="#The-Registry" class="headerlink" title="The Registry"></a>The Registry</h2><p>MetricsRegistry是整个项目的核心类，它是所有测量的容量，可以通过如下方式创建它：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> MetricRegistry metrics = <span class="keyword">new</span> MetricRegistry();</span><br></pre></td></tr></table></figure></p><p>你可能想把这个实例集成到你的应用生命周期中（比如使用你的依赖注入），这没有任何问题,但是建议还是静态实例化是一个最佳实践。</p><h2 id="Gauges"><a href="#Gauges" class="headerlink" title="Gauges"></a>Gauges</h2><p>一个gauges代表了一个瞬时度量值，例如：我们想要度量一个队列中的pending jobs数据量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QueueManager</span><span class="params">(MetricRegistry metrics, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = <span class="keyword">new</span> Queue();</span><br><span class="line">        metrics.register(MetricRegistry.name(QueueManager.class, name, <span class="string">"size"</span>),</span><br><span class="line">                         <span class="keyword">new</span> Gauge&lt;Integer&gt;() &#123;</span><br><span class="line">                             <span class="meta">@Override</span></span><br><span class="line">                             <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                 <span class="keyword">return</span> queue.size();</span><br><span class="line">                             &#125;</span><br><span class="line">                         &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当这个gauge被度量时，它将返回这个队列中的job数量</p><p>每个metric在注册表(registry)中都有一个唯一的名字，这个名字一般使用.号分隔，如：things.count，又或者:”com.example.Thing.latency”。MetricRegistry有一个静态的方法用于构造这些命名：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MetricRegistry.name(QueueManager.class, <span class="string">"jobs"</span>, <span class="string">"size"</span>)</span><br></pre></td></tr></table></figure></p><p>以上的例子会返回: “com.example.QueueManager.jobs.size”</p><p>对于大多数queue或者像queue一样的数据结构，通常不希望只返回队列的大小，大多数java.util和java.util.concurrent包的size()实现都是O(n)的复杂度，这表示你的gauge将会比较慢（潜在地可能存在加锁）</p><h2 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h2><p>一个Counter实际上也是一个gauge，它是关于AtomicLong的一个泛型实例。你可以自增或者自减它的值，例如，我们可以以不同的方式来度量队列中的pending job：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Counter pendingJobs = metrics.counter(name(QueueManager.class, <span class="string">"pending-jobs"</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(Job job)</span> </span>&#123;</span><br><span class="line">    pendingJobs.inc();</span><br><span class="line">    queue.offer(job);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">takeJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pendingJobs.dec();</span><br><span class="line">    <span class="keyword">return</span> queue.take();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每次该counter被计算时，它将会返回这个队列中的job数量</p><p>就上面看到的，counters的API是不同的，#counter(String) 取代了#register(String,Metrics)，然而你也可以使用register，然后创建一个你自己的Counter实例，但是要说一下的是，#counter(String) 帮你做了这一切，并且允许你通过该名称进行引用复用。</p><h2 id="Histograms"><a href="#Histograms" class="headerlink" title="Histograms"></a>Histograms</h2><p>Histogram是一个流式数据的统计分布，除了比如：最大值，最小值，平均值等，它还支持中位数，75%，90%，95%，98%，99%和99.9%的百分线<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Histogram responseSizes = metrics.histogram(name(RequestHandler.class, <span class="string">"response-sizes"</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request, Response response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// etc</span></span><br><span class="line">    responseSizes.update(response.getContent().length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该histogram将会度量响应的大小</p><h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h2><p>一个Timer提供了某个程序的耗时和调用速率<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Timer responses = metrics.timer(name(RequestHandler.class, <span class="string">"responses"</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleRequest</span><span class="params">(Request request, Response response)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Timer.Context context = responses.time();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// etc;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        context.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该timer会度量该段代码的调用速率以及调用的时耗。</p><h2 id="Health-Checks"><a href="#Health-Checks" class="headerlink" title="Health Checks"></a>Health Checks</h2><p>Metrics也提供了通过metrics-healthchecks模块集中式健康检测的能力<br>首先，创建一个健康检测注册表的实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> HealthCheckRegistry healthChecks = <span class="keyword">new</span> HealthCheckRegistry();</span><br></pre></td></tr></table></figure></p><p>其次，实现一个健康检测的子类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseHealthCheck</span> <span class="keyword">extends</span> <span class="title">HealthCheck</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Database database;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseHealthCheck</span><span class="params">(Database database)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.database = database;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HealthCheck.<span class="function">Result <span class="title">check</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (database.isConnected()) &#123;</span><br><span class="line">            <span class="keyword">return</span> HealthCheck.Result.healthy();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> HealthCheck.Result.unhealthy(<span class="string">"Cannot connect to "</span> + database.getUrl());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后注册它：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">healthChecks.register(<span class="string">"postgres"</span>, <span class="keyword">new</span> DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure></p><p>运行健康检测：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Map&lt;String, HealthCheck.Result&gt; results = healthChecks.runHealthChecks();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, HealthCheck.Result&gt; entry : results.entrySet()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.getValue().isHealthy()) &#123;</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">" is healthy"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.err.println(entry.getKey() + <span class="string">" is UNHEALTHY: "</span> + entry.getValue().getMessage());</span><br><span class="line">        <span class="keyword">final</span> Throwable e = entry.getValue().getError();</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Metrics comes with a pre-built health check: ThreadDeadlockHealthCheck, which uses Java’s built-in thread deadlock detection to determine if any threads are deadlocked.</p></blockquote><h2 id="Reporting-Via-JMX"><a href="#Reporting-Via-JMX" class="headerlink" title="Reporting Via JMX"></a>Reporting Via JMX</h2><p>通过JMX汇报指标<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> JmxReporter reporter = JmxReporter.forRegistry(registry).build();</span><br><span class="line">reporter.start();</span><br></pre></td></tr></table></figure></p><p>当上面的reporter开启后，你就可以通过JConsole或者VisualVM进行MBean查看了：<br><img src="/2017/01/15/dropwizard-metrics-series-quickstart/metrics-visualvm.png"></p><h2 id="Reporting-Via-HTTP"><a href="#Reporting-Via-HTTP" class="headerlink" title="Reporting Via HTTP"></a>Reporting Via HTTP</h2><p>提供一个Servlet，该Servlet提供了所有metrics的json表现形式。它同样会运行健康检测，打印thread dump，提供简单的ping pong响应用于负载均衡。（当然也有分开的单独的Servlet提供单独的功能，例如：MetricsServlet, HealthCheckServlet, ThreadDumpServlet, and PingServlet）</p><p>如果需要使用到上面的东西，需要以下依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.dropwizard.metrics<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>metrics-servlets<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;metrics.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Other-Reporting"><a href="#Other-Reporting" class="headerlink" title="Other Reporting"></a>Other Reporting</h2><p>除了以上的JMX和HTTP Reporter以外，还有以下一些Reporter:</p><ul><li>STDOUT, using ConsoleReporter from metrics-core</li><li>CSV files, using CsvReporter from metrics-core</li><li>SLF4J loggers, using Slf4jReporter from metrics-core</li><li>Ganglia, using GangliaReporter from metrics-ganglia</li><li>Graphite, using GraphiteReporter from metrics-graphite</li></ul>]]></content>
      
      
      <categories>
          
          <category> 翻译文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> metrics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka消息可靠性</title>
      <link href="/2017/01/15/reliability-of-kafka-message/"/>
      <url>/2017/01/15/reliability-of-kafka-message/</url>
      
        <content type="html"><![CDATA[<p>kafka消息可靠性，这里涉及几个方面：</p><ul><li>发送可靠性</li><li>接收可靠性</li><li>存储可靠性</li></ul><h1 id="发送可靠性"><a href="#发送可靠性" class="headerlink" title="发送可靠性"></a>发送可靠性</h1><p>kafka新版client(0.10.x)使用java重新实现。使用的是异步方式发送消息，即消息提交给KafkaProducer的send方法后，实际上是将该消息放入了它本身的一个后台发送队列，然后再有一个后台线程不断地从队列中取出消息进行发送，发送成功后会回调send方法的callback（如果没有，就不用回调了）。</p><p>从以上的流程来看，kafka客户端的发送流程是一个异步化的流程，kafka客户端会累积一定量的消息后统一组装成一个批量消息发出，这个的触发条件是： 消息量达到了batch.size的大小或者等待批量的时间超过了linger.ms时间。</p><p>此外还要注意一下发送方消息的堆积问题，当程序的发送速率大于发送到broker的速率时，会产生消费在发送方堆积，堆积的策略控制主要由参数buffer.memory 以及max.block.ms。buffer.memory设置了可使用的buffer内存，max.block.ms是指在buffer满的情况下可以阻塞多长时间，超过这个时间则抛出异常。</p><h2 id="消息失败重试"><a href="#消息失败重试" class="headerlink" title="消息失败重试"></a>消息失败重试</h2><p>设置失败重试的次数为一个很大的数值,如Integer.MAX_VALUE，对应properties的设置为：</p><table><thead><tr><th style="text-align:center">配置</th><th style="text-align:center">默认值</th><th style="text-align:center">建议值</th></tr></thead><tbody><tr><td style="text-align:center">retries</td><td style="text-align:center">0</td><td style="text-align:center">Integer.MAX_VALUE</td></tr></tbody></table><h2 id="消息异步转同步"><a href="#消息异步转同步" class="headerlink" title="消息异步转同步"></a>消息异步转同步</h2><p>对于消息异步转同步：使用future.get()等待消息发送返回结果,如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;RecordMetadata&gt; future = producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"test.testTopic"</span>, <span class="string">"key"</span>,<span class="string">"value"</span>));</span><br><span class="line">RecordMetadata metadata = future.get(); <span class="comment">//等待发送结果返回</span></span><br></pre></td></tr></table></figure></p><p>这种用法可能会导致性能下降比较厉害，也可以通过send(message,callback)的方式，在消息发送失败时通过callback记录失败并处理</p><h2 id="顺序消息"><a href="#顺序消息" class="headerlink" title="顺序消息"></a>顺序消息</h2><p>kafka默认情况下是批量发送，批量发送存在消息积累再发送的过程，为了达到消息send后立刻发送到broker的要求，对应properties设置：</p><table><thead><tr><th style="text-align:center">配置</th><th style="text-align:center">默认值</th><th style="text-align:center">建议值</th></tr></thead><tbody><tr><td style="text-align:center">max.in.flight.requests.per.connection</td><td style="text-align:center">5</td><td style="text-align:center">1</td></tr></tbody></table><p>其中max.in.flight.requests.per.connection以及retries主要应用于顺序消息场景，顺序场景中需要设置为：<br>max.in.flight.requests.per.connection = 1</p><a id="more"></a><p>综合以上配置示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"localhost:9092"</span>);</span><br><span class="line">props.put(<span class="string">"acks"</span>, <span class="string">"1"</span>); <span class="comment">//这里是只要求leader响应就OK，更高的要求则应该设置成"all"</span></span><br><span class="line">props.put(<span class="string">"retries"</span>, Integer.MAX_VALUE);</span><br><span class="line">props.put(<span class="string">"max.in.flight.requests.per.connection"</span>,<span class="number">1</span>);</span><br><span class="line">props.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>); <span class="comment">//这里是key的序列化类</span></span><br><span class="line">props.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);<span class="comment">//这里是value的序列化类</span></span><br><span class="line"></span><br><span class="line">Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String,String&gt;(props);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">   Future&lt;RecordMetadata&gt; future = producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"test.testTopic"</span>,<span class="string">"key"</span>,<span class="string">"value"</span>));</span><br><span class="line">   RecordMetadata metadata = future.get(); <span class="comment">//关键的这一步，同步等待发送完成</span></span><br><span class="line">&#125;</span><br><span class="line">producer.close();</span><br></pre></td></tr></table></figure></p><h1 id="接收可靠性"><a href="#接收可靠性" class="headerlink" title="接收可靠性"></a>接收可靠性</h1><p>新版的java客户端（0.10.0.0）已经变更接收线程为单线程接收处理。<br>同时客户端默认情况下是自动提交offset，这样可能存在消息丢失的可能性，比如客户端接收到一批消息并进行处理，在处理过程中达到了客户端offset定时提交的时间点，这批数据的offset被提交，但是可能这批数据的处理还没有结束，甚至这些数据可能还存在一些数据处理不了或者处理出错，甚至出现宕机的可能性，这时未处理的消息将会丢失，因为offset已经提交，下次读取会从新的offset处读取。所以要保证消息的可靠接收，需要将enable.auto.commit设置为false，防止程序自动提交，应该由应用程序处理完成后手动提交。<br>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"localhost:9092"</span>);</span><br><span class="line">props.put(<span class="string">"group.id"</span>, <span class="string">"testsub"</span>);</span><br><span class="line">props.put(<span class="string">"enable.auto.commit"</span>, <span class="string">"false"</span>);</span><br><span class="line">props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;String,String&gt;(props);</span><br><span class="line">consumer.subscribe(Arrays.asList(<span class="string">"test.testTopic"</span>,<span class="string">"testsub"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">   ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">   Map&lt;TopicPartition,OffsetAndMetadata&gt; commitMap = <span class="keyword">new</span> HashMap(<span class="number">10</span>);</span><br><span class="line">   <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">      logger.info(record.value()); <span class="comment">//模拟消息</span></span><br><span class="line">      commitMap.put(<span class="keyword">new</span> TopicPartition(record.topic(),record.partition()),<span class="keyword">new</span> OffsetAndMetadata(record.offset()+<span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(commitMap.isEmpty())&#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    consumer.commitSync(commitMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="存储可靠性"><a href="#存储可靠性" class="headerlink" title="存储可靠性"></a>存储可靠性</h1><h2 id="刷盘时机"><a href="#刷盘时机" class="headerlink" title="刷盘时机"></a>刷盘时机</h2><p>broker的刷盘时机主要是以下两个参数控制：<br>log.flush.interval.ms                  日志刷盘的时间间隔，每隔多少时间将消息刷到磁盘上<br>log.flush.interval.messages      日志刷盘的消息量，每积累多少条消息将消息刷到磁盘上</p><h2 id="副本数"><a href="#副本数" class="headerlink" title="副本数"></a>副本数</h2><p>在创建消息Topic的时候需要指定消息的副本数  replicas<br>一般建议设置成3保证消息的可靠，再结合客户端发送方的ack参数，当ack参数设置为0表示不等待broker响应就发送下一条消息，当ack设置为1则表示需要等待leader响应，当ack设置为all则表示需要等待所有的replicas ISR都响应后才返回响应，其中all是最高可靠级别了，但是同时也降低了吞吐率。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka-manager 0.10 试玩</title>
      <link href="/2017/01/11/kafka-manager-play-with-0.10/"/>
      <url>/2017/01/11/kafka-manager-play-with-0.10/</url>
      
        <content type="html"><![CDATA[<h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><p>kafka-manager项目提供了kafka集群的常用管理和监控功能，官方描述如下：</p><blockquote><p>A tool for managing Apache Kafka.<br>It supports the following:</p><ul><li>Manage multiple clusters</li><li>Easy inspection of cluster state (topics, consumers, offsets, brokers, replica distribution, partition distribution)</li><li>Run preferred replica election</li><li>Generate partition assignments with option to select brokers to use</li><li>Run reassignment of partition (based on generated assignments)</li><li>Create a topic with optional topic configs (0.8.1.1 has different configs than 0.8.2+)</li><li>Delete topic (only supported on 0.8.2+ and remember set delete.topic.enable=true in broker config)</li><li>Topic list now indicates topics marked for deletion (only supported on 0.8.2+)</li><li>Batch generate partition assignments for multiple topics with option to select brokers to use</li><li>Batch run reassignment of partition for multiple topics</li><li>Add partitions to existing topic</li><li>Update config for existing topic</li><li>Optionally enable JMX polling for broker level and topic level metrics.</li><li>Optionally filter out consumers that do not have ids/ owners/ &amp; offsets/ directories in zookeeper.</li></ul></blockquote><p>Kafka-manger项目：<a href="http://www.github.com/yahoo/kafka-manager" target="_blank" rel="noopener">http://www.github.com/yahoo/kafka-manager</a></p><p>该项目目前尚未支持kafka 0.10.x 系列版本。不过在其的PR中有关于支持0.10版本的PR：<a href="https://github.com/yahoo/kafka-manager/pull/282" target="_blank" rel="noopener">https://github.com/yahoo/kafka-manager/pull/282</a></p><a id="more"></a><h1 id="本地合并步骤"><a href="#本地合并步骤" class="headerlink" title="本地合并步骤"></a>本地合并步骤</h1><p>git clone <a href="https://github.com/yahoo/kafka-manager.git" target="_blank" rel="noopener">https://github.com/yahoo/kafka-manager.git</a><br>git fetch origin pull/282/head:0.10.0<br>git checkout 0.10.0</p><h1 id="代码编译"><a href="#代码编译" class="headerlink" title="代码编译"></a>代码编译</h1><p>cd kafka-manager<br>./sbt clean dist<br>如果是全新的编译环境，编译时间会非常久（主要原因是要初始化sbt编译系统的各种，比如下载ivy2依赖的jar包等）<br>编译完成后在目录 target/universal目录下会出现zip文件即为编译打包成功的部署包。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>解压到服务器某目录，只需要配置conf/application.conf文件内容即可：<br>kafka-manager.zkhosts=”172.19.11.197:2181”<br>以上ZK地址根据实际情况修改成合适的地址。</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>bin目录启动，./kafka-manger</p><h1 id="kafka-manger特性研究"><a href="#kafka-manger特性研究" class="headerlink" title="kafka-manger特性研究"></a>kafka-manger特性研究</h1><table><thead><tr><th style="text-align:center">功能模块</th><th style="text-align:center">功能点</th><th style="text-align:center">是否具备</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">集群管理</td><td style="text-align:center">添加集群</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">修改集群</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">启/禁用集群</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">删除集群</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">集群列表</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Broker管理</td><td style="text-align:center">Broker列表</td><td style="text-align:center">√</td><td style="text-align:center"><a href="#metrics1">指标</a></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Broker详情</td><td style="text-align:center">√</td><td style="text-align:center">消息总量/Topic列表</td></tr><tr><td style="text-align:center">Topic管理</td><td style="text-align:center">Topic创建</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Topic列表</td><td style="text-align:center">√</td><td style="text-align:center"><a href="#metrics2">指标</a></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Topic详情</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Topic删除</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">分区调整</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">分区信息</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">订阅管理</td><td style="text-align:center">Consumer列表</td><td style="text-align:center">√</td><td style="text-align:center">需要JMX开启支持</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Consumer详情</td><td style="text-align:center">√</td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">权限管理</td><td style="text-align:center">登录</td><td style="text-align:center">√</td><td style="text-align:center">提供basic auth，后台可配置用户名、密码登录</td></tr></tbody></table><p><span id="metrics1"></span></p><h2 id="Broker-指标"><a href="#Broker-指标" class="headerlink" title="Broker 指标"></a>Broker 指标</h2><ol><li>Message in /sec</li><li>Bytes in /sec</li><li>Bytes out /sec</li><li>Bytes rejected /sec</li><li>Failed fetch request /sec</li><li><p>Failed produce request /sec</p><p><strong> 需要Broker开启JMX </strong><br></p></li></ol><p><span id="metrics2"></span></p><h2 id="Topic-指标"><a href="#Topic-指标" class="headerlink" title="Topic 指标"></a>Topic 指标</h2><ol><li>Replication （副本数）</li><li>Number of Partitions (分区数)</li><li>Sum of partition offsets (offset大小，需要开启JMX支持）</li><li>Total number of Brokers （Broker总数）</li><li>Number of Brokers for Topic （Topic所占Broker数）</li><li>Preferred Replicas %  （）</li><li>Brokers Skewed % （Broker 均衡率）</li><li>Brokers Spread % （Broker  扩散率）</li><li><p>Under-replicated % （处于同步状态的比率）</p><p><strong> 需要JMX开启支持 </strong><br></p></li></ol><p><strong> 风险项    0.10版支持    　    master上尚未合并0.10版本的PR，需要自己合并测试后可用    </strong></p><p>附一些界面截图：<br><img src="/2017/01/11/kafka-manager-play-with-0.10/kafka-manager1.png" title="[主页]"><br><img src="/2017/01/11/kafka-manager-play-with-0.10/kafka-manager2.png" title="[Broker列表及指标]"></p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo服务可用性监控手段</title>
      <link href="/2016/06/19/the-method-to-monitor-availability-of-services-in-dubbo/"/>
      <url>/2016/06/19/the-method-to-monitor-availability-of-services-in-dubbo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。在采用Dubbo作为服务化框架的过程中需要对服务接口可用性进行监控，程序需要通过监控平台去监控所有业务Dubbo服务接口的可用性。希望的是在1分钟内如果有服务挂掉会有监控报警发出，并且有监控页面显示监控数据，且有数据报表产出某个时间单位内的服务可用性。</p><p>服务可用性的定义： 在一段时间内，服务可用时间/（服务可用时间+服务不可用时间）* 100%</p><a id="more"></a><p>这里有几个问题需要解决：</p><ul><li>监控平台监控怎么与业务平台松耦合？</li></ul><p>首先监控平台不可能去引用所有一大堆的其它业务系统的Dubbo接口的SDK，这样无法保证稳定且无法扩展。</p><blockquote><p>如果有新的业务需要监控，是不是需要新加入该业务的SDK接口包呢？<br>  如果某个业务平台的SDK升级了，是不是监控平台也需要跟着升级SDK呢？</p></blockquote><p>所以首先想到的就是监控平台能够在不引入业务平台的SDK的前提下就可以监控到业务平台的服务状况。这里想到的就是使用Dubbo提供的泛化调用，可以在事先不知道业务方SDK的情况下调用业务接口。</p><ul><li>监控平台怎么对业务判活？</li></ul><p>如果要求业务方在自己的服务中强行嵌入一个健康检测的接口，对于业务方来说总有种被强奸的感觉。幸好Dubbo也提供了一个回声测试接口，什么是回声测试？就是你发给它什么东西，它返回给你什么东西。就像你对着大山喊了一声“hi”，大山回声一句“hi”一样的道理，证明对方是有能力回复你的，从某种程序上证明对方仍然处于存活状态。</p><p>在Dubbo中，泛接口调用方式主要用于客户端没有API接口及模型类元的情况，参数及返回值中的所有POJO均用Map表示，通常用于框架集成，比如：实现一个通用的服务测试框架，可通过GenericService调用所有服务实现。回声测试用于检测服务是否可用，回声测试按照正常请求流程执行，能够测试整个调用是否通畅，可用于监控。所有服务自动实现EchoService接口，只需将任意服务引用强制转型为EchoService，即可使用。</p><h1 id="dubbo回声测试"><a href="#dubbo回声测试" class="headerlink" title="dubbo回声测试"></a>dubbo回声测试</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"memberService"</span> <span class="attr">interface</span>=<span class="string">"com.xxx.MemberService"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MemberService memberService = ctx.getBean(<span class="string">"memberService"</span>); <span class="comment">// 远程服务引用</span></span><br><span class="line"></span><br><span class="line">EchoService echoService = (EchoService) memberService; <span class="comment">// 强制转型为EchoService</span></span><br><span class="line"></span><br><span class="line">String status = echoService.$echo(<span class="string">"OK"</span>); <span class="comment">// 回声测试可用性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(status.equals(<span class="string">"OK"</span>));</span><br></pre></td></tr></table></figure><h1 id="dubbo泛化调用"><a href="#dubbo泛化调用" class="headerlink" title="dubbo泛化调用"></a>dubbo泛化调用</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">generic</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GenericService barService = (GenericService) applicationContext.getBean(<span class="string">"barService"</span>);</span><br><span class="line">Object result = barService.$invoke(<span class="string">"sayHello"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"java.lang.String"</span> &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">"World"</span> &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.service.GenericService; </span><br><span class="line">... </span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用远程服务 </span></span><br><span class="line">ReferenceConfig&lt;GenericService&gt; reference = <span class="keyword">new</span> ReferenceConfig&lt;GenericService&gt;(); <span class="comment">// 该实例很重量，里面封装了所有与注册中心及服务提供方连接，请缓存</span></span><br><span class="line">reference.setInterface(<span class="string">"com.xxx.XxxService"</span>); <span class="comment">// 弱类型接口名 </span></span><br><span class="line">reference.setVersion(<span class="string">"1.0.0"</span>); </span><br><span class="line">reference.setGeneric(<span class="keyword">true</span>); <span class="comment">// 声明为泛化接口 </span></span><br><span class="line"></span><br><span class="line">GenericService genericService = reference.get(); <span class="comment">// 用com.alibaba.dubbo.rpc.service.GenericService可以替代所有接口引用 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本类型以及Date,List,Map等不需要转换，直接调用 </span></span><br><span class="line">Object result = genericService.$invoke(<span class="string">"sayHello"</span>, <span class="keyword">new</span> String[] &#123;<span class="string">"java.lang.String"</span>&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"world"</span>&#125;); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 用Map表示POJO参数，如果返回值为POJO也将自动转成Map </span></span><br><span class="line">Map&lt;String, Object&gt; person = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(); </span><br><span class="line">person.put(<span class="string">"name"</span>, <span class="string">"xxx"</span>); </span><br><span class="line">person.put(<span class="string">"password"</span>, <span class="string">"yyy"</span>); </span><br><span class="line">Object result = genericService.$invoke(<span class="string">"findPerson"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"com.xxx.Person"</span>&#125;, <span class="keyword">new</span> Object[]&#123;person&#125;); <span class="comment">// 如果返回POJO将自动转成Map </span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>假设存在POJO如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonImpl</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>则POJO数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> PersonImpl(); </span><br><span class="line">person.setName(<span class="string">"xxx"</span>); </span><br><span class="line">person.setPassword(<span class="string">"yyy"</span>);</span><br></pre></td></tr></table></figure></p><p>可用下面Map表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); </span><br><span class="line">map.put(&quot;class&quot;, &quot;com.xxx.PersonImpl&quot;); // 注意：如果参数类型是接口，或者List等丢失泛型，可通过class属性指定类型。</span><br><span class="line">map.put(&quot;name&quot;, &quot;xxx&quot;); </span><br><span class="line">map.put(&quot;password&quot;, &quot;yyy&quot;);</span><br></pre></td></tr></table></figure></p><p>以上引用至Dubbo官方文档：<a href="http://dubbo.io/user-guide/demos/%E6%B3%9B%E5%8C%96%E5%BC%95%E7%94%A8.html" target="_blank" rel="noopener">泛化引用</a></p><h1 id="回声测试与泛化调用之冲突"><a href="#回声测试与泛化调用之冲突" class="headerlink" title="回声测试与泛化调用之冲突"></a>回声测试与泛化调用之冲突</h1><p>通过泛化引用与回声测试两者结合，刚好能满足我们的监控需求，监控平台通过注册中心获取所有的服务接口，并通过泛化引用方式引用服务，并调用服务的回声接口测试可用性。</p><p>一切看起来都那么美好，但是现实总是那么残酷。对于Dubbo目前的处境来说，泛化引用和回声测试同时使用时会产生不兼容，究其原因是因为：<code>Dubbo的泛化引用调用和回声测试是两个不同的Filter，泛化调用Filter被用于客户端执行，而回声测试被用于服务端，在进行回声测试时并没有对泛化调用进行回应</code></p><h1 id="冲突分析"><a href="#冲突分析" class="headerlink" title="冲突分析"></a>冲突分析</h1><p>Dubbo回声测试的Filter：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Activate</span>(group = Constants.PROVIDER, order = -<span class="number">110000</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation inv)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(inv.getMethodName().equals(Constants.$ECHO) &amp;&amp; inv.getArguments() != <span class="keyword">null</span> &amp;&amp; inv.getArguments().length == <span class="number">1</span> )</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RpcResult(inv.getArguments()[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> invoker.invoke(inv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Dubbo泛化引用调用的Filter：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Activate</span>(group = Constants.CONSUMER, value = Constants.GENERIC_KEY, order = <span class="number">20000</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericImplFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GenericImplFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] GENERIC_PARAMETER_TYPES = <span class="keyword">new</span> Class&lt;?&gt;[] &#123;String.class, String[].class, Object[].class&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        String generic = invoker.getUrl().getParameter(Constants.GENERIC_KEY);</span><br><span class="line">        <span class="keyword">if</span> (ProtocolUtils.isGeneric(generic)</span><br><span class="line">                &amp;&amp; ! Constants.$INVOKE.equals(invocation.getMethodName())</span><br><span class="line">                &amp;&amp; invocation <span class="keyword">instanceof</span> RpcInvocation) &#123;</span><br><span class="line">            RpcInvocation invocation2 = (RpcInvocation) invocation;</span><br><span class="line">            String methodName = invocation2.getMethodName();</span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = invocation2.getParameterTypes();</span><br><span class="line">            Object[] arguments = invocation2.getArguments();</span><br><span class="line">            </span><br><span class="line">            String[] types = <span class="keyword">new</span> String[parameterTypes.length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i ++) &#123;</span><br><span class="line">                types[i] = ReflectUtils.getName(parameterTypes[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Object[] args;</span><br><span class="line">            <span class="keyword">if</span> (ProtocolUtils.isBeanGenericSerialization(generic)) &#123;</span><br><span class="line">                args = <span class="keyword">new</span> Object[arguments.length];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arguments.length; i++) &#123;</span><br><span class="line">                    args[i] = JavaBeanSerializeUtil.serialize(arguments[i], JavaBeanAccessor.METHOD);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                args = PojoUtils.generalize(arguments);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            invocation2.setMethodName(Constants.$INVOKE);</span><br><span class="line">            invocation2.setParameterTypes(GENERIC_PARAMETER_TYPES);</span><br><span class="line">            invocation2.setArguments(<span class="keyword">new</span> Object[] &#123;methodName, types, args&#125;);</span><br><span class="line">            Result result = invoker.invoke(invocation2);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (! result.hasException()) &#123;</span><br><span class="line">                Object value = result.getValue();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Method method = invoker.getInterface().getMethod(methodName, parameterTypes);</span><br><span class="line">                    <span class="keyword">if</span> (ProtocolUtils.isBeanGenericSerialization(generic)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(value);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> JavaBeanDescriptor) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)value));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(</span><br><span class="line">                                <span class="keyword">new</span> StringBuilder(<span class="number">64</span>)</span><br><span class="line">                                    .append(<span class="string">"The type of result value is "</span>)</span><br><span class="line">                                    .append(value.getClass().getName())</span><br><span class="line">                                    .append(<span class="string">" other than "</span>)</span><br><span class="line">                                    .append(JavaBeanDescriptor.class.getName())</span><br><span class="line">                                    .append(<span class="string">", and the result is "</span>)</span><br><span class="line">                                    .append(value).toString());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(PojoUtils.realize(value, method.getReturnType(), method.getGenericReturnType()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.getException() <span class="keyword">instanceof</span> GenericException) &#123;</span><br><span class="line">                GenericException exception = (GenericException) result.getException();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String className = exception.getExceptionClass();</span><br><span class="line">                    Class&lt;?&gt; clazz = ReflectUtils.forName(className);</span><br><span class="line">                    Throwable targetException = <span class="keyword">null</span>;</span><br><span class="line">                    Throwable lastException = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        targetException = (Throwable) clazz.newInstance();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        lastException = e;</span><br><span class="line">                        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : clazz.getConstructors()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                targetException = (Throwable) constructor.newInstance(<span class="keyword">new</span> Object[constructor.getParameterTypes().length]);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable e1) &#123;</span><br><span class="line">                                lastException = e1;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (targetException != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Field field = Throwable.class.getDeclaredField(<span class="string">"detailMessage"</span>);</span><br><span class="line">                            <span class="keyword">if</span> (! field.isAccessible()) &#123;</span><br><span class="line">                                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            field.set(targetException, exception.getExceptionMessage());</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                            logger.warn(e.getMessage(), e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        result = <span class="keyword">new</span> RpcResult(targetException);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastException != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> lastException;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Can not deserialize exception "</span> + exception.getExceptionClass() + <span class="string">", message: "</span> + exception.getExceptionMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (invocation.getMethodName().equals(Constants.$INVOKE)</span><br><span class="line">            &amp;&amp; invocation.getArguments() != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; invocation.getArguments().length == <span class="number">3</span></span><br><span class="line">            &amp;&amp; ProtocolUtils.isGeneric(generic)) &#123;</span><br><span class="line"></span><br><span class="line">            Object[] args = (Object[]) invocation.getArguments()[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (ProtocolUtils.isJavaGenericSerialization(generic)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(<span class="keyword">byte</span>[].class == arg.getClass())) &#123;</span><br><span class="line">                        error(<span class="keyword">byte</span>[].class.getName(), arg.getClass().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ProtocolUtils.isBeanGenericSerialization(generic)) &#123;</span><br><span class="line">                <span class="keyword">for</span>(Object arg : args) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(arg <span class="keyword">instanceof</span> JavaBeanDescriptor)) &#123;</span><br><span class="line">                        error(JavaBeanDescriptor.class.getName(), arg.getClass().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ((RpcInvocation)invocation).setAttachment(</span><br><span class="line">                Constants.GENERIC_KEY, invoker.getUrl().getParameter(Constants.GENERIC_KEY));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(String expected, String actual)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(</span><br><span class="line">            <span class="keyword">new</span> StringBuilder(<span class="number">32</span>)</span><br><span class="line">                .append(<span class="string">"Generic serialization ["</span>)</span><br><span class="line">                .append(Constants.GENERIC_SERIALIZATION_NATIVE_JAVA)</span><br><span class="line">                .append(<span class="string">"] only support message type "</span>)</span><br><span class="line">                .append(expected)</span><br><span class="line">                .append(<span class="string">" and your message type is "</span>)</span><br><span class="line">                .append(actual).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从以上两个源码中也可以看出，泛化调用中没有对回声测试进行处理。</p><h1 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h1><p>解决冲突有两种方式：</p><ul><li><p>修改回声测试调用Filter，并对泛化调用进行处理</p></li><li><p>增加新自定义的Provider端Filter，并且排在回声调用Filter之前对泛化调用中的回声测试进行处理返回。</p></li></ul><p>由于Dubbo的扩展性做得非常棒，这里只需要自己定义一个Filter来实现就可以了：</p><p>GenericEchoFilter.java:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Activate</span>(</span><br><span class="line">    group = &#123;<span class="string">"provider"</span>&#125;,</span><br><span class="line">    order = -<span class="number">999999</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEchoFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(GenericEchoFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericEchoFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(invocation.getMethodName().equals(<span class="string">"$invoke"</span>) &amp;&amp; invocation.getArguments() != <span class="keyword">null</span> &amp;&amp; invocation.getArguments().length == <span class="number">3</span> &amp;&amp; !ProtocolUtils.isGeneric(invoker.getUrl().getParameter(<span class="string">"generic"</span>))) &#123;</span><br><span class="line">            Object[] arguments = invocation.getArguments();</span><br><span class="line">            Object realMethod = arguments[<span class="number">0</span>];</span><br><span class="line">            String[] argsTypes = (String[])((String[])arguments[<span class="number">1</span>]);</span><br><span class="line">            Object[] args = (Object[])((Object[])arguments[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"$echo"</span>.equals(realMethod) &amp;&amp; argsTypes != <span class="keyword">null</span> &amp;&amp; argsTypes.length == <span class="number">1</span> &amp;&amp; args != <span class="keyword">null</span> &amp;&amp; args.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(args[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意以上的<code>order</code>属性值要大于回声测试Filter中的order值，这样才能保证先于回声测试就进行响应。</p><p>添加了这个后需要在自己的工程或者工具jar包META-INF/dubbo/下新增filter设定文件com.alibaba.dubbo.rpc.Filter，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genericecho=com.xxx.dubbo.filter.GenericEchoFilter</span><br></pre></td></tr></table></figure></p><p>这样操作过后，Dubbo在启动时会通过SPI方式自动扫描和加载自定义的Filter，这样我们的自定义Filter就自动生效了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Dubbo是阿里开源的一款精品服务化RPC框架，它的扩展点非常多，有着非常强的可定制化功能。本文中基于监控平台的远程泛化引用调用和回声测试中通过自定义的Filter完美地解决了服务化监控的问题。最多的Dubbo扩展特性还需要更多的探索与研究！</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo </tag>
            
            <tag> 问题分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP段转CIDR</title>
      <link href="/2016/05/26/ip-segment-to-CIDR/"/>
      <url>/2016/05/26/ip-segment-to-CIDR/</url>
      
        <content type="html"><![CDATA[<p>经常使用nginx、apache时候需要对某个ip段进行白名单或黑名单控制，而它的配置是以CIDR的方式进行的，所以此工具可以方便的做到从IP段到CIDR的转换。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ip2Cidr</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(range2cidrlist(<span class="string">"10.104.0.12"</span>,<span class="string">"10.104.0.35"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">range2cidrlist</span><span class="params">(String startIp, String endIp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = ipToLong(startIp);</span><br><span class="line">        <span class="keyword">long</span> end = ipToLong(endIp);</span><br><span class="line"> </span><br><span class="line">        ArrayList&lt;String&gt; pairs = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">while</span> (end &gt;= start) &#123;</span><br><span class="line">            <span class="keyword">byte</span> maxsize = <span class="number">32</span>;</span><br><span class="line">            <span class="keyword">while</span> (maxsize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> mask = CIDR2MASK[maxsize - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">long</span> maskedBase = start &amp; mask;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (maskedBase != start) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                maxsize--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">double</span> x = Math.log(end - start + <span class="number">1</span>) / Math.log(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">byte</span> maxdiff = (<span class="keyword">byte</span>) (<span class="number">32</span> - Math.floor(x));</span><br><span class="line">            <span class="keyword">if</span> (maxsize &lt; maxdiff) &#123;</span><br><span class="line">                maxsize = maxdiff;</span><br><span class="line">            &#125;</span><br><span class="line">            String ip = longToIP(start);</span><br><span class="line">            pairs.add(ip + <span class="string">"/"</span> + maxsize);</span><br><span class="line">            start += Math.pow(<span class="number">2</span>, (<span class="number">32</span> - maxsize));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pairs;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] CIDR2MASK = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0x00000000</span>, <span class="number">0x80000000</span>,</span><br><span class="line">                                                      <span class="number">0xC0000000</span>, <span class="number">0xE0000000</span>, <span class="number">0xF0000000</span>, <span class="number">0xF8000000</span>, <span class="number">0xFC000000</span>,</span><br><span class="line">                                                      <span class="number">0xFE000000</span>, <span class="number">0xFF000000</span>, <span class="number">0xFF800000</span>, <span class="number">0xFFC00000</span>, <span class="number">0xFFE00000</span>,</span><br><span class="line">                                                      <span class="number">0xFFF00000</span>, <span class="number">0xFFF80000</span>, <span class="number">0xFFFC0000</span>, <span class="number">0xFFFE0000</span>, <span class="number">0xFFFF0000</span>,</span><br><span class="line">                                                      <span class="number">0xFFFF8000</span>, <span class="number">0xFFFFC000</span>, <span class="number">0xFFFFE000</span>, <span class="number">0xFFFFF000</span>, <span class="number">0xFFFFF800</span>,</span><br><span class="line">                                                      <span class="number">0xFFFFFC00</span>, <span class="number">0xFFFFFE00</span>, <span class="number">0xFFFFFF00</span>, <span class="number">0xFFFFFF80</span>, <span class="number">0xFFFFFFC0</span>,</span><br><span class="line">                                                      <span class="number">0xFFFFFFE0</span>, <span class="number">0xFFFFFFF0</span>, <span class="number">0xFFFFFFF8</span>, <span class="number">0xFFFFFFFC</span>, <span class="number">0xFFFFFFFE</span>,</span><br><span class="line">                                                      <span class="number">0xFFFFFFFF</span> &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">ipToLong</span><span class="params">(String strIP)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span>[] ip = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">4</span>];</span><br><span class="line">        String[] ipSec = strIP.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            ip[k] = Long.valueOf(ipSec[k]);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> (ip[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) + (ip[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) + (ip[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ip[<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">longToIP</span><span class="params">(<span class="keyword">long</span> longIP)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">        sb.append(String.valueOf(longIP &gt;&gt;&gt; <span class="number">24</span>));</span><br><span class="line">        sb.append(<span class="string">"."</span>);</span><br><span class="line">        sb.append(String.valueOf((longIP &amp; <span class="number">0x00FFFFFF</span>) &gt;&gt;&gt; <span class="number">16</span>));</span><br><span class="line">        sb.append(<span class="string">"."</span>);</span><br><span class="line">        sb.append(String.valueOf((longIP &amp; <span class="number">0x0000FFFF</span>) &gt;&gt;&gt; <span class="number">8</span>));</span><br><span class="line">        sb.append(<span class="string">"."</span>);</span><br><span class="line">        sb.append(String.valueOf(longIP &amp; <span class="number">0x000000FF</span>));</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPM查询用法（转）</title>
      <link href="/2016/03/05/rpm-usage-for-query/"/>
      <url>/2016/03/05/rpm-usage-for-query/</url>
      
        <content type="html"><![CDATA[<p>转自：<a href="http://blog.csdn.net/fengyifei11228/article/details/6526149" target="_blank" rel="noopener">http://blog.csdn.net/fengyifei11228/article/details/6526149</a></p><p><strong> 命令格式： rpm {-q|–query}  [select-options]  [query-options] </strong>　　</p><h1 id="对系统中已安装软件的查询"><a href="#对系统中已安装软件的查询" class="headerlink" title="对系统中已安装软件的查询"></a>对系统中已安装软件的查询</h1><ol><li><p>查询系统已安装的软件<br>语法：rpm -q 软件名<br>举例：[root@localhost beinan]# rpm -q gaim<br>gaim-1.3.0-1.fc4 　　</p></li><li><p>查看系统中所有已经安装的包，要加 -a 参数<br>[root@localhost RPMS]# rpm -qa<br>如果分页查看，再加一个管道 |和more命令；</p><p>[root@localhost RPMS]# rpm -qa |more<br>在所有已经安装的软件包中查找某个软件，比如说 gaim ；可以用 grep 抽取出来；</p><p>[root@localhost RPMS]# rpm -qa |grep gaim<br>上面这条的功能和 rpm -q gaim 输出的结果是一样的</p></li><li><p>查询一个已经安装的文件属于哪个软件包<br>语法 rpm -qf 文件名<br>注：文件名所在的绝对路径要指出<br>举例：<br>[root@localhost RPMS]# rpm -qf /usr/lib/libacl.la<br>libacl-devel-2.2.23-8</p></li><li><p>查询已安装软件包都安装到何处<br>语法：rpm -ql 软件名 或 rpm rpmquery -ql 软件名<br>举例：<br>[root@localhost RPMS]# rpm -ql lynx<br>[root@localhost RPMS]# rpmquery -ql lynx</p></li><li><p>查询一个已安装软件包的信息<br>语法格式： rpm -qi 软件名<br>举例：<br>[root@localhost RPMS]# rpm -qi lynx</p></li><li><p>查看一下已安装软件的配置文件<br>语法格式：rpm -qc 软件名<br>举例：<br>[root@localhost RPMS]# rpm -qc lynx</p></li><li><p>查看一个已经安装软件的文档安装位置<br>语法格式： rpm -qd 软件名<br>举例：<br>[root@localhost RPMS]# rpm -qd lynx</p></li><li><p>查看一下已安装软件所依赖的软件包及文件<br>语法格式： rpm -qR 软件名<br>举例：<br>[root@localhost beinan]# rpm -qR rpm-python</p></li></ol><p>总结：对于一个软件包已经安装，我们可以把一系列的参数组合起来用<br>比如 rpm -qil<br>[root@localhost RPMS]# rpm -qil lynx</p><a id="more"></a><h1 id="对于未安装的软件包的查看"><a href="#对于未安装的软件包的查看" class="headerlink" title="对于未安装的软件包的查看"></a>对于未安装的软件包的查看</h1><p>查看的前提是有一个.rpm 的文件，也就是说对既有软件file.rpm的查看等；</p><ol><li><p>查看一个软件包的用途、版本等信息；<br>语法： rpm -qpi file.rpm<br>举例：<br>[root@localhost RPMS]# rpm -qpi lynx-2.8.5-23.i386.rpm</p></li><li><p>查看一件软件包所包含的文件；<br>语法： rpm -qpl file.rpm<br>举例：<br>[root@localhost RPMS]# rpm -qpl lynx-2.8.5-23.i386.rpm</p></li><li><p>查看软件包的文档所在的位置；<br>语法： rpm -qpd file.rpm<br>举例：<br>[root@localhost RPMS]# rpm -qpd lynx-2.8.5-23.i386.rpm</p></li><li><p>查看一个软件包的配置文件；<br>语法： rpm -qpc file.rpm<br>举例：<br>[root@localhost RPMS]# rpm -qpc lynx-2.8.5-23.i386.rpm</p></li><li><p>查看一个软件包的依赖关系<br>语法： rpm -qpR file.rpm<br>举例：<br>[root@localhost archives]# rpm -qpR yumex_0.42-3.0.fc4_noarch.rpm<br>/bin/bash<br>/usr/bin/python<br>config(yumex) = 0.42-3.0.fc4<br>pygtk2<br>pygtk2-libglade<br>rpmlib(CompressedFileNames) &lt;= 3.0.4-1<br>rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1<br>usermode<br>yum &gt;= 2.3.2</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> rpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Invalid bound statement (not found)问题分析</title>
      <link href="/2016/03/03/mybatis-invalid-bound-statement-not-found/"/>
      <url>/2016/03/03/mybatis-invalid-bound-statement-not-found/</url>
      
        <content type="html"><![CDATA[<p>今天又因为精心大意犯一个错，而且以前也已经遇到过，但是没有进行总结<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.ibatis.binding.BindingException: <span class="function">Invalid bound <span class="title">statement</span> <span class="params">(not found)</span>: com.xxx.xxx.xxx.monitor.mapper.XXXXMapper.loadAllServices</span></span><br><span class="line"><span class="function">    at org.apache.ibatis.binding.MapperMethod$SqlCommand.&lt;init&gt;<span class="params">(MapperMethod.java:<span class="number">189</span>)</span> ~[mybatis-3.2.7.jar:3.2.7]</span></span><br><span class="line"><span class="function">    at org.apache.ibatis.binding.MapperMethod.&lt;init&gt;<span class="params">(MapperMethod.java:<span class="number">43</span>)</span> ~[mybatis-3.2.7.jar:3.2.7]</span></span><br><span class="line"><span class="function">    at org.apache.ibatis.binding.MapperProxy.<span class="title">cachedMapperMethod</span><span class="params">(MapperProxy.java:<span class="number">58</span>)</span> ~[mybatis-3.2.7.jar:3.2.7]</span></span><br><span class="line"><span class="function">    at org.apache.ibatis.binding.MapperProxy.<span class="title">invoke</span><span class="params">(MapperProxy.java:<span class="number">51</span>)</span> ~[mybatis-3.2.7.jar:3.2.7]</span></span><br><span class="line"><span class="function">    at com.sun.proxy.$Proxy35.<span class="title">loadAllServices</span><span class="params">(Unknown Source)</span> ~[na:na]</span></span><br><span class="line"><span class="function">    ...</span></span><br><span class="line"><span class="function">    ...</span></span><br><span class="line"><span class="function">    at sun.reflect.DelegatingMethodAccessorImpl.<span class="title">invoke</span><span class="params">(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span> ~[na:1.7.0_79]</span></span><br><span class="line"><span class="function">    at java.lang.reflect.Method.<span class="title">invoke</span><span class="params">(Method.java:<span class="number">606</span>)</span> ~[na:1.7.0_79]</span></span><br><span class="line"><span class="function">    at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.<span class="title">invoke</span><span class="params">(InitDestroyAnnotationBeanPostProcessor.java:<span class="number">354</span>)</span> ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]</span></span><br><span class="line"><span class="function">    at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.<span class="title">invokeInitMethods</span><span class="params">(InitDestroyAnnotationBeanPostProcessor.java:<span class="number">305</span>)</span> ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]</span></span><br><span class="line"><span class="function">    at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.<span class="title">postProcessBeforeInitialization</span><span class="params">(InitDestroyAnnotationBeanPostProcessor.java:<span class="number">133</span>)</span> ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]</span></span><br><span class="line"><span class="function">    ... 74 common frames omitted</span></span><br></pre></td></tr></table></figure></p><p>查了好多网上资料，其实都没有说到我这个问题的根本上。</p><p>后来分析了好一大阵后才发现是maven编译时的配置出问题，加上下面这个配置就好了。</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/.svn/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/.svn/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原因在于如果你的资源文件在java包下面，则maven默认打包是不会认为这些资源文件需要打入包内，所以在启动的时候老是会报Invalid bound statement (not found)，而如果资源文件放在resources文件夹下面就不会有问题，这与maven的资源存放机制有关。如果要求maven打包的时候将java包下面的非*.java文件也打入包中，则需要上面这这个配置项。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson的一个BUG</title>
      <link href="/2016/01/17/fastjon-bug-class-cast-exception/"/>
      <url>/2016/01/17/fastjon-bug-class-cast-exception/</url>
      
        <content type="html"><![CDATA[<p>项目中使用的fastjson版本为：1.1.41，今天突然在重启线上服务器后莫名出现异常，而这个异常以前重来没有出现过，这个异常类似这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.fastjson.JSONException: write javaBean error</span><br><span class="line">    at com.alibaba.fastjson.serializer.JavaBeanSerializer.write(JavaBeanSerializer.java:<span class="number">212</span>) ~[fastjson-<span class="number">1.1</span>.41.jar:na]</span><br><span class="line">    at Serializer_6.write1(Unknown Source) ~[na:na]</span><br><span class="line">    at Serializer_6.write(Unknown Source) ~[na:na]</span><br><span class="line">    at com.alibaba.fastjson.serializer.JSONSerializer.write(JSONSerializer.java:<span class="number">369</span>) ~[fastjson-<span class="number">1.1</span>.41.jar:na]</span><br><span class="line">    at com.alibaba.fastjson.JSON.toJSONString(JSON.java:<span class="number">418</span>) ~[fastjson-<span class="number">1.1</span>.41.jar:na]</span><br><span class="line">    at com.alibaba.fastjson.JSON.toJSONString(JSON.java:<span class="number">568</span>) ~[fastjson-<span class="number">1.1</span>.41.jar:na]</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">745</span>) [na:<span class="number">1.7</span>.0_79]</span><br><span class="line">Caused by: java.lang.ClassCastException: com.google.common.collect.Lists$TransformingSequentialList cannot be cast to com.xxx.common.dto.pager.PagerData</span><br><span class="line">    at Serializer_9.write1(Unknown Source) ~[na:na]</span><br><span class="line">    at Serializer_9.write(Unknown Source) ~[na:na]</span><br><span class="line">    at com.alibaba.fastjson.serializer.ObjectFieldSerializer.writeValue(ObjectFieldSerializer.java:<span class="number">115</span>) ~[fastjson-<span class="number">1.1</span>.41.jar:na]</span><br><span class="line">    at com.alibaba.fastjson.serializer.ObjectFieldSerializer.writeProperty(ObjectFieldSerializer.java:<span class="number">68</span>) ~[fastjson-<span class="number">1.1</span>.41.jar:na]</span><br><span class="line">    at com.alibaba.fastjson.serializer.JavaBeanSerializer.write(JavaBeanSerializer.java:<span class="number">194</span>) ~[fastjson-<span class="number">1.1</span>.41.jar:na]</span><br><span class="line">    ... <span class="number">66</span> common frames omitted</span><br></pre></td></tr></table></figure></p><p>百思不得其解，因为我返回的对象中根本就没有com.xxx.common.dto.pager.PagerData 这个对象信息，为什么在序列化的时候会出现这个错误呢，非常怪异。让人十分摸不着头脑的是这个错误是重启服务器后发生。毕竟线上一直在报错，当时情急之下的解决办法试了两个方法：</p><ol><li>再次重启服务器<br>重新启动服务器几次，错误依然，仅仅一次代码的小调整（根本和报错的问题风马牛不相及），但是启动服务器就报这个错，给跪了！</li><li>赶紧找其它json类库暂时替代<br>json框架毕竟我还是熟悉几个的，情急下只能仓促使用Gson（google出品的json框架）临时替代了fastjson的json序列化输出，问题解决！！！</li></ol><a id="more"></a><p>然后就是走上了寻找问题之路，找到fastjson的github网站，在<a href="https://github.com/alibaba/fastjson/issues?utf8=%E2%9C%93&amp;q=ClassCastException" target="_blank" rel="noopener">issue列表</a>中经过一些查找搜索终于找到一个issue和我遇到问题非常相像：</p><ol><li><a href="https://github.com/alibaba/fastjson/issues/60" target="_blank" rel="noopener">issue 60</a></li><li><a href="https://github.com/alibaba/fastjson/issues/107" target="_blank" rel="noopener">issue 107</a><br>情形和我的基本一致，而且我使用的fastjson版本也刚好落在他们描述的bug版本区间。<br>fastjson的开发者wenshao回复在1.1.42修复</li></ol><p>我于是赶紧到Maven库查看fastjson版本，不看不知道，一看版本已经演进了好多，最新版本已经是1.2.7，更新代码maven依赖至1.2.7，然后测试发布到线上，多次重启确定没有再出现强制类转换异常。</p><p>关于这个错误的造成原因，还没有深入去了解是什么原因造成的，因为这个异常有一定的偶然性，可验证性比较差，线上服务器也是偶发出现。代码提交也没有明确是在哪次提交的时候修复了这个bug，等后面有时间再看看这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解析 </tag>
            
            <tag> fastjson </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Guava类库中Lists.transform的问题解析</title>
      <link href="/2015/12/30/note-about-list-transform-using-guava/"/>
      <url>/2015/12/30/note-about-list-transform-using-guava/</url>
      
        <content type="html"><![CDATA[<p>这里讲述是的google的Guava类库中的一个需要注意的问题，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestDO</span><span class="params">(String name, <span class="keyword">int</span> age, String description)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.description = description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestDO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.description = description;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDTO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestDTO</span><span class="params">(String name, <span class="keyword">int</span> age, String description)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.description = description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestDTO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.description = description;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;TestDTO&gt; retList = query();</span><br><span class="line"></span><br><span class="line">System.out.println(JSON.toJSONString(retList,<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;TestDTO&gt; <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;TestDO&gt; queryList = ImmutableList.of(</span><br><span class="line"><span class="keyword">new</span> TestDO(<span class="string">"test1"</span>, <span class="number">18</span>, <span class="string">"test obj1"</span>),</span><br><span class="line"><span class="keyword">new</span> TestDO(<span class="string">"test2"</span>, <span class="number">19</span>, <span class="string">"test obj2"</span>),</span><br><span class="line"><span class="keyword">new</span> TestDO(<span class="string">"test3"</span>, <span class="number">20</span>, <span class="string">"test obj3"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">List&lt;TestDTO&gt; retList = Lists.transform(queryList, <span class="keyword">new</span> Function&lt;TestDO, TestDTO&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TestDTO <span class="title">apply</span><span class="params">(TestDO input)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> DTOUtils.createAndCopy(TestDTO.class, input);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处是见证神奇的地方</span></span><br><span class="line"><span class="keyword">for</span>(TestDTO dto : retList)&#123;</span><br><span class="line">dto.setAge(dto.getAge()+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> retList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码的输出是什么？</p><a id="more"></a><p>这段代码的测试本意是将得到的数据做一些处理（这里简单将age+1），然后返回结果。粗看起来应该打印的结果是这样的：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"age"</span>:<span class="number">19</span>,</span><br><span class="line"><span class="attr">"description"</span>:<span class="string">"test obj1"</span>,</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"test1"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"age"</span>:<span class="number">20</span>,</span><br><span class="line"><span class="attr">"description"</span>:<span class="string">"test obj2"</span>,</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"test2"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"age"</span>:<span class="number">21</span>,</span><br><span class="line"><span class="attr">"description"</span>:<span class="string">"test obj3"</span>,</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"test3"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>但是实际上的结果是这样的：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"age"</span>:<span class="number">18</span>,</span><br><span class="line"><span class="attr">"description"</span>:<span class="string">"test obj1"</span>,</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"test1"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"age"</span>:<span class="number">19</span>,</span><br><span class="line"><span class="attr">"description"</span>:<span class="string">"test obj2"</span>,</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"test2"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"age"</span>:<span class="number">20</span>,</span><br><span class="line"><span class="attr">"description"</span>:<span class="string">"test obj3"</span>,</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"test3"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>如果第一次使用Guava类库或者对其不熟悉，也许某一天你就会踩上这个坑，其实也不算是坑，因为它的文档已经说明了：</p><blockquote><p>Returns a list that applies function to each element of fromList. The returned list is a transformed view of fromList; changes to fromList will be reflected in the returned list and vice versa.<br>Since functions are not reversible, the transform is one-way and new items cannot be stored in the returned list. The add, addAll and set methods are unsupported in the returned list.<br>The function is applied lazily, invoked when needed. This is necessary for the returned list to be a view, but it means that the function will be applied many times for bulk operations like List.contains and List.hashCode. For this to perform well, function should be fast. To avoid lazy evaluation when the returned list doesn’t need to be a view, copy the returned list into a new list of your choosing.<br>If fromList implements RandomAccess, so will the returned list. The returned list is threadsafe if the supplied list and function are.<br>If only a Collection or Iterable input is available, use Collections2.transform or Iterables.transform.<br>Note: serializing the returned list is implemented by serializing fromList, its contents, and function – not by serializing the transformed values. This can lead to surprising behavior, so serializing the returned list is not recommended. Instead, copy the list using ImmutableList.copyOf(Collection) (for example), then serialize the copy. Other methods similar to this do not implement serialization at all for this reason.</p></blockquote><p>大体翻译意思是在说：</p><blockquote><p>该方法返回一个列表，这个列表中元素是运用方法中传入的功能函数(Function)对原列表中的元素进行处理后的结果，它是原列表的一个功能视图，任何对原列表的改变将会体现到视图列表中。因为Function函数是不可逆的，所以这样的转换是单向的，并且转换的结果不能存储在返回的列表中。所有对视图列表的添加（add/addAll）、设置（set）等都是不被支持的。<br>Function函数的调用是延迟的（只有在需要的时候才进行调用），这对于视图列表来说是非常有必要的，但是这也同时意味着Function函数会因为各种情况而重复调用多次，比如List.contains/List.hashCode等，也正因为这个原因，所以建议Function应该是尽量轻量级而快速。<br>如果你不是将返回的视图作为视图使用，那么你需要将该此视图列表拷贝到新的你需要的各种列表中。<br>如果原列表实现了RandomAccess接口，那么返回的视图列表也会实现该接口。如果原列表是线程安全的，同时Function函数是线程安全的，那么返回的视图列表也是线程安全的。<br>如果原集合是一个更高的抽象类，如：Collection、Iterable，那么使用Collection2.transform或者Iterables.transform也能满足需求。<br>注意：序列化视图列表实际上是对原列表的内容的序列化，并不是序列化转换过后的视图内容。这会产生一些比较奇怪的行为，所以序列化返回的视图对象不建议的。如果确实需要序列化返回视图，请使用ImmutableList.copyOf(Collection),然后序列化这个拷贝，而介于这个原因，其它与该方法相似的方法根本就没有实现序列化。</p></blockquote><p>所以说，返回的对象列表是一个视图，其中对它的任何更改都是无效的，并且也不建议对视图对象产生更改，如果需要更改返回的列表，那么需要自己进一步包装，如Lists.newArrayList(retList);</p><p>如果需要对返回的结果视图进行处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;TestDTO&gt; retList = query();</span><br><span class="line">List&lt;TestDTO&gt; copyList = Lists.newArrayList(retList);</span><br><span class="line"><span class="keyword">for</span>(TestDTO dto : copyList)&#123;</span><br><span class="line">dto.setAge(dto.getAge()+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(JSON.toJSONString(copyList,<span class="keyword">true</span>));</span><br></pre></td></tr></table></figure></p><p>这时输出了正确的结果：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"age"</span>:<span class="number">19</span>,</span><br><span class="line"><span class="attr">"description"</span>:<span class="string">"test obj1"</span>,</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"test1"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"age"</span>:<span class="number">20</span>,</span><br><span class="line"><span class="attr">"description"</span>:<span class="string">"test obj2"</span>,</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"test2"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"age"</span>:<span class="number">21</span>,</span><br><span class="line"><span class="attr">"description"</span>:<span class="string">"test obj3"</span>,</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"test3"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP字符串搜索算法</title>
      <link href="/2015/12/26/string-search-algorithm-KMP/"/>
      <url>/2015/12/26/string-search-algorithm-KMP/</url>
      
        <content type="html"><![CDATA[<p>一篇介绍KMP字符串搜索算法的好文章：<a href="http://kb.cnblogs.com/page/176818/" target="_blank" rel="noopener">http://kb.cnblogs.com/page/176818/</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN版本控制系统分支的用法及分析</title>
      <link href="/2015/10/05/usage-of-branche-in-svn/"/>
      <url>/2015/10/05/usage-of-branche-in-svn/</url>
      
        <content type="html"><![CDATA[<p><strong>SVN</strong>是一种软件开发中非常流行的源代码版本控制工具软件，它能保存你每一次的源代码提交历史，便于我们对源码的历史做追溯，这样的好处是：</p><ul><li>可以浏览软件源代码版本的演化历史以及回滚相关历史版本代码</li><li><strong>分支系统优秀，可以多人进行协作开发</strong></li><li>管理方便，逻辑明确，符合一般人思维习惯。</li><li>易于管理，集中式服务器更能保证代码安全性。</li><li>代码一致性非常高。</li></ul><p>SVN适合开发人数不多的项目开发。大部分软件配置管理的大学教材都是使用SVN系统。</p><p>其中SVN的分支功能可以说是SVN源代码控制系统的核心功能。根据trunk分支的功用不同我将分支的使用方式分为两类：</p><ul><li>以trunk作为稳定发布分支(Basically stable)</li><li>以trunk作为开发分支(Basically unstable)</li></ul><p><strong>以trunk作为稳定发布分支</strong><br><img src="http://7xn9i1.com1.z0.glb.clouddn.com/20151005-2.jpg" alt="以trunk作为稳定发布分支"></p><p>顾名思义这个分支原则主导思想是trunk只包含稳定的随时可发布的代码。branches则用于开发新功能/修正bug/发布前的QA控制/重构/实验性质功能试点。一切未经测试验证的代码都禁止向trunk提交。<br>这个是我从参加工作以来历届公司的开发方式，什么是以trunk作为稳定发布分支？这里我们从第一份的源代码说起，第一份源代码我们提交到SVN上的trunk上，并进行开发，开发完结后我们发布第一个版本，我们称之为第一个稳定版本，在第一个稳定版本完成后，以后所有的开发都不会在trunk上进行提交，什么意思呢？假如这时有一个新需求到来，那么就从主干trunk上提取一份代码（术语叫分支）到另一分支目录（一般分支目录取名branches），建立自己的开发分支，测试也是在分支上完成功能测试。待要发布时才将分支代码合并到主干上。因为主干trunk上的代码从一开始到每次迭代都是非常稳定的，所以这种方式叫以<strong>trunk为稳定发布分支</strong>的开发方式。每当开发完成某项功能，并达到发布标准且分支源代码已经合并到trunk分支后，我们就会以当前的trunk打出一个标签(tag)，标识一个稳定的版本（里程碑）。</p><p>这种开发方式的优点是：</p><ul><li>trunk代码非常稳定，始终存在一个功能稳定的分支可用</li><li>代码开发的并行度非常高</li><li>代码之间的抗干扰非常强</li></ul><p>缺点是：</p><ul><li>可能会存在较多分支（一般以某个功能或某几个功能作为一个功能分支开发）</li><li>代码发布前需要合并到trunk，可能会产生代码冲突，需要人工合并</li></ul><p>目前大部分的互联网公司的源代码分支开发方式都是采用的这种方式。</p><a id="more"></a><p><strong>以trunk作为开发分支</strong><br><img src="http://7xn9i1.com1.z0.glb.clouddn.com/20151005-1.jpg" alt="以trunk作为开发分支"></p><p>Basically unstable原则下，要求trunk包含最新的代码，不管它的稳定性如何；<br>而用于release candidate的版本则应该开辟一个分支来交付。<br>这种开发方式是我现在这家公司的团队所使用的源代码管理方式（现因为这种方式的缺点已经转向Basically stable模式），与上面的方式不同的是，所有的开发源代码提交都是直接在trunk上提交，即trunk上拥有最新的项目功能代码，也就是说trunk上不断会有人提交代码，也可以说trunk上的代码是非常不稳定的。所有的测试人员都是基于trunk进行代码测试，当测试完毕后，由trunk上打出一个发布tag。当然在我看来这种方式存在的问题很大，这种开发方式的优点我想了想可能只有以下一条：</p><ul><li>所有人基于同一分支开发代码，测试代码，发布代码，基本不存在合并冲突的风险</li></ul><p>但是这种开发方式的缺点我却可以随便列举两个：</p><ul><li><p>trunk代码<strong>非常不稳定</strong>，源代码中不容易找出当前的稳定版本分支<br>什么意思呢？就是说所有的人都在不断的向trunk分支上提交代码，这个分支的测试是相当困难的，根据测试的相关原理，如果在已经测试OK的代码基础上提交代码，理论上说可能存在污染原已经测试过的代码，增加了引入新BUG的风险程度</p></li><li><p>代码开发的并行度极低<br>为什么说并行度极低呢？比如说两个开发人员需要完成不同需求，他们都在trunk上开发，这样会导致的一个问题是可能A开发人员已经开发好了一个功能，但是B开发人员还没有完成相关的功能需求，那么此时A是无法进行上线上操作的，或者说可能会遇到代码残缺甚至无法启动的问题。那么此时A开发人员只能是等到B开发人员完成相关功能后才能发布，且B开发人员开发的相关功能更改可能会对A的功能造成影响。</p></li></ul><p>目前许多开源的软件会采用这种开发方式。</p><p>结合上面的分析以及开源世界的软件源代码管理方式，我想说说自己的意见：</p><ol><li><p>如果是开发开源软件，那么可以考虑使用以trunk作为开发分支的方式，原因如下：<br><strong>开源软件有着良好的人员素质以及里程碑控制</strong>，开源软件的发布毕竟来说不会是非常频繁的，它们有着自己的roadmap（路线图），所有的开发人员都是以这种roadmap作为开发主线，即在某一里程碑完成前所有人都是可以向trunk上提交代码的，但是一旦代码功能完成，进行测试期间时，trunk分支已经被冻结的，所有的人员都不能够向trunk提交代码。这样避免了我上面所说的测试代码污染性的问题。当软件测试完成并需要发布一个版本时，会从trunk上打出一个tag(标签)。作为后续软件特有版本BUG修复的源代码基线。这也是大家浏览开源软件的源代码仓库时看到的情景。开源的软件，或者说是基于版本发布的软件，它们更需要对发布版本的控制，因为它们需要对每个发布版本都维持有相关的修复生命周期，在该软件的某个版本发现的BUG，需要针对该版本（tag）进行修复，并合并回trunk以修复最新发布的版本。</p></li><li><p>如果是互联网公司的软件开发，并且所开发的软件是以服务方式（网站、API、WS、网络基础服务等）提供给外部用户使用，那么请考虑使用以trunk作为稳定发布分支的方式，原因如下：<br><strong>互联网公司的开发节奏是非常快的</strong>，虽然它也可能存在里程碑式的管理，但是这里面存在的发布与上线的次数是远远大于开源软件的版本发布，那么这里存在的问题就是，如何快速的实现功能迭代上线，这要求软件开发过程中的并行度要非常高且相互不受影响。而且由于是以服务的方式提供，所以不存在历史版本的维护问题，即源代码是不断向前演进的，并不需要对某个版本的服务需要进行BUG修复，所有的修复工作都是在服务端的自然演进中完成修复工作。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVN </tag>
            
            <tag> 版本控制 </tag>
            
            <tag> VCS </tag>
            
            <tag> 分支管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于apache http转发后后端应用获取前端port问题</title>
      <link href="/2015/05/20/apache-http-proxy-port/"/>
      <url>/2015/05/20/apache-http-proxy-port/</url>
      
        <content type="html"><![CDATA[<p>apache+jetty转发配置下，jetty下应用获取request.getServerPort()获取到的是jetty的端口，而非apache入口的端口，情形如下：</p><p>apache通过配置虚拟主机：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:80</span>&gt;</span></span><br><span class="line">     ServerName "admin.test.com"</span><br><span class="line">     ProxyRequests Off</span><br><span class="line">     ProxyPass / http://localhost:6808/</span><br><span class="line">     ProxyPassReverse / http://localhost:6808/</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在80端口接受外界访问，然后转发到端口6808上。</p><a id="more"></a><p>但是在6808端口上的应用在获取request.getServerPort()时获取到的是6808，而非80,对于这种情况在构造自引用地址时会出现一些问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort();</span><br></pre></td></tr></table></figure><p>这块代码一般会引用在前端的JSP页面或者程序需要进行URL地址引用的时候。这个时候应用端口就不正确了。</p><p>一般的解决办法：</p><p>1、修改basePath的获取方式，改成配置文件方式，直接读取配置文件，但是这种方式不是特别方便，不推荐使用</p><p>2、使用反向代理服务器配置</p><p><strong>nginx配置方式</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header host $host:$port</span><br></pre></td></tr></table></figure></p><p><strong>apache配置方式</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:80</span>&gt;</span></span><br><span class="line">     ServerName "admin.test.com"</span><br><span class="line">     ProxyRequests Off</span><br><span class="line">     ProxyPass / http://localhost:6808/</span><br><span class="line">     ProxyPassReverse / http://localhost:6808/</span><br><span class="line">     ProxyPreserveHost On</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> apache </tag>
            
            <tag> nginx </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx负载均衡重定向问题</title>
      <link href="/2015/04/09/nginx-proxy-port/"/>
      <url>/2015/04/09/nginx-proxy-port/</url>
      
        <content type="html"><![CDATA[<p>当负载端口不是80时，发现所有 response.sendRedirect() 重定向的页面都返回80端口，后来发现是代理设置Header时没有指定Ngnix监听的负载端口</p><p>#设置被代理服务器的端口或套接字，以及URL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Host $host:6112;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat/jetty容器之间的路径兼容性问题</title>
      <link href="/2015/04/09/tomcat-jetty-container-path-compatibility/"/>
      <url>/2015/04/09/tomcat-jetty-container-path-compatibility/</url>
      
        <content type="html"><![CDATA[<p>在项目中使用springmvc框架时，在controller方法中返回的view路径字符串最后和xml文件配置中的配置路径进行整合，从而形成一个完成的视图文件路径，然后在tomcat和jetty身上两者之间的差异出现问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;internalViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><br><span class="line">        p:viewClass=&quot;org.springframework.web.servlet.view.JstlView&quot;</span><br><span class="line">        p:prefix=&quot;/WEB-INF/view/jsp&quot;</span><br><span class="line">        p:suffix=&quot;.jsp&quot;</span><br><span class="line">        p:order=&quot;1&quot;/&gt;</span><br></pre></td></tr></table></figure><p>tomcat中view文件/WEB-INF/view/jsp//default/ui/user/update_passwd.jsp是可以找到的</p><p>而在jetty中view文件/WEB-INF/view/jsp//default/ui/user/update_passwd.jsp是不能找到的，去掉多余的/后方能找到，jetty对于路径的规范更加严格？</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> jetty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>no such object in table</title>
      <link href="/2015/04/06/java-no-such-object-in-table/"/>
      <url>/2015/04/06/java-no-such-object-in-table/</url>
      
        <content type="html"><![CDATA[<p>检查一下主机名配置,以及host文件或者DNS解析,可能Context.PROVIDER_URL需要域名而不能使用ip</p><p>把etc/hosts恢复成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br></pre></td></tr></table></figure></p><p>试试</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virtualbox 安装ubuntu 14.04后分辨率不正确的问题修复</title>
      <link href="/2015/01/21/virtualbox-ubuntu-14.04-resolution/"/>
      <url>/2015/01/21/virtualbox-ubuntu-14.04-resolution/</url>
      
        <content type="html"><![CDATA[<p>Instead of using the Virtualbox Guest Addition ISO file, try using the following commands in the terminal on the guest Ubuntu Virtual Machine :</p><p>Update apt-get. apt-get update</p><p>Install dependencies apt-get install build-essential linux-headers-$(uname -r)</p><p>Install guest additions apt-get install virtualbox-guest-x11</p><p>Use sudo before the commands if required.</p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> virtualbox </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于tomcat 开启gc日志后每隔1小时full gc的问题</title>
      <link href="/2014/08/19/tomcat-one-hour-fullgc/"/>
      <url>/2014/08/19/tomcat-one-hour-fullgc/</url>
      
        <content type="html"><![CDATA[<p>关于tomcat 开启gc日志后每隔1小时full gc的问题</p><p>主要是因为rmi导致的，可以参见以下的博文：</p><p><a href="http://www.iteye.com/topic/1121073" target="_blank" rel="noopener">http://www.iteye.com/topic/1121073</a></p><p><a href="http://hllvm.group.iteye.com/group/topic/27945" target="_blank" rel="noopener">http://hllvm.group.iteye.com/group/topic/27945</a></p><p><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/rmi/sunrmiproperties.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/6/docs/technotes/guides/rmi/sunrmiproperties.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx server节配置</title>
      <link href="/2014/08/05/nginx-server-segment-conf/"/>
      <url>/2014/08/05/nginx-server-segment-conf/</url>
      
        <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen          80;</span><br><span class="line">    server_name     *.test.com default;</span><br><span class="line">    root                    /home/a/share/htdocs;</span><br><span class="line">    index                   index.html index.htm;</span><br><span class="line">    location   / &#123;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080/test/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#    rewrite ^/(.*)$     http://www.test.com/abc.htm$1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server_name节点表示从哪个域名过来，nginx里可以配置多个server节点以支持不同域名的转发需求。</p><p>default的意思是如果所有的server节点都没有匹配，那么就使用这个default节点匹配了。</p><p>index节点表示如果域名后没有带任何的地址信息，则默认访问的页面，一般应用会以index.html展现。</p><p>location节点可以根据正则表达式进行配置，以满足不同路径的转发规则。</p><p>proxy_set_header 节点主要是将请求的原始信息附加到nginx的转发上，从而能让后端服务（如tomcat)能够获取到最原始的客户端信息，而不是nginx转发端的信息</p><p>rewrite 节点是重定向，当访问匹配的正则表达式路径时会被重定向到相应的地址上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux自动同步时间</title>
      <link href="/2013/12/09/linux-time-auto-update/"/>
      <url>/2013/12/09/linux-time-auto-update/</url>
      
        <content type="html"><![CDATA[<p> 1、 一般的Linux发行版都带有ntpdate这个命令，如没有，可以从其它发行版中拷贝一个/usr/local/bin<br> 2、#crontab -e<br> 添加<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/10 * * * *    /usr/local/bin/ntpdate  time.nist.gov&gt; /dev/null 2&amp;1</span><br></pre></td></tr></table></figure></p><p> 每10秒执行一次ntpdate，当然ntpdate也可以用脚本代替，这样可以更加灵活 time.nist.gov 是一个时间同步服务器</p><p> 3、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.d/init.d/crond restart</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装VIM</title>
      <link href="/2013/12/09/linux-vim-setup/"/>
      <url>/2013/12/09/linux-vim-setup/</url>
      
        <content type="html"><![CDATA[<p>yum install vim-X11 vim-common vim-enhanced vim-minimal</p><p>如果Centos如果精简安装，则不会默认安装VIM，只会安装VI</p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 如何查找命令的路径</title>
      <link href="/2013/12/03/linux-find-command-path/"/>
      <url>/2013/12/03/linux-find-command-path/</url>
      
        <content type="html"><![CDATA[<p>linux 下，我们常使用 cd ,grep,vi 等命令，有时候我们要查到这些命令所在的位置，如何做呢？</p><p>linux下有2个命令可完成该功能：which ,whereis</p><p> which 用来查看当前要执行的命令所在的路径。<br>whereis 用来查看一个命令或者文件所在的路径。</p><p>which命令的原理：在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p><p>which命令的使用实例：</p><p>　　$ which grep</p><p>whereis命令原理：只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p><p>whereis命令的使用实例：</p><p>　　$ whereis grep</p><p>下面举个例子来说明。加入你的linux系统上装了多个版本的java。如果你直接在命令行敲命令 “java -version” ，会得到一个结果。但是，你知道是哪一个路径下的java在执行吗？如果想知道，可以用 which 命令：</p><p>which java</p><p>返回的是 PATH路径中第一个JAVA的位置，也就是JAVA命令默认执行的位置</p><p>如果使用命令： whereis java</p><p>那么你会得到很多条结果，因为这个命令把所有包含java（不管是文件还是文件夹）的路径都列了出来。</p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven -Dmaven.skip.test=true 和 -DskipTests=true的区别</title>
      <link href="/2013/12/01/maven-skip-tests-two-styles-diff/"/>
      <url>/2013/12/01/maven-skip-tests-two-styles-diff/</url>
      
        <content type="html"><![CDATA[<p>在使用mvn package进行编译、打包时，Maven会执行src/test/java中的JUnit测试用例，有时为了跳过测试，会使用参数-DskipTests和-Dmaven.test.skip=true，这两个参数的主要区别是：</p><p>-DskipTests，不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。</p><p>-Dmaven.test.skip=true，不执行测试用例，也不编译测试用例类。</p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 快捷键</title>
      <link href="/2013/09/25/intellij-idea-quick-key/"/>
      <url>/2013/09/25/intellij-idea-quick-key/</url>
      
        <content type="html"><![CDATA[<ol><li>Ctrl + Space<br>完成类、方法、变量名称的自动输入,这个快捷键是我最经常使用的快捷键了，它可以完成类、方法、变量名称的自动录入，很方便  </li><li>Ctrl + N（Ctrl + Shift + N）<br>跳转到指定的java文件（其它文件）这个功能很方便，至少我不用每回都在一长串的文件列表里找寻我想要编辑的类文件和jsp文件了  </li><li>Ctrl + B<br>跳转到定义处这个就不用多说了，好象是个IDE就会提供的功能  </li><li>Ctrl + Alt + T<br>用<em>来围绕选中的代码行（ </em> 包括if、while、try catch等）这个功能也很方便，把我以前要做的：①先写if-else，②然后调整代码的缩进格式，还要注意括号是否匹配了，现在用这个功能来做，省事多了（不过让我变得越来越懒了）  </li><li>Ctrl + Alt + B<br>跳转到方法实现处这个也算是很普遍的功能了，就不多说了。  </li><li>Ctrl + W<br>按一个word来进行选择操作在IDEA里的这个快捷键功能是先选择光标所在字符处的单词，然后是选择源<br>代码的扩展区域。举例来说，对下边这个语句java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat(“yyyy-MM-dd HH:mm”);当光标的位置在双引号内的字符串中时，会先选中这个字符串，然后是等号右边的表达式，再是整个句子。我一般都是在对代码进行重新修改的时候使用<br>它来选择出那些长长的复合表达式，很方便：）  </li><li>Shift + F1<br>在浏览器中显示指定的java docs,这个也应该是几乎所有的java ide都提供的功能，就不多说了。  </li><li>Ctrl + Q<br>在editor window中显示java docs这个功能很方便–因为有时仅仅是忘记了自己编写的方法中的某个参数的含义，此时又不想再起一个浏览器来查看java doc，此时这个功能的好处就体现出来了  </li><li>Ctrl + /<br>注释/反注释指定的语句,这个功能很象PB中提供的一个功能，它可以注释和反注释你所选择的语句（使用单行注释符号”//“），你也可以用Ctrl + Shift + / 来进行多行语句的注释（即使用多行注释符号”/<em> … </em>/“）  </li><li>F2/Shift + F2<br>跳转到下/上一个错误语句处IDEA提供了一个在错误语句之间方便的跳转的功能，你使用这个快捷键可以快捷在出错的语句之间进行跳转。<a id="more"></a>  </li><li>Shift + F6<br>提供对方法、变量的重命名对IDEA提供的Refector功能我用得比较少，相比之下这个功能是我用得最多的了。对于这个功能没什么可说的了，确实很方便，赶快试一试吧。  </li><li>Ctrl + Alt + L<br>根据模板格式化选择的代码,根据模板中设定的格式来format你的java代码，不过可惜的是只对java文件有效  </li><li>Ctrl + Alt + I<br>将选中的代码进行自动缩进编排这个功能在编辑jsp文件的时候也可以工作，提供了一个对上边格式化代码功能的补充。  </li><li>Ctrl + Alt + O<br>优化import自动去除无用的import语句，蛮不错的一个功能。  </li><li>Ctrl + ]/[<br>跳转到代码块结束/开始处,这个功能vi也有，也是很常用的一个代码编辑功能了。</li><li>Ctrl+E<br>可以显示最近编辑的文件列表  </li><li>Shift+Click<br>可以关闭文件  </li><li>Ctrl+Shift+Backspace<br>可以跳转到上次编辑的地方  </li><li>Ctrl+F12<br>可以显示当前文件的结构  </li><li>Ctrl+F7<br>可以查询当前元素在当前文件中的引用，然后按F3可以选择  </li><li>Ctrl+Shift+N<br>可以快速打开文件  </li><li>Alt+Q<br>可以看到当前方法的声明  </li><li>Ctrl+P<br>可以显示参数信息  </li><li>Alt+Insert<br>可以生成构造器/Getter/Setter等  </li><li>Ctrl+Alt+V<br>可以引入变量。例如把括号内的SQL赋成一个变量  </li><li>Alt+Up and Alt+Down<br>可在方法间快速移动  </li><li>Alt+Enter<br>可以得到一些Intention Action，例如将”==”改为”equals()”  </li><li>Ctrl+Shift+Alt+N<br>可以快速打开符号  </li><li>Ctrl+Shift+Space<br>在很多时候都能够给出Smart提示  </li><li>Alt+F3<br>可以快速寻找  </li><li>Ctrl+O<br>可以选择父类的方法进行重写  </li><li>Ctrl+Alt+Space<br>是类名自动完成  </li><li>Ctrl+J<br>Live Templates!  </li><li>Ctrl+Shift+F7<br>可以高亮当前元素在当前文件中的使用  </li><li>Ctrl+Alt+Up /Ctrl+Alt+Down<br>可以快速跳转搜索结果  </li><li>Ctrl+Shift+J<br>可以整合两行  </li><li>Alt+F8是计算变量值  </li></ol><p>Ctrl+D 复制上一行或复制选定<br>Ctrl+Alt+L 格式化代码<br>Alt+Shift+Insert 列编辑  </p><p>装上UpperLowerCapitalize后<br>Alt+P // to uppercase<br>Alt+L // to lowercase<br>Alt+C // 首字母大写 </p>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx error_page配置</title>
      <link href="/2013/07/31/nginx-error-page-configuration/"/>
      <url>/2013/07/31/nginx-error-page-configuration/</url>
      
        <content type="html"><![CDATA[<p>今天偶然访问了一个线上应用不存在的url，应用报错，出现了乱码。</p><p>乱码是从nginx转发的tomcat报出来的。tomcat默认处理HTML是以ISO-8859-1处理的，所以就产生了乱码。</p><p>解决这个error_page的途径我尝试了两种方法：</p><p>1、让tomcat返回正常的非乱码的error_page<br>tomcat的错误页是在项目的web.xml中配置的，但是除了这个之外，别无其它编码配置。在网上搜索了有人提现将.html这种页面也交由jsp servlet处理就好，我认为这种方式不好，所以直接没尝试。<br>我配置的web.xml如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么首先想到的就是把error.html页的返回头改掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>但是改后，不幸的是还是不行！<br>tomcat还是把它处理成ISO-8859-1了。杯具！</p><p>2、第二种途径是不管tomcat返回的错误页，直接使用nginx的错误页<br>这里要注意一件事就是一定要配置nginx这个选项：proxy_intercept_errors on;</p><p>这个选项默认在nginx是off的。所以这时候你配置的所有error_page错误页都不会生效。为此我查了好久才知道是这个原因。</p><p>我的配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location   / &#123;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    proxy_intercept_errors on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 原创文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
